[
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "//reference: Julien Gachadoat's awesome exhibition DM image.\n//https://twitter.com/v3ga/status/1298298883806765057/\n\nfunction setup() {\n  createCanvas(800, 800);\n  colorMode(HSB, 360, 100, 100, 100);\n  angleMode(DEGREES);\n}\n\nfunction draw() {\n  background(0, 0, 90);\n  let r = int(random(1, 5)) * 50;\n  let n = 0;\n  let w = sqrt(sq(width) + sq(height));\n  push();\n  translate(width / 2, height / 2);\n  rotate(45);\n  translate(-w / 2, -w / 2);\n  for (let y = 0; y <= w * 1.5; y += r * sqrt(3)) {\n    for (let x = 0; x <= w * 1.5; x += r * 3) {\n      // drawingContext.shadowColor = color(0,0,0,33);\n      // drawingContext.shadowBlur = 10;\n      drawHexagon(x, y, r * .95);\n      drawHexagon(x + cos(30) * sqrt(3) * r, y + sin(30) * sqrt(3) * r, r * .95);\n    }\n    n++;\n  }\n  pop();\n  // noLoop();\n  frameRate(1);\n}\n\nfunction drawHexagon(x, y, r) {\n  let points = [];\n  push();\n  translate(x, y);\n  noFill();\n  beginShape();\n  for (let angle = 0; angle < 360; angle += 360 / 6) {\n    let hx = cos(angle) * r;\n    let hy = sin(angle) * r;\n    vertex(hx, hy);\n    points.push(createVector(hx, hy));\n  }\n  endShape(CLOSE);\n\n  // let m = int(noise(x/100,y/100,frameCount/100)*points.length)\n  let n = int(random(points.length));\n  let p = points[n];\n  for (let i = 0; i < points.length; i++) {\n    let c = points[i];\n    let n = points[(i + 1) % points.length];\n    for (let t = 0; t <= 1; t += 1 / 7) {\n      let v = p5.Vector.lerp(c, n, t);\n      stroke(0, 0, 0);\n      line(p.x, p.y, v.x, v.y);\n    }\n  }\n  pop();\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Okazz\n\n### Response:\n",
    "completion": "let pos = [];\nlet colors = [\"#f20c0c\", \"#ffaa00\", \"#f2f20c\", \"#0cf259\", \"#0ca6f2\", \"#590cf2\", \"#f20ca6\", \"#ffffff\", \"#000000\"];\n\nfunction setup() {\n\tcreateCanvas(800, 800);\n\trectMode(CENTER);\n\n\tbackground(random(colors));\n\n\tlet seg = 50;\n\tlet w = width / seg;\n\tfor (let i = 0; i < seg; i++) {\n\t\tfor (let j = 0; j < seg; j++) {\n\t\t\tlet x = i * w + w / 2;\n\t\t\tlet y = j * w + w / 2;\n\t\t\tpos.push(createVector(x, y));\n\t\t}\n\t}\n\n\tshuffle(pos, true);\n\n\tnoStroke();\n\tfor (let p of pos) {\n\t\trandomShape(p.x, p.y, random(10, 60));\n\t}\n}\n\nfunction draw() {\n\n}\n\nfunction randomShape(x, y, w) {\n\tlet rnd = int(random(4));\n\t// let ang = (int(random(4)) * (TAU/4))+PI*0.05;\n\tlet ang = (int(random(4)) * (TAU / 4));\n\tpush();\n\ttranslate(x, y);\n\trotate(ang);\n\tfill(random(colors));\n\tstroke(random(colors));\n\tstrokeWeight(0.5);\n\tif (rnd == 0) {\n\t\tellipse(0, 0, w, w);\n\t} else if (rnd == 1) {\n\t\trect(0, 0, w, w / int(random(1, 3)));\n\t} else if (rnd == 2) {\n\t\teye(0, 0, w);\n\t} else if (rnd == 3) {\n\t\tflower(0, 0, w);\n\t}\n\tpop();\n}\n\nfunction eye(x, y, w) {\n\t//Center\n\tlet ap1x = w * -0.34;\n\tlet ap1y = w * -0.06;\n\tlet ap2x = w * -0.25;\n\tlet ap2y = w * -0.25;\n\tpush();\n\ttranslate(x, y);\n\n\tbeginShape();\n\tvertex(-w * 0.5, 0);\n\tbezierVertex(ap1x, ap1y, ap2x, ap2y, 0, ap2y);\n\tbezierVertex(-ap2x, ap2y, -ap1x, ap1y, w * 0.5, 0);\n\tbezierVertex(-ap1x, -ap1y, -ap2x, -ap2y, 0, -ap2y);\n\tbezierVertex(ap2x, -ap2y, ap1x, -ap1y, -w * 0.5, 0);\n\tendShape();\n\n\tlet cc = 3;\n\tfor (let i = 0; i < cc; i++) {\n\t\tlet d = map(i, 0, cc, w * 0.5, 0);\n\t\tfill(random(colors));\n\t\tcircle(0, 0, d);\n\t}\n\n\n\tpop();\n}\n\n\nfunction flower(x, y, w) {\n\tpush();\n\ttranslate(x, y);\n\tlet num = 12;\n\tfor (let i = 0; i < num; i++) {\n\t\trotate(TAU / num);\n\t\tellipse(w * 0.32, 0, w * 0.35, (w / num) * 1.7);\n\t}\n\tfill(random(colors));\n\tcircle(0, 0, w * 0.4);\n\tpop();\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Okazz"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by reona396\n\n### Response:\n",
    "completion": "var stars = [];\nvar starsNum = 5000;\nconst palette = [\"#FFFF00\", \"#FF00FF\", \"#00FFFF\"];\n\nfunction setup() {\n\tcreateCanvas(963, 633);\n\tangleMode(DEGREES);\n\tnoLoop();\n\n\tnoStroke();\n\n\tfor (var i = 0; i < starsNum; i++) {\n\t\tstars.push(new Star());\n\t}\n}\n\nfunction draw() {\n\tblendMode(BLEND);\n\tbackground(0);\n\n\tblendMode(ADD);\n\tfor (var i = 0; i < starsNum; i++) {\n\t\tstars[i].display();\n\t}\n}\n\nfunction Star() {\n\tthis.R = width * 0.25;\n\tthis.x = this.R * randomGaussian();\n\tthis.y = this.R * randomGaussian();\n\tthis.r = random(5, 80);\n\tthis.c = color(random(palette));\n\tthis.alpha = random(10, 50);\n\n\tthis.display = function () {\n\t\tthis.c.setAlpha(this.alpha);\n\t\tfill(this.c);\n\t\tpush();\n\t\ttranslate(width/2, height);\n\t\tcircle(this.x, this.y, this.r);\n\t\tpop();\n\t}\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by reona396"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by reona396\n\n### Response:\n",
    "completion": "let shapes = [];\nlet shapesNum = 10;\nlet num = 600;\nconst palette = \"46b1c9-84c0c6-9fb7b9-bcc1ba-f2e2d2\".split('-').map(a => \"#\" + a);\nconst numArray = [100, 300, 500, 700];\n\nfunction setup() {\n  createCanvas(windowWidth, windowHeight);\n  angleMode(DEGREES);\n\n  noStroke();\n\n  noLoop();\n}\n\nfunction draw() {\n  background(random(palette));\n\n  for (let p = 0; p < 500; p++) {\n    let r = 0;\n    let t = random(-360, 360);\n    let sign = 1;\n    let seedA = random(1000);\n    let seedB = random(1000);\n    let seed = seedA;\n    let num = random(numArray);\n    let ox = random(width);\n    let oy = random(height);\n    let c = color(random(palette));\n\n    fill(c);\n    beginShape();\n    for (let i = 0; i < num; i++) {\n      tStep = lerp(-1, 1, noise(seed, i * 0.1));\n      t += tStep;\n      let x = r * cos(t) + ox;\n      let y = r * sin(t) + oy;\n      vertex(x, y);\n\n      if (sign == 1 && r > num / 2) {\n        sign = -1;\n        seed = seedB;\n      }\n\n      r += sign * 1;\n    }\n    endShape(CLOSE);\n  }\n}\n\n// class Shape {\n// \tconstructor() {}\n\n// \tmove() {}\n\n// \tdisplay() {}\n// }",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by reona396"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Naoki Tsutae, with tags noise\n\n### Response:\n",
    "completion": "C=0\ndraw=_=>{\n createCanvas(W=720,W)\n noFill()\n rectMode(CENTER)\n C+=.5\n x=y=W/2\n for(i=0;i<100;i++){\n  r=noise((i+C)*.03)*TAU*3\n  x+=cos(r)*9\n  y+=sin(r)*9\n  p=pow(.95,i)\n  strokeWeight(p*10)\n  square(x,y,p*W)\n }\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Naoki Tsutae, with tags noise"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Eric Ly\n\n### Response:\n",
    "completion": "let _bgWidth;\nlet _minWidth;\nlet _maxWidth;\nlet _palette = [\"61a0af\",\"96c9dc\",\"f06c9b\",\"f9b9b7\",\"f5d491\",\"f6d89b\"];//211008_04\n\nfunction setup() {\n  createCanvas(windowWidth, windowHeight);\n  _bgWidth = min(width, height);\n  _maxWidth = max(width, height);\n  _minWidth = _bgWidth * 0.95;\n  colorMode(HSB, 360, 100, 100, 255);\n  noFill();\n  strokeWeight(_minWidth/600);\n\n  translate(width/2, height/2);\n  setObject();\n}\n\nfunction setObject() {\n  background(100);\n  rotate(PI/2*int(random(4)));\n  let numPoints = 50;\n  let aryPoints = [];\n  aryPoints = setPoints(numPoints);\n\n  let aryTriangles = [];\n\n  aryTriangles = calcDelaunayDiagram(aryPoints);\n\n  for (let i = 0; i < aryTriangles.length; i++) {\n    aryTriangles[i].draw();\n  }\n}\n\nfunction calcDelaunayDiagram(aryPoints) { //return triangle array of Delaunay diagram\n  let aryTriangles = [];\n  let baseTriangle = getBaseTriangle(aryPoints);\n\n  aryTriangles[0] = baseTriangle;\n  let currentAryPoints = [];\n  currentAryPoints = [baseTriangle.xy1, baseTriangle.xy2, baseTriangle.xy3];\n  for (let i = 0; i < aryPoints.length; i++) {\n    let aryTrianglesLength = aryTriangles.length;\n    \n    let aryAddTriangles = [];\n    for (let j = aryTrianglesLength - 1; j >= 0; j--) {\n      if (checkPointInCircumcircle(aryTriangles[j], aryPoints[i]) == true) {\n        let triangel1 = new Triangle(aryPoints[i], aryTriangles[j].xy1, aryTriangles[j].xy2);\n        let triangel2 = new Triangle(aryPoints[i], aryTriangles[j].xy2, aryTriangles[j].xy3);\n        let triangel3 = new Triangle(aryPoints[i], aryTriangles[j].xy3, aryTriangles[j].xy1);\n        aryTriangles.splice(j, 1);\n        if (checkTriangleIncludePoints(triangel1, currentAryPoints) == true) {\n          triangel1.includePoint = true;\n        }\n        if (checkTriangleIncludePoints(triangel2, currentAryPoints) == true) {\n          triangel2.includePoint = true;\n        }\n        if (checkTriangleIncludePoints(triangel3, currentAryPoints) == true) {\n          triangel3.includePoint = true;\n        }\n\n        aryAddTriangles.push(triangel1);\n        aryAddTriangles.push(triangel2);\n        aryAddTriangles.push(triangel3);\n      }\n    }\n    aryAddTriangles = removeDuplicate(aryAddTriangles);\n\n    for (let i = 0; i < aryAddTriangles.length; i++) {\n      aryTriangles.push(aryAddTriangles[i]);\n    }\n\n    currentAryPoints.push(aryPoints[i]);\n  }\n\n  for (let i = aryTriangles.length - 1; i >= 0; i--) {\n    if (aryTriangles[i].includePoint == true ||\n      checkIncludeBasetriangle(baseTriangle, aryTriangles[i]) == true) {\n      aryTriangles.splice(i, 1);\n    }\n  }\n\n  return aryTriangles;\n}\n\nfunction removeDuplicate(aryTriangles) {\n  let newAryTriangles = aryTriangles;\n  for (let i = newAryTriangles.length-1; i >= 1; i--) {\n    for (let j = 0; j < i; j++) {\n      if (\n        p5.Vector.dist(newAryTriangles[i].xy1, newAryTriangles[j].xy1) < 0.001 &&\n        p5.Vector.dist(newAryTriangles[i].xy2, newAryTriangles[j].xy2) < 0.001 &&\n        p5.Vector.dist(newAryTriangles[i].xy3, newAryTriangles[j].xy3) < 0.001\n      ) {\n        newAryTriangles.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  return newAryTriangles;\n}\n\nfunction checkIncludeBasetriangle(baseTriangle, thisTriangle) {\n  let check = false;\n  if (\n    (p5.Vector.dist(baseTriangle.xy1, thisTriangle.xy1) < 0.1) ||\n    (p5.Vector.dist(baseTriangle.xy1, thisTriangle.xy2) < 0.1) ||\n    (p5.Vector.dist(baseTriangle.xy1, thisTriangle.xy3) < 0.1) ||\n    (p5.Vector.dist(baseTriangle.xy2, thisTriangle.xy1) < 0.1) ||\n    (p5.Vector.dist(baseTriangle.xy2, thisTriangle.xy2) < 0.1) ||\n    (p5.Vector.dist(baseTriangle.xy2, thisTriangle.xy3) < 0.1) ||\n    (p5.Vector.dist(baseTriangle.xy3, thisTriangle.xy1) < 0.1) ||\n    (p5.Vector.dist(baseTriangle.xy3, thisTriangle.xy2) < 0.1) ||\n    (p5.Vector.dist(baseTriangle.xy3, thisTriangle.xy3) < 0.1)\n   ) {\n    check = true;\n  }\n\n  return check;\n}\n\nfunction checkTriangleIncludePoints(thisTriangle, aryPoints) {\n  let inCircle = false;\n  for (let i = 0; i < aryPoints.length; i++) {\n    if (checkPointInCircumcircle(thisTriangle, aryPoints[i]) == true) {\n      inCircle = true;\n      break;\n    }\n  }\n\n  return inCircle;\n}\n\nfunction checkPointInCircumcircle(thisTriangle, point) {\n  let inCircle = false;\n  let distance = p5.Vector.dist(thisTriangle.xyCentCircle, point);\n  if (distance < thisTriangle.rCircle*0.999999) {  //*1 cannot calculate accurately\n    inCircle = true;\n  }\n\n  return inCircle;\n}\n\nfunction getBaseTriangle(aryPoints) { //a triangle including all points\n  let x = 4;\n  let baseXy1 = createVector(-width*x, -height*x);\n  let baseXy2 = createVector(width*x, -height*x);\n  let baseXy3 = createVector(0, height*x);\n\n  let baseTriangle = new Triangle(baseXy1, baseXy2, baseXy3);\n\n  return baseTriangle;\n}\n\nclass Triangle {\n  constructor(xy1, xy2, xy3) {\n    this.aryXy = [[xy1], [xy2], [xy3]];\n    this.sortAngle();\n\n    let circumcircle = calcCircumcircle(this.xy1, this.xy2, this.xy3);\n    this.xyCentCircle = circumcircle[0];\n    this.rCircle = circumcircle[1];\n    this.includePoint = false;\n  }\n\n  sortAngle() { //small angle to large angle\n    this.xyCent = calcCenter(this.aryXy[0][0], this.aryXy[1][0], this.aryXy[2][0]);\n    let xyCent_1 = p5.Vector.sub(this.aryXy[0][0], this.xyCent);\n    this.aryXy[0][1] = xyCent_1.heading();\n    let xyCent_2 = p5.Vector.sub(this.aryXy[1][0], this.xyCent);\n    this.aryXy[1][1] = xyCent_2.heading();\n    let xyCent_3 = p5.Vector.sub(this.aryXy[2][0], this.xyCent);\n    this.aryXy[2][1] = xyCent_3.heading();\n\n    this.aryXy.sort(function(a, b) {\n      return  a[1] - b[1];\n    })\n\n    this.xy1 = this.aryXy[0][0];\n    this.xy2 = this.aryXy[1][0];\n    this.xy3 = this.aryXy[2][0];\n  }\n\n  draw() {\n    let numLine = 80;\n    let ratio = 0.05;\n    let aryXy = [this.xy1, this.xy2, this.xy3];\n    shuffle(aryXy, true);\n    let xyRoot = aryXy[0];\n    let xy_a0 = aryXy[1];\n    let xy_b0 = aryXy[2];\n    stroke(color(\"#\"+random(_palette)));\n    for (let i = 0; i < numLine; i++) {\n      let xy_a = p5.Vector.lerp(xy_a0, xyRoot, ratio);\n      let xy_b = p5.Vector.lerp(xy_b0, xyRoot, ratio);\n      xy_a0 = xy_a;\n      xy_b0 = xy_b;\n      line(xy_a.x, xy_a.y, xy_b.x, xy_b.y);\n    }\n  }\n}\n\nfunction calcCircumcircle(xy1, xy2, xy3) { //[center vertor of circumcircle, radius of circumcircle]\n  //c = 2 { (x2 - x1)(y3 - y1) - (y2 - y1)(x3 - x1) }\n  //x = { (y3 - y1)(x2**2 - x1**2 + y2**2 - y1**2) + (y1 - y2)(x3**2 - x1**2 + y3**2 - y1**2) } / c\n  //y = { (x1 - x3)(x2**2 - x1**2 + y2**2 - y1**2) + (x2 - x1)(x3**2 - x1**2 + y3**2 - y1**2) } / c\n\n  let c = 2 * ((xy2.x - xy1.x) * (xy3.y - xy1.y) - (xy2.y - xy1.y) * (xy3.x - xy1.x));\n  let centx = ((xy3.y - xy1.y) * (xy2.x**2 - xy1.x**2 + xy2.y**2 - xy1.y**2) + (xy1.y - xy2.y) * (xy3.x**2 - xy1.x**2 + xy3.y**2 - xy1.y**2)) / c;\n  let centy = ((xy1.x - xy3.x) * (xy2.x**2 - xy1.x**2 + xy2.y**2 - xy1.y**2) + (xy2.x - xy1.x) * (xy3.x**2 - xy1.x**2 + xy3.y**2 - xy1.y**2)) / c;\n  let xyCent = createVector(centx, centy);\n  let r = p5.Vector.dist(xy1, xyCent);\n\n  return [xyCent, r];\n}\n\nfunction calcCenter(xy1, xy2, xy3) { // center vertor of triangle xy1 xy2 xy3\n  let xyMid23 = p5.Vector.lerp(xy2, xy3, 0.5);\n  let xyMid31 = p5.Vector.lerp(xy3, xy1, 0.5);\n  let xyCent = calculateCross(xy1, xyMid23, xy2, xyMid31);\n\n  return xyCent;\n}\n\nfunction calculateCross(xy1, xy2, xy3, xy4) {\n  //ax+by+c=0\n  let a1 = xy1.y - xy2.y;\n  let b1 = xy2.x - xy1.x;\n  let c1 = xy1.x * xy2.y - xy2.x * xy1.y;\n  let a2 = xy3.y - xy4.y;\n  let b2 = xy4.x - xy3.x;\n  let c2 = xy3.x * xy4.y - xy4.x * xy3.y;\n  //cross point of line xy1-2 and line xy3-4\n  let xcross = (b1*c2 - b2*c1) / (a1*b2 - a2*b1);\n  let ycross = (a2*c1 - a1*c2) / (a1*b2 - a2*b1);\n  let cross = createVector(xcross, ycross);\n\n  return cross;\n}\n\nfunction setPoints(numPoints) {\n  let aryPoints = [];\n  for (let i = 0; i < numPoints; i++) {\n    let theta = random(2*PI);\n    let r = _minWidth/2 * random(0, 1.1);\n    aryPoints[i] = createVector(r * cos(theta), r * sin(theta));\n  }\n\n  let x = 1.5;\n  aryPoints.push(createVector(-_maxWidth/x, -_maxWidth/x));\n  aryPoints.push(createVector(_maxWidth/x, -_maxWidth/x));\n  aryPoints.push(createVector(_maxWidth/x, _maxWidth/x));\n  aryPoints.push(createVector(-_maxWidth/x, _maxWidth/x));\n\n  return aryPoints;\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Eric Ly"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "// a4 : 210 x 297 mm / (210 / 2.54) x (297 / 2.54) inch\n\nlet imgs = [];\nlet img_num = 15;\nlet scl = 10;\nlet w, h;\nlet offset, margin;\nlet ratio = 0.25;\nlet graphics;\n\np5.disableFriendlyErrors = false;\n\nfunction preload() {\n\tw = int(210 / 2.54 * 72 / scl);\n\th = int(297 / 2.54 * 72 / scl);\n\tfor (let i = 0; i < img_num; i++) {\n\t\tlet img = loadImage(\"https://loremflickr.com/\" + w + \"/\" + h + \"/people/?random=\" + i,\n\t\t\tfunction() {\n\t\t\t\timgs.push(img);\n\t\t\t});\n\t}\n}\n\n\nfunction setup() {\n\tcreateCanvas(w, h);\n\tcolorMode(HSB, 360, 100, 100, 100);\n\tangleMode(DEGREES);\n\n\tgraphics = createGraphics(width, height);\n\tgraphics.colorMode(HSB, 360, 100, 100, 100);\n\tgraphics.angleMode(DEGREES);\n\n\toffset = width / 25;\n\tmargin = offset / 1.5;\n}\n\nfunction draw() {\n\tbackground(0, 0, 95);\n\n\tgraphics.clear();\n\tlet ySep = int(random(1, 6));\n\tlet yRowHeight = (height - offset * 2 - margin * (ySep - 1));\n\tlet ySepArr = [];\n\tlet ySepSum = 0;\n\tfor (let i = 0; i < ySep; i++) {\n\t\tlet value = random([1, 5]);\n\t\tySepArr.push(value);\n\t\tySepSum += value;\n\t}\n\tfor (let i = 0; i < ySep; i++) {\n\t\tySepArr[i] /= ySepSum;\n\t}\n\tySepSum = 0;\n\n\tfor (let i = 0; i < ySepArr.length; i++) {\n\t\tlet y = offset + ySepSum * yRowHeight + i * margin;\n\t\tlet h = max(int(ySepArr[i] * yRowHeight), 1);\n\n\t\tlet xSep = int(random(1, 6));\n\t\tlet xColWidth = (width - offset * 2 - margin * (xSep - 1));\n\t\tlet xSepArr = [];\n\t\tlet xSepSum = 0;\n\t\tfor (let i = 0; i < xSep; i++) {\n\t\t\tlet value = random(1);\n\t\t\txSepArr.push(value);\n\t\t\txSepSum += value;\n\t\t}\n\t\tfor (let i = 0; i < xSep; i++) {\n\t\t\txSepArr[i] /= xSepSum;\n\t\t}\n\t\txSepSum = 0;\n\n\t\tfor (let j = 0; j < xSepArr.length; j++) {\n\t\t\tlet x = offset + xSepSum * xColWidth + j * margin;\n\t\t\tlet w = max(int(xSepArr[j] * xColWidth), 1);\n\t\t\tlet img = random(imgs);\n\t\t\tlet img_trim = img.get(random(img.width - w),\n\t\t\t\trandom(img.height - h),\n\t\t\t\tw, h);\n\t\t\tif (min(w, h) > 0) {\n\t\t\t\tstrokeWeight(5);\n\t\t\t\trect(x, y, w, h);\n\t\t\t\tgraphics.image(img_trim, x, y, w, h);\n\t\t\t}\n\t\t\txSepSum += xSepArr[j];\n\t\t}\n\t\tySepSum += ySepArr[i];\n\t}\n\tgraphics.filter(THRESHOLD, random(ratio, 1 - ratio));\n\tpush();\n\timage(graphics, 0, 0);\n\tpop();\n\n\t// noLoop();\n\tframeRate(.5);\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "let img;\nlet palette;\nlet imgTop;\nlet imgBottom;\n\nlet url = [\n  \"https://coolors.co/264653-2a9d8f-e9c46a-f4a261-e76f51\",\n  \"https://coolors.co/e63946-f1faee-a8dadc-457b9d-1d3557\",\n  \"https://coolors.co/ef476f-ffd166-06d6a0-118ab2-073b4c\",\n  \"https://coolors.co/ffbe0b-fb5607-ff006e-8338ec-3a86ff\",\n  \"https://coolors.co/000000-14213d-fca311-e5e5e5-ffffff\",\n];\n\nfunction setup() {\n  createCanvas(800, 800);\n  angleMode(DEGREES);\n\n  palette = shuffle(createPalette(random(url)));\n\n\n}\n\nfunction draw() {\n  background(220);\n  randomSeed(0);\n  img = createGraphics(width / 2, height / 2);\n  img.angleMode(DEGREES);\n  \n  img.clear();\n  let clock = new Clock(\n    img.width / 2,\n    img.height / 2,\n    img.width / 1.2,\n    0,\n    0,\n    0,\n    palette,\n    img\n  );\n\n  clock.display();\n  \n  imgTop = img.get(0, 0, img.width, img.height / 2);\n  imgBottom = img.get(0, img.height / 2, img.width, img.height / 2);\n  image(imgBottom, 300, 500);  \n  \n  push();\n  translate(100, 100 + imgTop.height);\n  for (let x = 0; x < 0 + img.width; x += 5) {\n    let c = img.get(x, img.height / 2);\n    let p1 = createVector(x, 0);\n    let p2 = createVector(x + 200, 200);\n    let angle = atan2(p2.y - p1.y, p2.x - p1.x);\n    let d = p5.Vector.dist(p1, p2);\n    let angleStep = 360 / d;\n    push();\n    translate(p1.x, p1.y);\n    rotate(angle);\n    stroke(c);\n    strokeCap(PROJECT);\n    strokeWeight(5.1);\n    noFill();\n    beginShape();\n    vertex(0, 0);\n    for (n = 0; n <= d; n += 5) {\n      let y =\n        sin(angleStep * (-frameCount + n) * 2) *\n        cos(angleStep * (frameCount + n)) *\n      100;\n\t\t\ty = constrain(y,0,200);\n      vertex(n, y);\n    }\n    vertex(d, 0);\n    endShape();\n    pop();\n  }\n  pop();\n  image(imgTop, 100, 100);  \n  img.remove();\n\n}\nclass Clock {\n  constructor(x, y, d, h, m, s, colors, g = this) {\n    this.g = g;\n    this.x = x;\n    this.y = y;\n    this.d = d;\n    this.hOffset = h;\n    this.mOffset = m;\n    this.sOffset = s;\n    this.h = hour();\n    this.m = minute();\n    this.s = second();\n    this.str =\n      random(100) > 50\n        ? [\"\u2160\", \"\u2161\", \"\u2162\", \"\u2163\", \"\u2164\", \"\u2165\", \"\u2166\", \"\u2167\", \"\u2168\", \"\u2169\", \"\u216a\", \"\u216b\"]\n        : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n    this.font = random(100) > 50 ? \"serif\" : \"san-serif\";\n    this.cap = random(100) > 50 ? ROUND : SQUARE;\n    this.colors = colors;\n  }\n  update() {\n    this.h = hour();\n    this.m = minute();\n    this.s = second();\n  }\n\n  display() {\n    let sf = (this.s + this.sOffset) % 60;\n    let mf = (this.m + this.mOffset + sf / 60) % 60;\n    let hf = (this.h + this.hOffset + mf / 60) % 12;\n\n    let ha = map(hf, 0, 12, 0 - 90, 360 - 90);\n    let ma = map(mf, 0, 60, 0 - 90, 360 - 90);\n    let sa = map(sf, 0, 60, 0 - 90, 360 - 90);\n\n    this.g.push();\n    this.g.translate(this.x, this.y);\n    this.g.scale((this.d - 10) / this.d);\n    this.g.fill(this.colors[0]);\n    this.g.noStroke();\n    this.g.push();\n    let c = color(this.colors[0]);\n    c.setAlpha(50);\n    this.g.drawingContext.shadowColor = c;\n    this.g.drawingContext.shadowBlur = this.d / 20;\n    this.g.drawingContext.shadowOffsetX = this.d / 20 / 2;\n    this.g.drawingContext.shadowOffsetY = this.d / 20 / 2;\n    this.g.circle(0, 0, this.d);\n    this.g.pop();\n    this.g.scale((this.d - this.d / 15) / this.d);\n    this.g.strokeWeight(this.d / (this.d - this.d / 30));\n    this.g.fill(this.colors[1]);\n    this.g.noStroke();\n    this.g.circle(0, 0, this.d);\n\n    this.g.drawingContext.shadowColor = color(0, 0, 0, 50);\n    this.g.drawingContext.shadowBlur = this.d / 40;\n\n    this.drawMeasure(0, 0, this.d);\n\n    this.g.stroke(this.colors[3]);\n    this.g.strokeCap(this.cap);\n\n    this.g.push();\n    this.g.rotate(ha);\n    this.g.strokeWeight(this.d / 20);\n    this.g.line(0, 0, this.d / 3.5, 0);\n    this.g.pop();\n\n    this.g.push();\n    this.g.rotate(ma);\n    this.g.strokeWeight(this.d / 30);\n    this.g.line(0, 0, this.d / 2.5, 0);\n    this.g.pop();\n\n    this.g.push();\n    this.g.rotate(sa);\n    this.g.strokeWeight(this.d / 50);\n    this.g.line(0, 0, this.d / 2.3, 0);\n    this.g.pop();\n\n    this.g.fill(0, 0, 0);\n    this.g.circle(0, 0, this.d / 15);\n\n    this.g.pop();\n  }\n\n  drawMeasure() {\n    this.g.push();\n    let n = 11;\n    for (let angle = -90; angle < -90 + 360; angle += 360 / 60) {\n      let nx1 = cos(angle) * (this.d / 2 - this.d / 40);\n      let ny1 = sin(angle) * (this.d / 2 - this.d / 40);\n      let nx2 = cos(angle) * (this.d / 2 - this.d / 20);\n      let ny2 = sin(angle) * (this.d / 2 - this.d / 20);\n      let nx3, ny3;\n      if (angle % 30 == 0) {\n        this.g.strokeWeight(this.d / 80);\n        nx3 = cos(angle) * (this.d / 2 - this.d / 8);\n        ny3 = sin(angle) * (this.d / 2 - this.d / 8);\n        this.g.push();\n        this.g.translate(nx3, ny3);\n        this.g.textSize(this.d / 10);\n        this.g.textAlign(CENTER, CENTER);\n        this.g.textFont(this.font);\n        this.g.textStyle(BOLD);\n        this.g.fill(this.colors[2]);\n        this.g.noStroke();\n        this.g.text(this.str[n], 0, 0);\n        n = (n + 1) % 12;\n        this.g.pop();\n      } else {\n        nx2 = cos(angle) * (this.d / 2 - this.d / 30);\n        ny2 = sin(angle) * (this.d / 2 - this.d / 30);\n        this.g.strokeWeight(this.d / 150);\n      }\n      this.g.stroke(this.colors[2]);\n      this.g.line(nx1, ny1, nx2, ny2);\n    }\n    this.g.pop();\n  }\n}\n\nfunction createPalette(_url) {\n  let slash_index = _url.lastIndexOf(\"/\");\n  let pallate_str = _url.slice(slash_index + 1);\n  let arr = pallate_str.split(\"-\");\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = color(\"#\" + arr[i]);\n  }\n  return arr;\n}\n",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by reona396\n\n### Response:\n",
    "completion": "function setup() {\n\tcreateCanvas(963, 633);\n\tangleMode(DEGREES);\n\tnoLoop();\n}\n\nfunction draw() {\n\tbackground(\"#554478\");\n\n\tpush();\n\ttranslate(width / 2, height * 0.75);\n\n\tstrokeWeight(10);\n\tfill(\"#332F3A\");\n\tstroke(\"#3979C0\");\n\n\tlet S = 200;\n\tlet gradient = drawingContext.createLinearGradient(-S, -S, S, -S);\n\n\tgradient.addColorStop(0.0, color(\"#3979C0\"));\n\tgradient.addColorStop(1.0, color(\"#332F3A\"));\n\n\tdrawingContext.fillStyle = gradient;\n\n\t// \u4e2d\u592e\u4e0a\n\tdrawDrop(0, -20, -90, 320, 2);\n\n\t// \u5965\n\tdrawDrop(0, 0, -90 + 80, 350, 4);\n\tdrawDrop(0, 0, -90 - 80, 350, 4);\n\n\t// \u306a\u306a\u3081\n\tdrawDrop(0, 0, -90 + 60, 350, 3.5);\n\tdrawDrop(0, 0, -90 - 60, 350, 3.5);\n\n\t//\u4e2d\u592e\u30b5\u30a4\u30c9\n\tdrawDrop(0, 0, -90 + 30, 350, 3.5);\n\tdrawDrop(0, 0, -90 - 30, 350, 3.5);\n\n\t// \u4e2d\u592e\u4e0b\n\tdrawDrop(0, 30, -90, 280, 3);\n\n\tpop();\n}\n\nfunction drawDrop(x, y, t, r, A) {\n\tpush();\n\ttranslate(x, y);\n\trotate(t);\n\tbeginShape();\n\tfor (let theta = 0; theta < 360; theta++) {\n\t\tlet R = r / (A * sin(theta / 2) + 1);\n\t\tvertex(R * cos(theta), R * sin(theta));\n\t}\n\tendShape(CLOSE);\n\tpop();\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by reona396"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by SamuelYAN\n\n### Response:\n",
    "completion": "// by SamuelYAN\n// more works //\n   // https://twitter.com/SamuelAnn0924\n   // https://www.instagram.com/samuel_yan_1990/\n\nvar seed = Math.random() * 1000;\nvar a = 2,\n\tb = 3;\nvar th = 0,\n\tseg = 0.01;\nvar r;\nvar mySize;\nlet colors1 = \"e5463e-ef6a5b-bc3c34-1f6f36-498655-1e5c2e-416fd2-6b85da-3a5cac\".split(\"-\").map((a) => \"#\" + a + 40);\nlet colors2 = \"e183ce-e4d4ad-55e597-728581-f94f2e-6e467f-5a73d8-77d831-a2745d\".split(\"-\").map((a) => \"#\" + a + 80);\nlet colors3 = \"ff499e-d264b6-a480cf-779be7-49b6ff-49ffd4-f080d2-a3c48b-ccc792\".split(\"-\").map((a) => \"#\" + a + 40);\nlet colors4 = \"547cff-49a181-7691f9-d6e6e9-3e1b9f-de958c-3e8953-af5046-3d43ae\".split(\"-\").map((a) => \"#\" + a + 80);\nlet colorbg = \"e9ebfb\".split(\"-\").map((a) => \"#\" + a);\nlet colorbg2 = \"e9ebfb80\".split(\"-\").map((a) => \"#\" + a);\n\nfunction setup() {\n\t// frameRate(25);\n\tmySize = min(windowWidth, windowHeight);\n\tcreateCanvas(windowWidth, windowHeight);\n\tcolorMode(HSB, 360, 100, 100, 100);\n\t//pixelDensity(5);\n\tr = mySize / 2;\n\tbackground(colorbg);\n\tlet filter = new makeFilter();\n}\n\nfunction draw() {\n\trandomSeed(seed);\n\t// background(colorbg2);\n\tnoFill();\n\t// for (let i = 0; i < 2; i++) {\n\tpush();\n\ttranslate(\n\t\twidth / 2,\n\t\theight / 2\n\t);\n\t// line(\n\t//   r * cos(a * th),\n\t//   r * sin(b * th),\n\t//   r * cos(a * (th + seg)),\n\t//   r * sin(b * (th + seg))\n\t// );\n\tfor (let i = 0; i < 100; i += random(1)) {\n\t\trotate(random(TAU));\n\t\tstroke(random(random([colors3])));\n\t\tstrokeWeight(random(10));\n\t\tcircle(r * cos(a * th), r * sin(b * th), i * 10);\n\t}\n\n\tpop();\n\t// }\n\tth += seg;\n\timage(overAllTexture, 0, 0);\n}\n\nfunction makeFilter() {\n\trandomSeed(seed);\n\t// noise\u306e\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u3064\u304f\u308b\n\tcolorMode(HSB, 360, 100, 100, 100);\n\tdrawingContext.shadowColor = color(0, 0, 5, 10);\n\toverAllTexture = createGraphics(windowWidth, windowHeight);\n\toverAllTexture.loadPixels();\n\tfor (var i = 0; i < width; i++) {\n\t\tfor (var j = 0; j < height; j++) {\n\t\t\toverAllTexture.set(\n\t\t\t\ti,\n\t\t\t\tj,\n\t\t\t\tcolor(200, 10, 70, noise(i / 3, j / 3, (i * j) / 50) * random(1, 15))\n\t\t\t);\n\t\t}\n\t}\n\toverAllTexture.updatePixels();\n}\n\nfunction keyTyped() {\n  if (key === \"s\" || key === \"S\") {\n    //noLoop();\n    saveCanvas(\"Kaleidoscope_beta_1.0\", \"png\");\n  }\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by SamuelYAN"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "let ddd;\nlet palette = [];\nlet graphics;\nlet colors;\n\nfunction setup() {\n  createCanvas(800, 800);\n  colorMode(HSB, 360, 100, 100, 100);\n  angleMode(DEGREES);\n\n   while (palette.length < 5) {\n    palette = random(MetPalettes).colors.concat();\n  }\n  graphics = createGraphics(width, height);\n  graphics.colorMode(HSB, 360, 100, 100, 100);\n  graphics.noStroke();\n  for (let i = 0; i < (width * height * 8) / 100; i++) {\n    let x = random(width);\n    let y = random(height);\n    let w = random(3);\n    let h = random(3);\n    random(100) > 50 ? graphics.fill(0, 0, 100, 15) : graphics.fill(0, 0, 100, 15/2);\n    graphics.ellipse(x, y, w, h);\n  }\n}\n\nfunction draw() {\n  background(0,0,0);\n  blendMode(ADD);\n  let offset = 0;width / 15;\n  let margin = 0; //offset / 10;\n  let num = int(random(1, 5)) * 10;\n  ddd = (width - offset * 2 - margin * (num - 1)) / num;\n  for (let i = 0; i < num; i++) {\n    let y = offset + i * (ddd + margin) + ddd / 2;\n    lineRect(offset, y, width - offset, y, ddd/random(2));\n    lineRect(offset, y, width - offset, y, ddd/2);\n  }\n  image(graphics, 0, 0);\n  noLoop();\n  frameRate(0.5);\n}\n\nfunction lineRect(x1, y1, x2, y2, minD) {\n  let d = dist(x1, y1, x2, y2);\n  let angle = atan2(y2 - y1, x2 - x1);\n  push();\n  translate(x1, y1);\n  rotate(angle);\n  let n = 0;\n  let dd = 0;\n\n  while (dd < d) {\n    push();\n    let ddPlus = d / int(random(random()) * 1000);\n    if (dd + ddPlus > d) ddPlus = d - dd;\n    let ax = dd + ddPlus / 2;\n    let isFill = random(100) > 50 ? true : false;\n    let cols = shuffle(palette.concat());\n    let c1 = color(cols[0]);\n    let c2 = color(cols[1]);\n    c1.setAlpha(0);\n    c2.setAlpha(100);\n    let gradient = drawingContext.createLinearGradient(ax-ddPlus/2,0,ax+ddPlus/2,0);\n    gradient.addColorStop(1,c1);\n    gradient.addColorStop(0,c2);  \n    drawingContext.shadowColor = color(0,0,0,20);\n    drawingContext.shadowBlur= minD/10;\n    drawingContext.shadowOffsetX= minD/20;\n    drawingContext.shadowOffsetY= minD/20;\n    if (isFill) {\n      drawingContext.fillStyle = gradient;\n      noStroke();\n    } else {\n      drawingContext.strokeStyle = gradient;\n      strokeWeight(1);\n      strokeCap(SQUARE);\n      noFill();\n    }\n    if (n % 2 == 0) {\n      beginShape();\n      vertex(ax - ddPlus / 2, 0);\n      vertex(ax - ddPlus / 2, min(minD, ddPlus / 2));\n      // vertex(ax + ddPlus / 2, min(ddd/8,ddPlus / 2));\n      vertex(ax + ddPlus / 2, 0);\n      endShape();\n    } else {\n      beginShape();\n      vertex(ax - ddPlus / 2, 0);\n      // vertex(ax - ddPlus / 2, -min(d/4,ddPlus / 2));\n      vertex(ax + ddPlus / 2, -min(minD, ddPlus / 2));\n      vertex(ax + ddPlus / 2, 0);\n      endShape();\n    }\n    n++;\n    dd += ddPlus;\n    pop();\n  }\n  pop();\n}\n\n\nMetPalettes = [\n  {\n    name: \"Austria\",\n    colors: [\n      \"#a40000\",\n      \"#16317d\",\n      \"#007e2f\",\n      \"#ffcd12\",\n      \"#b86092\",\n      \"#721b3e\",\n      \"#00b7a7\",\n    ],\n    order: [1, 2, 3, 4, 6, 5, 7],\n  },\n  {\n    name: \"Cassatt\",\n    colors: [\n      \"#b1615c\",\n      \"#d88782\",\n      \"#e3aba7\",\n      \"#edd7d9\",\n      \"#c9c9dd\",\n      \"#9d9dc7\",\n      \"#8282aa\",\n      \"#5a5a83\",\n    ],\n    order: [3, 6, 1, 8, 4, 5, 2, 7],\n  },\n  {\n    name: \"Cross\",\n    colors: [\n      \"#c969a1\",\n      \"#ce4441\",\n      \"#ee8577\",\n      \"#eb7926\",\n      \"#ffbb44\",\n      \"#859b6c\",\n      \"#62929a\",\n      \"#004f63\",\n      \"#122451\",\n    ],\n    order: [4, 7, 1, 8, 2, 6, 3, 5, 9],\n  },\n  {\n    name: \"Degas\",\n    colors: [\n      \"#591d06\",\n      \"#96410e\",\n      \"#e5a335\",\n      \"#556219\",\n      \"#418979\",\n      \"#2b614e\",\n      \"#053c29\",\n    ],\n    order: [5, 2, 4, 3, 7, 1, 6],\n  },\n  {\n    name: \"Egypt\",\n    colors: [\"#dd5129\", \"#0f7ba2\", \"#43b284\", \"#fab255\"],\n    order: [1, 2, 3, 4],\n  },\n  {\n    name: \"Gauguin\",\n    colors: [\"#b04948\", \"#811e18\", \"#9e4013\", \"#c88a2c\", \"#4c6216\", \"#1a472a\"],\n    order: [2, 5, 4, 3, 1, 6],\n  },\n  {\n    name: \"Greek\",\n    colors: [\"#3c0d03\", \"#8d1c06\", \"#e67424\", \"#ed9b49\", \"#f5c34d\"],\n    order: [2, 3, 5, 1, 4],\n  },\n  {\n    name: \"Hokusai\",\n    colors: [\n      \"#6d2f20\",\n      \"#b75347\",\n      \"#df7e66\",\n      \"#e09351\",\n      \"#edc775\",\n      \"#94b594\",\n      \"#224b5e\",\n    ],\n    order: [2, 7, 4, 6, 5, 1, 3],\n  },\n  {\n    name: \"Ingres\",\n    colors: [\n      \"#041d2c\",\n      \"#06314e\",\n      \"#18527e\",\n      \"#2e77ab\",\n      \"#d1b252\",\n      \"#a97f2f\",\n      \"#7e5522\",\n      \"#472c0b\",\n    ],\n    order: [4, 5, 3, 6, 2, 7, 1, 8],\n  },\n  {\n    name: \"Isfahan1\",\n    colors: [\n      \"#4e3910\",\n      \"#845d29\",\n      \"#d8c29d\",\n      \"#4fb6ca\",\n      \"#178f92\",\n      \"#175f5d\",\n      \"#1d1f54\",\n    ],\n    order: [5, 2, 4, 6, 3, 7, 1],\n  },\n  {\n    name: \"Isfahan2\",\n    colors: [\"#d7aca1\", \"#ddc000\", \"#79ad41\", \"#34b6c6\", \"#4063a3\"],\n    order: [4, 2, 3, 5, 1],\n  },\n  {\n    name: \"Juarez\",\n    colors: [\"#a82203\", \"#208cc0\", \"#f1af3a\", \"#cf5e4e\", \"#637b31\", \"#003967\"],\n    order: [1, 2, 3, 4, 5, 6],\n  },\n  {\n    name: \"Klimt\",\n    colors: [\"#df9ed4\", \"#c93f55\", \"#eacc62\", \"#469d76\", \"#3c4b99\", \"#924099\"],\n    order: [5, 2, 3, 4, 6, 1],\n  },\n  {\n    name: \"Manet\",\n    colors: [\n      \"#3b2319\",\n      \"#80521c\",\n      \"#d29c44\",\n      \"#ebc174\",\n      \"#ede2cc\",\n      \"#7ec5f4\",\n      \"#4585b7\",\n      \"#225e92\",\n      \"#183571\",\n      \"#43429b\",\n      \"#5e65be\",\n    ],\n    order: [8, 3, 10, 4, 7, 9, 11, 2, 6, 1, 5],\n  },\n  {\n    name: \"Monet\",\n    colors: [\n      \"#4e6d58\",\n      \"#749e89\",\n      \"#abccbe\",\n      \"#e3cacf\",\n      \"#c399a2\",\n      \"#9f6e71\",\n      \"#41507b\",\n      \"#7d87b2\",\n      \"#c2cae3\",\n    ],\n    order: [2, 5, 8, 3, 4, 9, 1, 6, 7],\n  },\n  {\n    name: \"Moreau\",\n    colors: [\n      \"#421600\",\n      \"#792504\",\n      \"#bc7524\",\n      \"#8dadca\",\n      \"#527baa\",\n      \"#104839\",\n      \"#082844\",\n    ],\n    order: [2, 5, 3, 4, 7, 1, 6],\n  },\n  {\n    name: \"Morgenstern\",\n    colors: [\n      \"#7c668c\",\n      \"#b08ba5\",\n      \"#dfbbc8\",\n      \"#ffc680\",\n      \"#ffb178\",\n      \"#db8872\",\n      \"#a56457\",\n    ],\n    order: [6, 5, 4, 7, 3, 2, 1],\n  },\n  {\n    name: \"Nattier\",\n    colors: [\n      \"#52271c\",\n      \"#944839\",\n      \"#c08e39\",\n      \"#7f793c\",\n      \"#565c33\",\n      \"#184948\",\n      \"#022a2a\",\n    ],\n    order: [1, 6, 5, 2, 3, 4, 7],\n  },\n  {\n    name: \"NewKingdom\",\n    colors: [\"#e1846c\", \"#9eb4e0\", \"#e6bb9e\", \"#9c6849\", \"#735852\"],\n    order: [2, 1, 3, 4, 5],\n  },\n  {\n    name: \"Pillement\",\n    colors: [\"#a9845b\", \"#697852\", \"#738e8e\", \"#44636f\", \"#2b4655\", \"#0f252f\"],\n    order: [4, 3, 2, 5, 1, 6],\n  },\n  {\n    name: \"Pissaro\",\n    colors: [\n      \"#134130\",\n      \"#4c825d\",\n      \"#8cae9e\",\n      \"#8dc7dc\",\n      \"#508ca7\",\n      \"#1a5270\",\n      \"#0e2a4d\",\n    ],\n    order: [5, 2, 3, 6, 4, 7, 1],\n  },\n  {\n    name: \"Redon\",\n    colors: [\n      \"#5b859e\",\n      \"#1e395f\",\n      \"#75884b\",\n      \"#1e5a46\",\n      \"#df8d71\",\n      \"#af4f2f\",\n      \"#d48f90\",\n      \"#732f30\",\n      \"#ab84a5\",\n      \"#59385c\",\n      \"#d8b847\",\n      \"#b38711\",\n    ],\n    order: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n  },\n  {\n    name: \"Renoir\",\n    colors: [\n      \"#17154f\",\n      \"#2f357c\",\n      \"#6c5d9e\",\n      \"#9d9cd5\",\n      \"#b0799a\",\n      \"#f6b3b0\",\n      \"#e48171\",\n      \"#bf3729\",\n      \"#e69b00\",\n      \"#f5bb50\",\n      \"#ada43b\",\n      \"#355828\",\n    ],\n    order: [2, 5, 9, 12, 3, 8, 7, 10, 4, 1, 6, 11],\n  },\n  {\n    name: \"Robert\",\n    colors: [\"#11341a\", \"#375624\", \"#6ca4a0\", \"#487a7c\", \"#18505f\", \"#062e3d\"],\n    order: [3, 2, 4, 5, 1, 6],\n  },\n  {\n    name: \"Stevens\",\n    colors: [\"#042e4e\", \"#307d7f\", \"#598c4c\", \"#ba5c3f\", \"#a13213\", \"#470c00\"],\n    order: [4, 2, 3, 5, 1, 6],\n  },\n  {\n    name: \"Tara\",\n    colors: [\"#eab1c6\", \"#d35e17\", \"#e18a1f\", \"#e9b109\", \"#829d44\"],\n    order: [1, 3, 2, 5, 4],\n  },\n  {\n    name: \"Thomas\",\n    colors: [\n      \"#b24422\",\n      \"#c44d76\",\n      \"#4457a5\",\n      \"#13315f\",\n      \"#b1a1cc\",\n      \"#59386c\",\n      \"#447861\",\n      \"#7caf5c\",\n    ],\n    order: [3, 2, 8, 6, 1, 4, 7, 5],\n  },\n  {\n    name: \"Tiepolo\",\n    colors: [\n      \"#802417\",\n      \"#c06636\",\n      \"#ce9344\",\n      \"#e8b960\",\n      \"#646e3b\",\n      \"#2b5851\",\n      \"#508ea2\",\n      \"#17486f\",\n    ],\n    order: [1, 2, 8, 6, 3, 5, 7, 4],\n  },\n  {\n    name: \"Troy\",\n    colors: [\n      \"#421401\",\n      \"#6c1d0e\",\n      \"#8b3a2b\",\n      \"#c27668\",\n      \"#7ba0b4\",\n      \"#44728c\",\n      \"#235070\",\n      \"#0a2d46\",\n    ],\n    order: [2, 7, 4, 5, 1, 8, 3, 6],\n  },\n  {\n    name: \"VanGogh1\",\n    colors: [\n      \"#2c2d54\",\n      \"#434475\",\n      \"#6b6ca3\",\n      \"#969bc7\",\n      \"#87bcbd\",\n      \"#89ab7c\",\n      \"#6f9954\",\n    ],\n    order: [3, 5, 7, 4, 6, 2, 1],\n  },\n  {\n    name: \"VanGogh2\",\n    colors: [\n      \"#bd3106\",\n      \"#d9700e\",\n      \"#e9a00e\",\n      \"#eebe04\",\n      \"#5b7314\",\n      \"#c3d6ce\",\n      \"#89a6bb\",\n      \"#454b87\",\n    ],\n    order: [1, 5, 8, 2, 7, 4, 6, 3],\n  },\n  {\n    name: \"Veronese\",\n    colors: [\n      \"#67322e\",\n      \"#99610a\",\n      \"#c38f16\",\n      \"#6e948c\",\n      \"#2c6b67\",\n      \"#175449\",\n      \"#122c43\",\n    ],\n    order: [5, 1, 7, 2, 3, 6, 4],\n  },\n  {\n    name: \"Wissing\",\n    colors: [\"#4b1d0d\", \"#7c291e\", \"#ba7233\", \"#3a4421\", \"#2d5380\"],\n    order: [2, 3, 5, 4, 1],\n  },\n];",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "let offset, w;\nlet d = 250;\nlet t = 0;\nlet n = 0;\nlet url = \"https://coolors.co/f4f1de-e07a5f-3d405b-81b29a-f2cc8f\";\nlet palette;\n\n\nfunction setup() {\n  createCanvas(800, 800);\n  colorMode(HSB, 360, 100, 100, 100);\n  angleMode(DEGREES);\n  offset = width / 10;\n  w = sqrt(sq(width + offset) + sq(height + offset));\n  palette = createPalette(url);\n}\n\nfunction draw() {\n  background(0, 0, 90);\n  randomSeed(t);\n  let u = t;\n  let s = t;\n  push();\n  translate(width / 2, height / 2);\n  rotate(-45);\n  translate(-w / 2, -w / 2);\n  let deltaTime = 1.0 / 120.0;\n  let k = 8.0;\n  n = lerp(d, n, exp(-k * deltaTime));\n\n  noStroke();\n  drawingContext.shadowColor = color(0, 0, 0, 25);\n\n  for (let y = 0; y < w; y += d + offset / 2) {\n    for (let x = n; x < w + n; x += d) {\n      let m = abs(palette.length + u) % palette.length;\n      for (let i = palette.length - 1; i > 0; i--) {\n        fill(palette[(m + i) % palette.length]);\n        let dd = d * i / palette.length;\n        arc(x + d / 2, y + d / 2, dd, dd, 0, 180);\n      }\n      u--;\n    }\n    for (let x = -n + d / 2; x < -n + w + d / 2; x += d) {\n      let m = s % palette.length;\n      for (let i = palette.length - 1; i > 0; i--) {\n        fill(palette[(m + i) % palette.length]);\n        let dd = d * i / palette.length;\n        drawingContext.shadowBlur = dd / 4;\n        arc(x + d / 2, y + d / 2, dd, dd, 180, 360);\n      }\n      s++;\n    }\n  }\n  pop();\n\n  if (abs(d - n) < 1) {\n    n = 0;\n    t++;\n  }\n}\n\nfunction createPalette(_url) {\n  let slash_index = _url.lastIndexOf('/');\n  let pallate_str = _url.slice(slash_index + 1);\n  let arr = pallate_str.split('-');\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = '#' + arr[i];\n  }\n  return arr;\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by sayo, with tags genuary,genuary2022\n\n### Response:\n",
    "completion": "const step = 0.002;\nconst a = 160;\nconst s = 60;\nconst division = 5;\n\nconst palettes = [\n\t\"2274a5-e7eb90-fadf63\",\n\t\"dd7373-3b3561-ead94c\",\n\t\"e6c229-f17105-d11149\",\n\t\"91c4f2-8ca0d7-9d79bc\",\n\t\"f79256-fbd1a2-7dcfb6\",\n\t\"d64045-e9fff9-9ed8db\",\n\t\"e9d985-b2bd7e-749c75\",\n\t\"052f5f-005377-06a77d\"\n];\n\nlet palette;\nlet t = 0;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\t\n\tpalette = random(palettes).split(\"-\");\n\tfor (let i = 0; i < palette.length; i++) {\n\t\tpalette[i] = color(\"#\" + palette[i]);\n\t}\n}\n\nfunction draw() {\n\tbackground(240);\n\tnoStroke();\n\t\n\tfor (let i = -1; i < height / (s * 3 / 2) + 2; i++) {\n\t\tconst y0 = i * s * 3 / 2;\n    for (let j = -1; j < width / (s * sqrt(3.0)) + 2; j++) {\n\t\t\tconst x0 = (j - (i % 2) * 0.5) * s * sqrt(3.0);\n\t\t\tfill(palette[(3 + (i % 2) + j) % 3]);\n\t\t\tbeginShape();\n      for (let k = 0; k < 6 * division; k++) {\n\t\t\t\tconst theta = TWO_PI * k / (6 * division) + PI / 6;\n\t\t\t\tconst r = sin(PI / 3) / sin(2 / 3 * PI - abs(PI / 6 - theta % (PI / 3))) * s;\n\t\t\t\tconst x = x0 + r * cos(theta);\n\t\t\t\tconst y = y0 + r * sin(theta);\n\t\t\t\tconst value = noise(x * step, y * step, t);\n        vertex(x + a * value * cos(value * TWO_PI), y + a * value * sin(value * TWO_PI));\n\t\t\t}\n\t\t\tendShape(CLOSE);\n\t\t}\n\t}\n\t\n\tt += step;\n}\n\nfunction windowResized() {\n\tresizeCanvas(windowWidth, windowHeight);\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by sayo, with tags genuary,genuary2022"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by cloud.cb\n\n### Response:\n",
    "completion": "var img;\nvar seed;\nvar eyes = [];\n\nfunction setup() {\n\n\tcreateCanvas(1000, 1000);\n\tbackground(255);\n\t\n\tseed = random(100000);\n\trandomSeed(seed);\n\t\n\tsquareRecursion(0,0,width,height);\n\n}\n\nfunction draw() {\n\n\tbackground(255);\n\n\tfor(var i = 0; i < eyes.length; i++) {\n\t\teyes[i].update(mouseX, mouseY);\n\t\teyes[i].display(mouseX, mouseY);\t\n\t}\n\t\n}\n\nfunction mousePressed() {\n\tsetup();\n}\n\nfunction squareRecursion(x, y, w, h) {\n  \t\n\teyes.push(new Eye(x+h/2, y+h/2, h));\n\t\n  // Test to see if we should recurse...\n  if ((random(100) < 80) && (w > 200 || h > 200)) {\n    w = w / 2;\n    h = h / 2;\n    // Call the same function to draw the sub-rectangles\n    squareRecursion(x, y, w, h);\n    squareRecursion(x + w, y, w, h);\n    squareRecursion(x, y + h, w, h);\n    squareRecursion(x + w, y + h, w, h);\n  }\n}\n\nfunction Eye(eyeX, eyeY, eyeSize) {\n\t\n  this.x = eyeX;\n  this.y = eyeY;\n  this.size = eyeSize;\n\t\n\tthis.angle = 0;\n\tthis.eyeColor = colourSelect(random(5));\n\t\n\tthis.irisX = 0;\n\tthis.irisY = 0;\n\t\n  this.update = function(mx, my) {\n\t\t\n\t\tthis.angle = atan2(my-this.y, mx-this.x);\n\t\t\n\t\tvar maxDist = this.size;\n\t\tvar dis = dist (mx, my, this.x, this.y);\n  \tvar r = map (dis, 0, maxDist, 0, this.size/2 - this.size/4);\n\t\t\n\t\tif (r > this.size/2 - this.size/4) r = this.size/2 - this.size/4;\n\t\t\n\t\tthis.irisX = this.x + cos(this.angle)*r;\n\t\tthis.irisY = this.y + sin(this.angle)*r/2;\n\t\t\n  };\n\n  this.display = function(mx, my) {\n\t\tnoStroke();\n\t\tfill(this.eyeColor);\n\t\trect(this.x-this.size/2, this.y-this.size/2, this.size, this.size);\n\t\t\n\t\t// EYE\n    push();\n\t\t\n    translate(this.x, this.y);\n\t\tscale(0.9);\n\t\tfill(255);\n    ellipse(0, 0, this.size, this.size/2);\n\n\t\tpop();\n\n\t\t// IRIS\t\t\n\t\tpush();\n\t\t\n  \ttranslate (this.irisX, this.irisY);  \t\n  \tfill(this.eyeColor);\n\t\tnoStroke();\n\t\tellipse(0, 0, this.size/4, this.size/4);\n\t\t\n\t\tfill(0);\n\t\tellipse(0, 0, this.size/8, this.size/8);\n\t\t\n    pop();\n\t\t\n  };\n\t\n}\n\n\n// Function returns colors for sketch\nfunction colourSelect(rand) {\n\t\n\tvar fillAlpha = 255;\n\tvar\tbrightBlue = color(12, 227, 228, fillAlpha);\n\tvar offGreen = color(126, 211, 33, fillAlpha);\n\tvar peach = color(245, 200, 113, fillAlpha);\n\tvar hotPink = color(255, 0, 104, fillAlpha);\n\tvar lemonYellow = color(226, 216, 63, fillAlpha);\n\t\n  if (rand < 1) {\n    return brightBlue;\n  } else if (1 < rand && rand < 2) {\n    return offGreen;\n  } else if (2 < rand && rand < 3) {\n    return peach;\n  } else if (3 < rand && rand < 4) {\n    return hotPink;\n  } else if (4 < rand && rand < 5) {\n    return lemonYellow;\n  }\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by cloud.cb"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "function setup() {\n\tcreateCanvas(800, 800);\n\tangleMode(DEGREES);\n}\n\nfunction draw() {\n\tbackground(220);\n\n\tlet offset = width / 5;\n\tlet x1 = offset;\n\tlet y1 = height - offset;\n\tlet x2 = width - offset;\n\tlet y2 = height - offset;\n\tlet cx = lerp(x1, x2, 0.5);\n\tlet cy = lerp(y1, y2, 0.5);\n\n\tlet distance = dist(x1, y1, x2, y2);\n\tlet angle = atan2(y2 - y1, x2 - x1);\n\n\tlet kx = cx + cos(angle - 90) * distance / 2 / sqrt(3);\n\tlet ky = cy + sin(angle - 90) * distance / 2 / sqrt(3);\n\n\tlet x3 = cx + cos(angle - 90) * distance / sqrt(3) * 3 / 2;\n\tlet y3 = cy + sin(angle - 90) * distance / sqrt(3) * 3 / 2;\n\n\ttriangle(x1, y1, x2, y2, x3, y3);\n\n\tline(x1, y1, x2, y2);\n\tline(kx, ky, cx, cy);\n\tline(kx, ky, x3, y3);\n\tnoFill();\n\tellipse(kx, ky, distance / sqrt(3) * 2);\n\n\tcircle(kx, ky, 10);\n\tcircle(x1, y1, 10);\n\tcircle(x2, y2, 10);\n\tcircle(x3, y3, 10);\n\tcircle(cx, cy, 10);\n\tnoLoop();\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Richard Bourne, with tags 3D,Tiny Sketch,FreddieRa,pattern\n\n### Response:\n",
    "completion": "setup=_=>createCanvas(w=7e2,w,WEBGL)\n\ndraw=_=>{\nnormalMaterial()\nf=frameCount\nrotateX(sin(f/97))\nrotateY(cos(f/89))\nrotateZ(tan(f/83))\nbox(350)\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Richard Bourne, with tags 3D,Tiny Sketch,FreddieRa,pattern"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Eric Ly\n\n### Response:\n",
    "completion": "let tex;\n\nfunction setup() {\n  createCanvas(800, 800);\n  colorMode(HSB, 360, 100, 100, 100);\n  angleMode(DEGREES);\n\n  tex = createGraphics(width, height);\n  tex.colorMode(HSB, 360, 100, 100, 100);\n  tex.angleMode(DEGREES);\n  for (let i = 0; i < (width * height * 1) / 100; i++) {\n    if (random() > 0.5) {\n      tex.stroke(0, 0, 100, 3);\n    } else {\n      tex.stroke(0, 0, 0, 1);\n    }\n    let cx = random(width);\n    let cy = random(height);\n    let angle = random(360);\n    tex.line(\n      cx + cos(angle) * width,\n      cy + sin(angle) * height,\n      cx + cos(angle + 180) * width,\n      cy + sin(angle + 180) * height\n    );\n  }\n}\n\nfunction draw() {\n  background(40, 5, 100);\n\n  let offset = width / 10;\n  let margin = 0;\n  let cells = int(random(6, 12));\n  let d = (width - offset * 2 - margin * (cells - 1)) / cells;\n\n  for (let j = 0; j < cells; j++) {\n    for (let i = 0; i < cells; i++) {\n      let x = offset + i * (d + margin);\n      let y = offset + j * (d + margin);\n      if (random() > 0.5) {\n        drawLineByPoint(x, y, x + d, y + d);\n      } else {\n        drawLineByPoint(x + d, y, x, y + d);\n      }\n    }\n  }\n  image(tex, 0, 0);\n\n  // let x1 = offset;\n  // let y1 = offset;\n  // let x2 = width - offset;\n  // let y2 = height - offset;\n  // drawLineByPoint(x1, y1, x2, y2);\n  noLoop();\n}\n\nfunction drawLineByPoint(x1, y1, x2, y2) {\n  let distance = dist(x1, y1, x2, y2);\n  let angle = atan2(y2 - y1, x2 - x1);\n  push();\n  translate(x1, y1);\n  rotate(angle);\n  scale(1, random() > 0.5 ? -1 : 1);\n  let d = 0;\n  let dStep;\n  while (d < 1) {\n    let px = lerp(x1, x2, d);\n    let py = lerp(y1, y2, d);\n    let n = sq(noise(d, px / 150, py / 150));\n    strokeWeight((n * distance) / 2);\n    stroke(0, 0, 0, n * 50);\n    strokeCap(PROJECT);\n    push();\n    translate(d * distance, ((n - 1 / 2) * distance) / random(20));\n    rotate(random(360));\n    shearX(random(30)*(random()>0.5?-1:1));\n    shearY(random(30)*(random()>0.5?-1:1));\n    point(0,0);\n    pop();\n    // if (n < 0.25 || n > 0.75) point(px, py);\n    // if (n > 0.25 || n > 0.75) point(px, py);\n    d += 1 / distance / 5;\n  }\n  pop();\n}\n",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Eric Ly"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Okazz\n\n### Response:\n",
    "completion": "let circles = [];\nlet colors = ['#ff595e', '#ffca3a', '#8ac926', '#1982c4','#e70012', '#fef100', '#ef70a8', '#e5007f', '#49acd1', '#70499c'];\nlet bg, pbg; \n\nfunction setup() {\n\tcreateCanvas(800, 800);\n\trectMode(CENTER);\n\tbg = color(0);\n\tpbg = color(255);\n\tiniti();\n}\n\nfunction draw() {\n\tbackground(bg);\t\n\tfor(let i of circles){\n\t\ti.run();\n\t}\n\n\tlet e = 300;\n\tlet t = frameCount % e;\n\tpbg.setAlpha((norm(t, 0, e) ** 30) * 255);\n\tbackground(pbg);\n\n\tif(t == e - 1){\n\t\tiniti();\n\t}\n}\n\nfunction initi(){\n\tcircles = [];\n\tlet seg = 15;\n\tlet w = width / seg;\n\tlet d = w * 0.5;\n\tfor(let i=0; i<seg; i++){\n\t\tfor(let j=0; j<seg; j++){\n\t\t\tlet x = i * w + w / 2;\n\t\t\tlet y = j * w + w / 2;\n\t\t\tlet rnd = int(random(4));\n\t\t\tif(rnd == 0)circles.push(new Circle01(x, y, d));\n\t\t\telse if(rnd == 1)circles.push(new Circle02(x, y, d));\n\t\t\telse if(rnd == 2)circles.push(new Circle03(x, y, d));\n\t\t\telse if(rnd == 3)circles.push(new Circle04(x, y, d));\n\t\t}\n\t}\n\n\tlet a =  pbg;\n\tpbg = bg;\n\tbg = a;\n}\n\nfunction easeOutElastic(x){\n\tconst c4 = (2 * Math.PI) / 3;\n\treturn x === 0\n\t  ? 0\n\t  : x === 1\n\t  ? 1\n\t  : pow(2, -10 * x) * sin((x * 10 - 0.75) * c4) + 1;\n}\n\nfunction easeInCubic(x){\n\treturn x * x * x;\n}\n\nfunction easeOutCubic(x){\n\treturn 1 - pow(1 - x, 3);\n}\n\nfunction easeOutCirc(x) {\n\t\treturn sqrt(1 - pow(x - 1, 2));\n}\n\nclass Circle01 {\n\tconstructor(x, y, d){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.d = 0;\n\t\tthis.d0 = 0;\n\t\tthis.d1 = d;\n\t\tthis.t = -int(random(150));\n\t\tthis.t1 = int(random(60, 120));\n\t\tthis.col = color(random(colors));\n\t}\n\n\tshow(){\n\t\tfill(this.col);\n\t\tnoStroke();\n\t\tcircle(this.x, this.y, this.d);\n\t}\n\n\tmove(){\n\t\tif(0 < this.t && this.t < this.t1){\n\t\t\tlet amt = easeOutElastic(norm(this.t, 0, this.t1 - 1));\n\t\t\tthis.d = lerp(this.d0, this.d1, amt);\n\t\t}\n\t\tthis.t ++;\n\t}\n\n\trun(){\n\t\tif(this.t > 0)this.show();\n\t\tthis.move();\n\t}\n}\n\nclass Circle02 extends Circle01{\n\tconstructor(x, y, d){\n\t\tsuper(x, y, d);\n\t\tthis.x0 = x + width * random(-1, 1) * 0.5;\n\t\tthis.y0 = y + height * random(-1, 1) * 0.5;\n\t\tthis.x1 = x;\n\t\tthis.y1 = y;\n\t\tthis.x = this.x0;\n\t\tthis.y = this.y0;\n\t}\n\n\tmove(){\n\t\tif(0 < this.t && this.t < this.t1){\n\t\t\tlet amt = easeOutCirc(norm(this.t, 0, this.t1 - 1));\n\t\t\tthis.x = lerp(this.x0, this.x1, amt);\n\t\t\tthis.y = lerp(this.y0, this.y1, amt);\n\t\t\tthis.d = lerp(this.d0, this.d1, amt);\n\t\t}\n\t\tthis.t ++;\n\t}\n}\n\nclass Circle03 extends Circle01{\n\tconstructor(x, y, d){\n\t\tsuper(x, y, d);\n\t\tthis.d = d;\n\t\tthis.alph = 0;\n\t\tthis.aa = 0;\n\t\tthis.ang = random(TAU);\n\t\tthis.sw = width*0.002;\n\t\tthis.pm = (int(random(2))*2) - 1;\n\t}\n\n\tshow(){\n\n\t\t\n\t\tthis.col.setAlpha(this.alph);\n\t\tfill(this.col);\n\t\tnoStroke();\n\t\tcircle(this.x, this.y, this.d);\n\t\t\n\t\tpush();\n\t\tthis.col.setAlpha(255);\n\t\tnoFill();\n\t\tstroke(this.col);\n\t\tstrokeWeight(this.sw);\n\t\ttranslate(this.x, this.y);\n\t\tscale(this.pm, 1);\n\t\trotate(this.ang);\n\t\tarc(0, 0, this.d - this.sw, this.d - this.sw, 0, this.aa);\n\t\tpop();\n\t\t// arc(th);\n\t\t\n\t}\n\n\tmove(){\n\t\tif(0 < this.t && this.t < this.t1){\n\t\t\tlet amt = norm(this.t, 0, this.t1 - 1);\n\t\t\tthis.alph = lerp(0, 255, easeInCubic(amt));\n\t\t\tthis.aa = lerp(0, TAU, easeOutCubic(amt));\n\t\t}\n\t\tthis.t ++;\n\t}\n}\n\nclass Circle04 extends Circle01{\n\tconstructor(x, y, d){\n\t\tsuper(x, y, d);\n\t\tthis.ang = 0;\n\t\tthis.crn = 0;\n\t\tthis.aa = 5 * ((int(random(2))*2)-1);\n\t}\n\n\tshow(){\n\t\tpush();\n\t\ttranslate(this.x, this.y);\n\t\trotate(this.ang);\n\t\tfill(this.col);\n\t\tnoStroke();\n\t\tsquare(0, 0, this.d, this.crn);\n\t\tpop();\n\t}\n\n\tmove(){\n\t\tif(0 < this.t && this.t < this.t1){\n\t\t\tlet amt = norm(this.t, 0, this.t1 - 1);\n\t\t\tthis.ang = lerp(0, TAU*this.aa, amt);\n\t\t\tthis.d = lerp(this.d0, this.d1,easeOutCubic(amt));\n\t\t\tthis.crn = lerp(0, this.d/2, easeInCubic(amt));\n\t\t}\n\t\tthis.t ++;\n\t}\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Okazz"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "let palette;\nlet baseColor;\n\nfunction setup() {\n  createCanvas(windowWidth, windowHeight);\n  palette = shuffle(random(colorScheme).colors.concat());\n  baseColor = palette[0];\n  palette.splice(0, 1);\n}\n\nfunction draw() {\n  background(220);\n\n  let num = int(map(width * height, 800 * 800, 1920 * 1920, 50, 100));\n  let frameOffset = min(width, height) / num;\n  let n = sqrt(sq(width) + sq(height));\n\n  push();\n  translate(width / 2, height / 2);\n  rotate(PI / 4);\n  separateGrid(-n / 2, -n / 2, n, n / 15, this);\n  separateGrid(-n / 2, -n / 2, n, n / 15, this);\n  scale(sqrt(2));\n  strokeWeight(1 / sqrt(2));\n  for (let i = 1; i > (1 / num) * 10; i -= 1 / num) {\n    push();\n    rotate(\n      (i * TWO_PI * num) / map(width * height, 800 * 800, 1920 * 1920, 2, 1)\n    );\n    rectMode(CENTER);\n    translate(i * width, 0);\n    push();\n    let w = width * i - frameOffset;\n    let h = height * i - frameOffset;\n    let d = max(w, h);\n\n    fill(255);\n    rect(0, 0, w, h);\n    fill(255);\n    rect(0, 0, w - 15, h - 15);\n    drawingContext.clip();\n    \n    separateGrid(-d / 2, -d / 2, d, d / 5, this);\n    separateGrid(-d / 2, -d / 2, d, d / 5, this);\n    pop();\n    drawingContext.shadowColor = color(0,0,0,100);\n    drawingContext.shadowBlur = frameOffset;\n    drawFrame(0, 0, width * i, height * i, frameOffset);\n    pop();\n  }\n  pop();\n  noLoop();\n}\nfunction separateGrid(x, y, d, minD, g) {\n  let sepNum = int(random(1, 4));\n  let w = d / sepNum;\n  for (let i = x; i < x + d - 1; i += w) {\n    for (let j = y; j < y + d - 1; j += w) {\n      if (random(100) < 95 && w > minD) {\n        separateGrid(i, j, w, minD, g);\n      } else {\n        let dx = i;\n        let dy = j;\n        let dw = w;\n        let dh = w;\n\n        g.push();\n        g.translate(dx + dw / 2, dy + dh / 2);\n        g.rotate((int(random(4)) * PI) / 2);\n        g.scale(random() > 0.5 ? -1 : 1, random() > 0.5 ? -1 : 1);\n        drawTruchetPattern(0, 0, w, int(random(40)), this);\n        g.pop();\n      }\n    }\n  }\n}\nfunction drawFrame(x, y, w, h, n) {\n  push();\n  translate(x, y);\n  rectMode(CENTER);\n  let points = createFramePoint(w, h);\n  let points_prev = createFramePoint(w - n, h - n);\n  for (let i = 0; i < points.length; i++) {\n    let p1 = points[i];\n    let p2 = points[(i + 1) % points.length];\n    let p3 = points_prev[(i + 1) % points.length];\n    let p4 = points_prev[i];\n    push();\n    fill(20);\n    stroke(220);\n    strokeWeight(1);\n    quad(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y, p4.x, p4.y);\n    pop();\n  }\n  pop();\n}\n\nfunction createFramePoint(w, h) {\n  let arr = [\n    createVector(-w / 2, -h / 2),\n    createVector(w / 2, -h / 2),\n    createVector(w / 2, h / 2),\n    createVector(-w / 2, h / 2),\n  ];\n  return arr;\n}\n\nfunction windowResized() {\n  resizeCanvas(windowWidth, windowHeight);\n}\n\nfunction drawTruchetPattern(\n  pattern_center_x,\n  pattern_center_y,\n  pattern_size,\n  pattern_num\n) {\n  let colors = [shuffle(palette.concat())[0]].concat([baseColor]);\n  let d = pattern_size / 6;\n  let n = 0;\n  push();\n  noStroke();\n  translate(pattern_center_x, pattern_center_y);\n  switch (pattern_num) {\n    case 0:\n      rectMode(CENTER);\n      fill(colors[0]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[1]);\n      for (let j = 0; j < 3; j++) {\n        for (let i = 0; i < 3; i++) {\n          let x = map(i, 0, 2, -pattern_size / 2, pattern_size / 2);\n          let y = map(j, 0, 2, -pattern_size / 2, pattern_size / 2);\n          if (!(i == 1 && j == 1)) circle(x, y, d * 2);\n        }\n      }\n      break;\n    case 1:\n      rectMode(CENTER);\n      fill(colors[0]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[1]);\n      for (let j = 0; j < 2; j++) {\n        for (let i = 0; i < 3; i++) {\n          let x = map(i, 0, 2, -pattern_size / 2, pattern_size / 2);\n          let y = map(j, 0, 2, -pattern_size / 2, pattern_size / 2);\n          if (!(i == 1 && j == 1)) circle(x, y, d * 2);\n        }\n      }\n      fill(colors[1]);\n      rectMode(CORNER);\n      rect(-pattern_size / 2, +pattern_size / 2 - d, pattern_size, d);\n      fill(colors[0]);\n      circle(-pattern_size / 2 + d * 1.5, pattern_size / 2, d);\n      circle(pattern_size / 2 - d * 1.5, pattern_size / 2, d);\n      break;\n    case 2:\n      rectMode(CENTER);\n      fill(colors[0]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[1]);\n      for (let j = 0; j < 3; j++) {\n        for (let i = 0; i < 3; i++) {\n          let x = map(i, 0, 2, -pattern_size / 2, pattern_size / 2);\n          let y = map(j, 0, 2, -pattern_size / 2, pattern_size / 2);\n          circle(x, y, d * 2);\n        }\n      }\n      break;\n    case 3:\n      rectMode(CENTER);\n      fill(colors[0]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[1]);\n      for (let j = 1; j < 2; j++) {\n        for (let i = 0; i < 3; i++) {\n          let x = map(i, 0, 2, -pattern_size / 2, pattern_size / 2);\n          let y = map(j, 0, 2, -pattern_size / 2, pattern_size / 2);\n          if (!(i == 1 && j == 1)) circle(x, y, d * 2);\n        }\n      }\n      fill(colors[1]);\n      rectMode(CORNER);\n      rect(-pattern_size / 2, -pattern_size / 2, pattern_size, d);\n      rect(-pattern_size / 2, +pattern_size / 2 - d, pattern_size, d);\n      fill(colors[0]);\n      circle(-pattern_size / 2 + d * 1.5, -pattern_size / 2, d);\n      circle(pattern_size / 2 - d * 1.5, -pattern_size / 2, d);\n      circle(-pattern_size / 2 + d * 1.5, pattern_size / 2, d);\n      circle(pattern_size / 2 - d * 1.5, pattern_size / 2, d);\n      break;\n    case 4:\n      rectMode(CENTER);\n      fill(colors[0]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[1]);\n      for (let j = 0; j < 2; j++) {\n        for (let i = 0; i < 3; i++) {\n          let x = map(i, 0, 2, -pattern_size / 2, pattern_size / 2);\n          let y = map(j, 0, 2, -pattern_size / 2, pattern_size / 2);\n          circle(x, y, d * 2);\n        }\n      }\n      fill(colors[1]);\n      rectMode(CORNER);\n      rect(-pattern_size / 2, +pattern_size / 2 - d, pattern_size, d);\n      drawingContext.clip();\n      fill(colors[0]);\n      circle(-pattern_size / 2 + d * 1.5, pattern_size / 2, d);\n      circle(pattern_size / 2 - d * 1.5, pattern_size / 2, d);\n      break;\n    case 5:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[0]);\n      rectMode(CORNER);\n      rect(-pattern_size / 2, -pattern_size / 2 + d, pattern_size, d);\n      for (let i = 0; i < 4; i++) {\n        fill(colors[0]);\n        circle(\n          (cos(i * 90) * pattern_size) / 2,\n          (sin(i * 90) * pattern_size) / 2,\n          d * 2 * 2\n        );\n        fill(colors[1]);\n        circle(\n          (cos(i * 90) * pattern_size) / 2,\n          (sin(i * 90) * pattern_size) / 2,\n          d * 2\n        );\n      }\n      break;\n    case 6:\n      rectMode(CENTER);\n      fill(colors[0]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[1]);\n      for (let j = 1; j < 2; j++) {\n        for (let i = 0; i < 3; i++) {\n          let x = map(i, 0, 2, -pattern_size / 2, pattern_size / 2);\n          let y = map(j, 0, 2, -pattern_size / 2, pattern_size / 2);\n          circle(x, y, d * 2);\n        }\n      }\n      fill(colors[1]);\n      rectMode(CORNER);\n      rect(-pattern_size / 2, -pattern_size / 2, pattern_size, d);\n      rect(-pattern_size / 2, +pattern_size / 2 - d, pattern_size, d);\n      fill(colors[0]);\n      circle(-pattern_size / 2 + d * 1.5, -pattern_size / 2, d);\n      circle(pattern_size / 2 - d * 1.5, -pattern_size / 2, d);\n      circle(-pattern_size / 2 + d * 1.5, pattern_size / 2, d);\n      circle(pattern_size / 2 - d * 1.5, pattern_size / 2, d);\n      break;\n    case 7:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      for (let i = 0; i < 4; i++) {\n        fill(colors[0]);\n        circle(\n          (cos(i * 90) * pattern_size) / 2,\n          (sin(i * 90) * pattern_size) / 2,\n          d * 2 * 2\n        );\n        fill(colors[1]);\n        circle(\n          (cos(i * 90) * pattern_size) / 2,\n          (sin(i * 90) * pattern_size) / 2,\n          d * 2\n        );\n      }\n      break;\n    case 8:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[0]);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 5 * 2, d * 5 * 2, 0, 90);\n      arc(\n        pattern_size / 2,\n        pattern_size / 2,\n        d * 2 * 2,\n        d * 2 * 2,\n        180,\n        180 + 90\n      );\n      circle(-pattern_size / 2 + d * 1.5, pattern_size / 2, d);\n      circle(+pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n      fill(colors[1]);\n      circle(pattern_size / 2, pattern_size / 2, d * 2);\n      circle(-pattern_size / 2, -pattern_size / 2, d * 2);\n      circle(-pattern_size / 2, -pattern_size / 2 + d * 3, d * 2);\n      circle(-pattern_size / 2 + d * 3, -pattern_size / 2, d * 2);\n      break;\n    case 9:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[0]);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 2 * 2, d * 2 * 2, 0, 90);\n      arc(+pattern_size / 2, -pattern_size / 2, d * 2 * 2, d * 2 * 2, 90, 180);\n      arc(\n        -pattern_size / 2,\n        -pattern_size / 2 + d * 3,\n        d * 2 * 2,\n        d * 2 * 2,\n        0,\n        90\n      );\n      arc(\n        +pattern_size / 2,\n        -pattern_size / 2 + d * 3,\n        d * 2 * 2,\n        d * 2 * 2,\n        90,\n        180\n      );\n      arc(0, 0, d * 2 * 2, d * 2 * 2, 180, 360);\n      arc(0, +pattern_size / 2, d * 2 * 2, d * 2 * 2, 180, 360);\n      fill(colors[1]);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 1 * 2, d * 1 * 2, 0, 90);\n      arc(+pattern_size / 2, -pattern_size / 2, d * 1 * 2, d * 1 * 2, 90, 180);\n      arc(\n        -pattern_size / 2,\n        -pattern_size / 2 + d * 3,\n        d * 1 * 2,\n        d * 1 * 2,\n        0,\n        90\n      );\n      arc(\n        +pattern_size / 2,\n        -pattern_size / 2 + d * 3,\n        d * 1 * 2,\n        d * 1 * 2,\n        90,\n        180\n      );\n      arc(0, 0, d * 1 * 2, d * 1 * 2, 180, 360);\n      arc(0, +pattern_size / 2, d * 1 * 2, d * 1 * 2, 180, 360);\n      break;\n    case 10:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[0]);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 5 * 2, d * 5 * 2, 0, 90);\n      circle(-pattern_size / 2 + d * 1.5, pattern_size / 2, d);\n      circle(+pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n\n      circle(+pattern_size / 2 - d * 1.5, pattern_size / 2, d);\n      circle(+pattern_size / 2, +pattern_size / 2 - d * 1.5, d);\n\n      fill(colors[1]);\n      circle(-pattern_size / 2, -pattern_size / 2, d * 2);\n      circle(-pattern_size / 2, -pattern_size / 2 + d * 3, d * 2);\n      circle(-pattern_size / 2 + d * 3, -pattern_size / 2, d * 2);\n      break;\n    case 11:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[0]);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 2 * 2, d * 2 * 2, 0, 90);\n      circle(+pattern_size / 2 - d * 1.5, -pattern_size / 2, d);\n      circle(+pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n      arc(\n        -pattern_size / 2,\n        -pattern_size / 2 + d * 3,\n        d * 2 * 2,\n        d * 2 * 2,\n        0,\n        90\n      );\n      arc(\n        +pattern_size / 2,\n        -pattern_size / 2 + d * 3,\n        d * 2 * 2,\n        d * 2 * 2,\n        90,\n        180\n      );\n      arc(0, 0, d * 2 * 2, d * 2 * 2, 180, 360);\n      arc(0, +pattern_size / 2, d * 2 * 2, d * 2 * 2, 180, 360);\n      fill(colors[1]);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 1 * 2, d * 1 * 2, 0, 90);\n      arc(+pattern_size / 2, -pattern_size / 2, d * 1 * 2, d * 1 * 2, 90, 180);\n      arc(\n        -pattern_size / 2,\n        -pattern_size / 2 + d * 3,\n        d * 1 * 2,\n        d * 1 * 2,\n        0,\n        90\n      );\n      arc(\n        +pattern_size / 2,\n        -pattern_size / 2 + d * 3,\n        d * 1 * 2,\n        d * 1 * 2,\n        90,\n        180\n      );\n      arc(0, 0, d * 1 * 2, d * 1 * 2, 180, 360);\n      arc(0, +pattern_size / 2, d * 1 * 2, d * 1 * 2, 180, 360);\n      break;\n    case 12:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      for (let i = 0; i < 4; i++) {\n        if (i !== 2) {\n          fill(colors[0]);\n          circle(\n            (cos(i * 90) * pattern_size) / 2,\n            (sin(i * 90) * pattern_size) / 2,\n            d * 2 * 2\n          );\n          fill(colors[1]);\n          circle(\n            (cos(i * 90) * pattern_size) / 2,\n            (sin(i * 90) * pattern_size) / 2,\n            d * 1 * 2\n          );\n        }\n      }\n      fill(colors[0]);\n      rectMode(CORNER);\n      rect(pattern_size / 2 - d * 2, -pattern_size / 2, d, pattern_size);\n      circle(-pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n      circle(-pattern_size / 2, +pattern_size / 2 - d * 1.5, d);\n      break;\n    case 13:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[0]);\n      rectMode(CORNER);\n      rect(-pattern_size / 2, -pattern_size / 2, pattern_size, d * 2);\n      rect(-pattern_size / 2, -pattern_size / 2 + d * 4, pattern_size, d);\n      circle(-pattern_size / 2 + d * 1.5, pattern_size / 2, d);\n      circle(+pattern_size / 2 - d * 1.5, pattern_size / 2, d);\n      for (let i = 0; i < 3; i++) {\n        let x = map(i, 0, 2, -pattern_size / 2, pattern_size / 2);\n        let y = -pattern_size / 2;\n        fill(colors[1]);\n        circle(x, y, d * 2);\n      }\n      break;\n    case 14:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      for (let i = 0; i < 4; i++) {\n        push();\n        rotate(i * 90);\n        fill(colors[0]);\n        arc(-pattern_size / 2, -pattern_size / 2, d * 2 * 2, d * 2 * 2, 0, 90);\n        fill(colors[1]);\n        arc(-pattern_size / 2, -pattern_size / 2, d * 1 * 2, d * 1 * 2, 0, 90);\n        pop();\n      }\n      fill(colors[0]);\n      arc(0, d, d * 2 * 2, d * 2 * 2, 180, 360);\n      rect(-d * 1.5, d * 2, d, d * 2);\n      rect(+d * 1.5, d * 2, d, d * 2);\n      fill(colors[1]);\n      arc(0, d, d * 1 * 2, d * 1 * 2, 180, 360);\n      fill(colors[0]);\n      circle(0, d, d);\n      break;\n    case 15:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[0]);\n      circle(+pattern_size / 2 - d * 1.5, -pattern_size / 2, d);\n      circle(+pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n      circle(-pattern_size / 2 + d * 1.5, -pattern_size / 2, d);\n      circle(-pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n      arc(\n        -pattern_size / 2,\n        -pattern_size / 2 + d * 3,\n        d * 2 * 2,\n        d * 2 * 2,\n        0,\n        90\n      );\n      arc(\n        +pattern_size / 2,\n        -pattern_size / 2 + d * 3,\n        d * 2 * 2,\n        d * 2 * 2,\n        90,\n        180\n      );\n      arc(0, 0, d * 2 * 2, d * 2 * 2, 180, 360);\n      arc(0, +pattern_size / 2, d * 2 * 2, d * 2 * 2, 180, 360);\n      fill(colors[1]);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 1 * 2, d * 1 * 2, 0, 90);\n      arc(+pattern_size / 2, -pattern_size / 2, d * 1 * 2, d * 1 * 2, 90, 180);\n      arc(\n        -pattern_size / 2,\n        -pattern_size / 2 + d * 3,\n        d * 1 * 2,\n        d * 1 * 2,\n        0,\n        90\n      );\n      arc(\n        +pattern_size / 2,\n        -pattern_size / 2 + d * 3,\n        d * 1 * 2,\n        d * 1 * 2,\n        90,\n        180\n      );\n      arc(0, 0, d * 1 * 2, d * 1 * 2, 180, 360);\n      arc(0, +pattern_size / 2, d * 1 * 2, d * 1 * 2, 180, 360);\n      break;\n    case 16:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      for (let i = 0; i < 4; i++) {\n        if (i !== 2) {\n          fill(colors[0]);\n          circle(\n            (cos(i * 90) * pattern_size) / 2,\n            (sin(i * 90) * pattern_size) / 2,\n            d * 2 * 2\n          );\n          fill(colors[1]);\n          circle(\n            (cos(i * 90) * pattern_size) / 2,\n            (sin(i * 90) * pattern_size) / 2,\n            d * 1 * 2\n          );\n        }\n      }\n      fill(colors[0]);\n      circle(-pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n      circle(-pattern_size / 2, +pattern_size / 2 - d * 1.5, d);\n      break;\n    case 17:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      for (let i = 0; i < 4; i++) {\n        push();\n        rotate(i * 90);\n        fill(colors[0]);\n        arc(-pattern_size / 2, -pattern_size / 2, d * 2 * 2, d * 2 * 2, 0, 90);\n        fill(colors[1]);\n        arc(-pattern_size / 2, -pattern_size / 2, d * 1 * 2, d * 1 * 2, 0, 90);\n        pop();\n      }\n      fill(colors[0]);\n      arc(0, d, d * 2 * 2, d * 2 * 2, 180, 360);\n      rect(-d * 1.5, d * 2, d, d * 2);\n      rect(+d * 1.5, d * 2, d, d * 2);\n      fill(colors[1]);\n      arc(0, d, d * 1 * 2, d * 1 * 2, 180, 360);\n      break;\n    case 18:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n\n      fill(colors[0]);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 5 * 2, d * 5 * 2, 0, 90);\n      fill(colors[1]);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 4 * 2, d * 4 * 2, 0, 90);\n      for (let i = 0; i < 4; i++) {\n        push();\n        rotate(i * 90);\n        fill(colors[0]);\n        arc(-pattern_size / 2, -pattern_size / 2, d * 2 * 2, d * 2 * 2, 0, 90);\n        fill(colors[1]);\n        arc(-pattern_size / 2, -pattern_size / 2, d * 1 * 2, d * 1 * 2, 0, 90);\n        pop();\n      }\n      break;\n    case 19:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[0]);\n      arc(0, -pattern_size / 2, d * 2 * 2, d * 2 * 2, 0, 180);\n      fill(colors[1]);\n      arc(0, -pattern_size / 2, d * 2 * 1, d * 2 * 1, 0, 180);\n      fill(colors[0]);\n      arc(0, +pattern_size / 2, d * 2 * 2, d * 2 * 2, 180, 270);\n      fill(colors[1]);\n      arc(0, +pattern_size / 2, d * 2 * 1, d * 2 * 1, 180, 270);\n      fill(colors[0]);\n      rectMode(CORNER);\n      rect(-pattern_size / 2, -pattern_size / 2 + d, pattern_size / 2, d);\n      rect(0, +pattern_size / 2 - d * 2, pattern_size / 2, d);\n      circle(-pattern_size / 2, pattern_size / 2 - d * 1.5, d);\n      circle(+pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n      circle(d * 1.5, pattern_size / 2, d);\n      break;\n    case 20:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n\n      fill(colors[0]);\n      circle(+pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 5 * 2, d * 5 * 2, 0, 90);\n      fill(colors[1]);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 4 * 2, d * 4 * 2, 0, 90);\n      for (let i = 0; i < 4; i++) {\n        if (i != 1) {\n          push();\n          rotate(i * 90);\n          fill(colors[0]);\n          arc(\n            -pattern_size / 2,\n            -pattern_size / 2,\n            d * 2 * 2,\n            d * 2 * 2,\n            0,\n            90\n          );\n          fill(colors[1]);\n          arc(\n            -pattern_size / 2,\n            -pattern_size / 2,\n            d * 1 * 2,\n            d * 1 * 2,\n            0,\n            90\n          );\n          pop();\n        }\n      }\n      break;\n    case 21:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      for (let i = 0; i < 2; i++) {\n        push();\n        rotate(i * 90);\n        fill(colors[0]);\n        arc(-pattern_size / 2, -pattern_size / 2, d * 2 * 2, d * 2 * 2, 0, 90);\n        fill(colors[1]);\n        arc(-pattern_size / 2, -pattern_size / 2, d * 1 * 2, d * 1 * 2, 0, 90);\n        pop();\n      }\n      fill(colors[0]);\n      arc(0, d, d * 2 * 2, d * 2 * 2, 180, 360);\n      rect(-d * 1.5, d * 2, d, d * 2);\n      rect(+d * 1.5, d * 2, d, d * 2);\n      circle(-pattern_size / 2, +pattern_size / 2 - d * 1.5, d);\n      circle(+pattern_size / 2, +pattern_size / 2 - d * 1.5, d);\n      fill(colors[1]);\n      arc(0, d, d * 1 * 2, d * 1 * 2, 180, 360);\n      break;\n    case 22:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[0]);\n      circle(-pattern_size / 2 + d * 1.5, pattern_size / 2, d);\n      circle(+pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n      rectMode(CORNER);\n      rect(pattern_size / 2 - d * 2, -pattern_size / 2, d, pattern_size);\n      let e = d / 5;\n      fill(colors[1]);\n      strokeWeight(d / 3);\n      stroke(colors[1]);\n      rect(-pattern_size / 2, pattern_size / 2 - d * 2, pattern_size, d);\n      fill(colors[0]);\n      noStroke();\n      rect(-pattern_size / 2, pattern_size / 2 - d * 2, pattern_size, d);\n      // circle(+pattern_size / 2, +pattern_size / 2 - d * 1.5, d);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 2 * 2, d * 2 * 2, 0, 90);\n      fill(colors[1]);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 1 * 2, d * 1 * 2, 0, 90);\n      break;\n    case 23:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[0]);\n      circle(-pattern_size / 2 + d * 1.5, pattern_size / 2, d);\n      circle(+pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n      arc(pattern_size / 2, pattern_size / 2, d * 2 * 2, d * 2 * 2, 180, 270);\n      rectMode(CORNER);\n      rect(-pattern_size / 2, -pattern_size / 2 + d, pattern_size / 2, d);\n      rect(-pattern_size / 2 + d, -pattern_size / 2, d, pattern_size / 2);\n      fill(colors[1]);\n      arc(pattern_size / 2, pattern_size / 2, d * 1 * 2, d * 1 * 2, 180, 270);\n      fill(colors[0]);\n      arc(-pattern_size / 2, 0, d * 2 * 2, d * 2 * 2, 0, 90);\n      arc(0, -pattern_size / 2, d * 2 * 2, d * 2 * 2, 0, 90);\n      fill(colors[1]);\n      arc(-pattern_size / 2, 0, d * 1 * 2, d * 1 * 2, 0, 90);\n      arc(0, -pattern_size / 2, d * 1 * 2, d * 1 * 2, 0, 90);\n      break;\n    case 24:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[0]);\n      circle(+pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n      circle(-pattern_size / 2 + d * 1.5, +pattern_size / 2, d);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 5 * 2, d * 5 * 2, 0, 90);\n      fill(colors[1]);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 4 * 2, d * 4 * 2, 0, 90);\n      for (let i = 0; i < 4; i++) {\n        if (i % 2 == 0) {\n          push();\n          rotate(i * 90);\n          fill(colors[0]);\n          arc(\n            -pattern_size / 2,\n            -pattern_size / 2,\n            d * 2 * 2,\n            d * 2 * 2,\n            0,\n            90\n          );\n          fill(colors[1]);\n          arc(\n            -pattern_size / 2,\n            -pattern_size / 2,\n            d * 1 * 2,\n            d * 1 * 2,\n            0,\n            90\n          );\n          pop();\n        }\n      }\n      break;\n    case 25:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[0]);\n      arc(0, -pattern_size / 2, d * 2 * 2, d * 2 * 2, 0, 180);\n      fill(colors[1]);\n      arc(0, -pattern_size / 2, d * 1 * 2, d * 1 * 2, 0, 180);\n      fill(colors[0]);\n      for (let i = 0; i < 4; i++) {\n        push();\n        rotate(i * 90);\n        fill(colors[0]);\n        arc(-pattern_size / 2, -pattern_size / 2, d * 2 * 2, d * 2 * 2, 0, 90);\n        fill(colors[1]);\n        arc(-pattern_size / 2, -pattern_size / 2, d * 1 * 2, d * 1 * 2, 0, 90);\n        pop();\n      }\n      break;\n    case 26:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[0]);\n      arc(0, -pattern_size / 2, d * 2 * 2, d * 2 * 2, 0, 90);\n      fill(colors[1]);\n      arc(0, -pattern_size / 2, d * 2 * 1, d * 2 * 1, 0, 90);\n      fill(colors[0]);\n      arc(0, +pattern_size / 2, d * 2 * 2, d * 2 * 2, 180, 270);\n      fill(colors[1]);\n      arc(0, +pattern_size / 2, d * 2 * 1, d * 2 * 1, 180, 270);\n      fill(colors[0]);\n      rectMode(CORNER);\n      rect(-pattern_size / 2, -pattern_size / 2 + d, pattern_size / 2, d);\n      rect(0, +pattern_size / 2 - d * 2, pattern_size / 2, d);\n      circle(-pattern_size / 2, pattern_size / 2 - d * 1.5, d);\n      circle(+pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n      circle(d * 1.5, pattern_size / 2, d);\n      circle(-d * 1.5, -pattern_size / 2, d);\n      break;\n    case 27:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[0]);\n      circle(+pattern_size / 2 - d * 1.5, -pattern_size / 2, d);\n      circle(+pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n      circle(-pattern_size / 2 + d * 1.5, -pattern_size / 2, d);\n      circle(-pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n      arc(\n        -pattern_size / 2,\n        -pattern_size / 2 + d * 3,\n        d * 2 * 2,\n        d * 2 * 2,\n        0,\n        90\n      );\n      arc(\n        +pattern_size / 2,\n        -pattern_size / 2 + d * 3,\n        d * 2 * 2,\n        d * 2 * 2,\n        90,\n        180\n      );\n      arc(0, 0, d * 2 * 2, d * 2 * 2, 180, 360);\n      fill(colors[1]);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 1 * 2, d * 1 * 2, 0, 90);\n      arc(+pattern_size / 2, -pattern_size / 2, d * 1 * 2, d * 1 * 2, 90, 180);\n      arc(\n        -pattern_size / 2,\n        -pattern_size / 2 + d * 3,\n        d * 1 * 2,\n        d * 1 * 2,\n        0,\n        90\n      );\n      arc(\n        +pattern_size / 2,\n        -pattern_size / 2 + d * 3,\n        d * 1 * 2,\n        d * 1 * 2,\n        90,\n        180\n      );\n      arc(0, 0, d * 1 * 2, d * 1 * 2, 180, 360);\n      fill(colors[0]);\n      circle(d * 1.5, pattern_size / 2, d);\n      circle(-d * 1.5, pattern_size / 2, d);\n      break;\n    case 28:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[0]);\n      arc(0, -pattern_size / 2, d * 2 * 2, d * 2 * 2, 0, 180);\n      fill(colors[1]);\n      arc(0, -pattern_size / 2, d * 2 * 1, d * 2 * 1, 0, 180);\n      fill(colors[0]);\n      arc(0, +pattern_size / 2, d * 2 * 2, d * 2 * 2, 180, 270);\n      fill(colors[1]);\n      arc(0, +pattern_size / 2, d * 2 * 1, d * 2 * 1, 180, 270);\n      fill(colors[0]);\n      rectMode(CORNER);\n      rect(0, +pattern_size / 2 - d * 2, pattern_size / 2, d);\n      circle(-pattern_size / 2, pattern_size / 2 - d * 1.5, d);\n      circle(-pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n      circle(+pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n      circle(d * 1.5, pattern_size / 2, d);\n      break;\n    case 29:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      for (let i = 0; i < 2; i++) {\n        push();\n        rotate(i * 90);\n        fill(colors[0]);\n        arc(-pattern_size / 2, -pattern_size / 2, d * 2 * 2, d * 2 * 2, 0, 90);\n        fill(colors[1]);\n        arc(-pattern_size / 2, -pattern_size / 2, d * 1 * 2, d * 1 * 2, 0, 90);\n        pop();\n      }\n      fill(colors[0]);\n      rect(0, d * 1.5, pattern_size, d);\n      circle(d * 1.5, pattern_size / 2, d);\n      circle(-d * 1.5, pattern_size / 2, d);\n      break;\n    case 30:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[0]);\n      circle(+pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n      circle(-pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n      circle(+pattern_size / 2, +pattern_size / 2 - d * 1.5, d);\n      circle(-pattern_size / 2, +pattern_size / 2 - d * 1.5, d);\n\n      fill(colors[0]);\n      arc(0, pattern_size / 2, d * 2 * 2, d * 2 * 2, 180, 360);\n      fill(colors[1]);\n      arc(0, pattern_size / 2, d * 2 * 1, d * 1 * 2, 180, 360);\n      fill(colors[0]);\n      fill(colors[0]);\n      arc(0, -pattern_size / 2, d * 2 * 2, d * 2 * 2, 0, 180);\n      fill(colors[1]);\n      arc(0, -pattern_size / 2, d * 2 * 1, d * 1 * 2, 0, 180);\n      fill(colors[0]);\n      break;\n    case 31:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[0]);\n      circle(+pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n      circle(-pattern_size / 2 + d * 1.5, +pattern_size / 2, d);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 5 * 2, d * 5 * 2, 0, 90);\n      fill(colors[1]);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 4 * 2, d * 4 * 2, 0, 90);\n      push();\n      rotate(180);\n      fill(colors[0]);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 2 * 2, d * 2 * 2, 0, 90);\n      fill(colors[1]);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 1 * 2, d * 1 * 2, 0, 90);\n      pop();\n      fill(colors[0]);\n      circle(-pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n      circle(-pattern_size / 2 + d * 1.5, -pattern_size / 2, d);\n      break;\n    case 32:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[0]);\n      circle(+pattern_size / 2, -pattern_size / 2 + d * 1.5, d);\n      circle(-pattern_size / 2 + d * 1.5, +pattern_size / 2, d);\n      circle(+pattern_size / 2, +pattern_size / 2 - d * 1.5, d);\n      circle(+pattern_size / 2 - d * 1.5, +pattern_size / 2, d);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 5 * 2, d * 5 * 2, 0, 90);\n      fill(colors[1]);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 4 * 2, d * 4 * 2, 0, 90);\n      push();\n      fill(colors[0]);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 2 * 2, d * 2 * 2, 0, 90);\n      fill(colors[1]);\n      arc(-pattern_size / 2, -pattern_size / 2, d * 1 * 2, d * 1 * 2, 0, 90);\n      pop();\n      break;\n    case 33:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      fill(colors[0]);\n      rectMode(CORNER);\n      rect(-pattern_size / 2, -pattern_size / 2, pattern_size, d * 2);\n      circle(-pattern_size / 2 + d * 1.5, pattern_size / 2, d);\n      circle(+pattern_size / 2 - d * 1.5, pattern_size / 2, d);\n\n      circle(-pattern_size / 2, pattern_size / 2 - d * 1.5, d);\n      circle(+pattern_size / 2, pattern_size / 2 - d * 1.5, d);\n\n      for (let i = 0; i < 3; i++) {\n        let x = map(i, 0, 2, -pattern_size / 2, pattern_size / 2);\n        let y = -pattern_size / 2;\n        fill(colors[1]);\n        circle(x, y, d * 2);\n      }\n      break;\n    case 34:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      for (let i = 0; i < 2; i++) {\n        push();\n        rotate(i * 90);\n        fill(colors[0]);\n        arc(-pattern_size / 2, -pattern_size / 2, d * 2 * 2, d * 2 * 2, 0, 90);\n        fill(colors[1]);\n        arc(-pattern_size / 2, -pattern_size / 2, d * 1 * 2, d * 1 * 2, 0, 90);\n        pop();\n      }\n      fill(colors[0]);\n      arc(0, pattern_size / 2, d * 2 * 2, d * 2 * 2, 180, 360);\n      circle(-pattern_size / 2, +pattern_size / 2 - d * 1.5, d);\n      circle(+pattern_size / 2, +pattern_size / 2 - d * 1.5, d);\n      fill(colors[1]);\n      arc(0, pattern_size / 2, d * 1 * 2, d * 1 * 2, 180, 360);\n      break;\n    case 35:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      for (let i = 0; i < 4; i++) {\n        push();\n        rotate(i * 90);\n        fill(colors[0]);\n        arc(-pattern_size / 2, -pattern_size / 2, d * 2 * 2, d * 2 * 2, 0, 90);\n        fill(colors[1]);\n        arc(-pattern_size / 2, -pattern_size / 2, d * 1 * 2, d * 1 * 2, 0, 90);\n        pop();\n      }\n      break;\n    case 36:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      for (let i = 0; i < 4; i++) {\n        if (i != 3) {\n          push();\n          rotate(i * 90);\n          fill(colors[0]);\n          arc(\n            -pattern_size / 2,\n            -pattern_size / 2,\n            d * 2 * 2,\n            d * 2 * 2,\n            0,\n            90\n          );\n          fill(colors[1]);\n          arc(\n            -pattern_size / 2,\n            -pattern_size / 2,\n            d * 1 * 2,\n            d * 1 * 2,\n            0,\n            90\n          );\n          pop();\n        } else {\n          push();\n          fill(colors[0]);\n          circle(-pattern_size / 2, pattern_size / 2 - d * 1.5, d);\n          circle(-pattern_size / 2 + d * 1.5, pattern_size / 2, d);\n          pop();\n        }\n      }\n      break;\n    case 37:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      n = 0;\n      for (let j = 0; j < 5; j++) {\n        for (let i = 0; i < 5; i++) {\n          let x = map(i, 0, 4, -pattern_size / 2, pattern_size / 2);\n          let y = map(j, 0, 4, -pattern_size / 2, pattern_size / 2);\n          if (n++ % 2 == 1) {\n            fill(colors[0]);\n            circle(x, y, d);\n          }\n        }\n      }\n      break;\n    case 38:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      n = 0;\n      for (let j = 0; j < 5; j++) {\n        for (let i = 0; i < 5; i++) {\n          let x = map(i, 0, 4, -pattern_size / 2, pattern_size / 2);\n          let y = map(j, 0, 4, -pattern_size / 2, pattern_size / 2);\n          if (\n            n == 7 ||\n            ((i == 0 || i == 4 || j == 0 || j == 4) && n % 2 == 1)\n          ) {\n            fill(colors[0]);\n            circle(x, y, d);\n          }\n          n++;\n        }\n      }\n      break;\n    case 39:\n      rectMode(CENTER);\n      fill(colors[1]);\n      rect(0, 0, pattern_size, pattern_size);\n      drawingContext.clip();\n      n = 0;\n      for (let j = 0; j < 5; j++) {\n        for (let i = 0; i < 5; i++) {\n          let x = map(i, 0, 4, -pattern_size / 2, pattern_size / 2);\n          let y = map(j, 0, 4, -pattern_size / 2, pattern_size / 2);\n\n          if ((i == 0 || i == 4 || j == 0 || j == 4) && n % 2 == 1) {\n            fill(colors[0]);\n            circle(x, y, d);\n          }\n          n++;\n        }\n      }\n      break;\n  }\n  pop();\n}\n\nlet colorScheme = [\n  {\n    name: \"Benedictus\",\n    colors: [\"#F27EA9\", \"#366CD9\", \"#5EADF2\", \"#636E73\", \"#F2E6D8\"],\n  },\n  {\n    name: \"Cross\",\n    colors: [\"#D962AF\", \"#58A6A6\", \"#8AA66F\", \"#F29F05\", \"#F26D6D\"],\n  },\n  {\n    name: \"Demuth\",\n    colors: [\"#222940\", \"#D98E04\", \"#F2A950\", \"#BF3E21\", \"#F2F2F2\"],\n  },\n  {\n    name: \"Hiroshige\",\n    colors: [\"#1B618C\", \"#55CCD9\", \"#F2BC57\", \"#F2DAAC\", \"#F24949\"],\n  },\n  {\n    name: \"Hokusai\",\n    colors: [\"#074A59\", \"#F2C166\", \"#F28241\", \"#F26B5E\", \"#F2F2F2\"],\n  },\n  {\n    name: \"Hokusai Blue\",\n    colors: [\"#023059\", \"#459DBF\", \"#87BF60\", \"#D9D16A\", \"#F2F2F2\"],\n  },\n  {\n    name: \"Java\",\n    colors: [\"#632973\", \"#02734A\", \"#F25C05\", \"#F29188\", \"#F2E0DF\"],\n  },\n  {\n    name: \"Kandinsky\",\n    colors: [\"#8D95A6\", \"#0A7360\", \"#F28705\", \"#D98825\", \"#F2F2F2\"],\n  },\n  {\n    name: \"Monet\",\n    colors: [\"#4146A6\", \"#063573\", \"#5EC8F2\", \"#8C4E03\", \"#D98A29\"],\n  },\n  {\n    name: \"Nizami\",\n    colors: [\"#034AA6\", \"#72B6F2\", \"#73BFB1\", \"#F2A30F\", \"#F26F63\"],\n  },\n  {\n    name: \"Renoir\",\n    colors: [\"#303E8C\", \"#F2AE2E\", \"#F28705\", \"#D91414\", \"#F2F2F2\"],\n  },\n  {\n    name: \"VanGogh\",\n    colors: [\"#424D8C\", \"#84A9BF\", \"#C1D9CE\", \"#F2B705\", \"#F25C05\"],\n  },\n  {\n    name: \"Mono\",\n    colors: [\"#D9D7D8\", \"#3B5159\", \"#5D848C\", \"#7CA2A6\", \"#262321\"],\n  },\n  {\n    name: \"RiverSide\",\n    colors: [\"#906FA6\", \"#025951\", \"#252625\", \"#D99191\", \"#F2F2F2\"],\n  },\n];\n",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by sayo\n\n### Response:\n",
    "completion": "let video;\nlet handpose;\nlet predictions = [];\nlet pg;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\timageMode(CENTER);\n\t\n\tvideo = createCapture(VIDEO, stream => {\n\t\tpg = createGraphics(video.width, video.height);\n\t\tpg.colorMode(HSB);\n\t});\n\thandpose = ml5.handpose(video);\n\thandpose.on('predict', results => {\n\t\tpredictions = results;\n\t});\n\tvideo.hide();\n}\n\nfunction draw() {\n\tbackground(20);\n\t\n\tfill(90);\n\ttextAlign(CENTER);\n\ttext('Please wait...', width / 2, height / 2);\n\t\n\tif (video.loadedmetadata && handpose.modelReady) {\n\t\timage(video, width/2, height/2);\n\t\tfor (let prediction of predictions) {\n\t\t\tlet hue = 0;\n\t\t\tfor (let finger in prediction.annotations) {\n\t\t\t\tif (finger != 'palmBase') {\n\t\t\t\t\tconst keypoint = prediction.annotations[finger][3];\n\t\t\t\t\tpg.fill(hue, 100, 100, 0.5);\n\t\t\t\t\tpg.noStroke();\n\t\t\t\t\tpaint(keypoint[0], keypoint[1]);\n\t\t\t\t\thue += 360 / 5;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\timage(pg, width/2, height/2);\n\t}\n}\n\nfunction paint(x, y) {\n\tfor (let i = 0; i < 30; i++) {\n\t\tconst X = x + randomGaussian(0, 15);\n\t\tconst Y = y + randomGaussian(0, 15);\n\t\tpg.ellipse(X, Y, 5, 5);\n\t}\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by sayo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Okazz\n\n### Response:\n",
    "completion": "let colors = ['#ffffff', '#5f9adb', '#303592', '#8f337a', '#d450a1', '#e0284e', '#004f2d', '#ffda22', '#85cb33', '#db2b39'];\nlet noiseFilter;\nlet shapes = [];\nlet count = 0;\n\nfunction setup() {\n\tcreateCanvas(900, 900);\n\tnoiseFilter = createImage(width, height);\n\tnoiseFilter.loadPixels();\n\tlet pix = noiseFilter.width * noiseFilter.height * 4;\n\tfor (let i = 0; i < pix; i += 4) {\n\t\tnoiseFilter.pixels[i] = random(255);\n\t\tnoiseFilter.pixels[i + 1] = random(255);\n\t\tnoiseFilter.pixels[i + 2] = random(255);\n\t\tnoiseFilter.pixels[i + 3] = 10;\n\t}\n\tnoiseFilter.updatePixels();\n\tlet num = int(300)\n\tfor (let i = 0; i < num; i++) {\n\t\tlet x = random(-0.1, 1.1) * width;\n\t\tlet y = random(-0.1, 1.1) * height;\n\t\tlet w = map(i, 0, num, 400, 0) * random(0.5, 1);\n\t\tlet h = map(i, 0, num, 400, 0) * random(0.5, 1);\n\t\tlet r = int(random(2));\n\t\tshapes.push(new Shape(x, y, w, h, r));\n\t}\n\tbackground(5);\n}\n\nfunction draw() {\n\tlet s = shapes[count];\n\tpush();\n\ttranslate(width / 2, height / 2);\n\ttranslate(-width / 2, -height / 2);\n\tif (s.r) drt(s.x, s.y, s.w, s.h);\n\telse mrt(s.x, s.y, s.w);\n\tpop();\n\tcount++;\n\tif (count == shapes.length - 1) {\n\t\timage(noiseFilter, 0, 0);\n\t\t// save(day() + '_' + month() + '_' + year() + '_' + hour() + '_' + minute() + '_' + second());\n\t\tnoLoop();\n\t}\n}\n\nfunction drt(x, y, w, h) {\n\tlet area = w * h;\n\tlet num = int(area * 2);\n\tlet sw = width * 0.001;\n\tlet col = color(random(colors));\n\tstrokeWeight(sw);\n\tfor (let i = 0; i < num; i++) {\n\t\tlet xx = x + random(-1, 1) * 0.5 * w;\n\t\tlet yy = y + random(-1, 1) * 0.5 * h;\n\t\tcol.setAlpha(random(255));\n\t\tstroke(col);\n\t\tpoint(xx, yy);\n\t}\n}\n\nfunction mrt(x, y, d) {\n\tlet area = pow(d / 2, 2) * PI;\n\tlet num = int(area * 2);\n\tlet sw = width * 0.001;\n\tlet col = color(random(colors));\n\n\n\tstrokeWeight(sw);\n\tfor (let i = 0; i < num; i++) {\n\t\tlet xx = x + random(-1, 1) * 0.5 * d;\n\t\tlet yy = y + random(-1, 1) * 0.5 * d;\n\t\tlet dst = dist(xx, yy, x, y);\n\t\twhile (dst > (d / 2)) {\n\t\t\txx = x + random(-1, 1) * 0.5 * d;\n\t\t\tyy = y + random(-1, 1) * 0.5 * d;\n\t\t\tdst = dist(xx, yy, x, y);\n\t\t}\n\t\tcol.setAlpha(random(255));\n\t\tstroke(col);\n\t\tpoint(xx, yy);\n\t}\n}\n\nclass Shape {\n\tconstructor(x, y, w, h, r) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.w = w;\n\t\tthis.h = h;\n\t\tthis.r = r;\n\t}\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Okazz"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by tk87, with tags generativeart,particle,noise\n\n### Response:\n",
    "completion": "const sketch = (p) => {\n    let min_width;\n\n    let particles = [];\n    \n    let N_SCALE; \n\n    let PA = [];\n    let PB = [];\n    let PC = [];\n    let PD = [];\n\n    let N = 10000;\n\n    let SEED;\n\n    let XS;\n    let YS;\n    let GX;\n    let GY;\n    p.setup = () => {\n        p.createCanvas(p.windowWidth, p.windowHeight);\n        min_width = p.min(p.width, p.height);\n\n        p.background(0);\n\n        SEED = p.random()*998244353;\n\n        p.randomSeed(SEED);\n        p.noiseSeed(SEED); \n\n        XS = p.random(1.5, 1.7);\n        YS = p.random(1.5, 1.7);\n        N_SCALE = p.random(15, 50);\n\n        for(let i=0;i<3;++i){\n            PA.push(p.random(0.1, 0.5)); \n            PB.push(p.random(0.1, 0.5)); \n            PC.push(p.random(0.1, 1)); \n            PD.push(p.random(0.1, 0.5)); \n        }\n\n        GX = 0;\n        GY = 0;\n        for(let i=0;i<N;++i){\n            particles.push(new Particle(\n                p.random(-1, 1)* XS,\n                p.random(-1, 1)* YS,\n                N_SCALE,\n                min_width / 2 * .65\n            ));\n        }\n    };\n\n    p.windowResized = () => {\n        p.resizeCanvas(p.windowWidth, p.windowHeight);\n        min_width = p.min(p.width, p.height);\n\n        particles.splice(0, particles.length);\n        p.randomSeed(SEED);\n        p.noiseSeed(SEED); \n\n        p.blendMode(p.BLEND);\n        p.background(0);\n\n        XS = p.random(1.5, 1.7);\n        YS = p.random(1.5, 1.7);\n        N_SCALE = p.random(15, 50);\n\n        for(let i=0;i<3;++i){\n            PA.push(p.random(0.1, 0.5)); \n            PB.push(p.random(0.1, 0.5)); \n            PC.push(p.random(0.1, 1)); \n            PD.push(p.random(0.1, 0.5)); \n        }\n\n        GX = 0;\n        GY = 0;\n        for(let i=0;i<N;++i){\n            particles.push(new Particle(\n                p.random(-1, 1) * XS,\n                p.random(-1, 1) * YS,\n                N_SCALE,\n                min_width / 2 * .65\n            ));\n        }\n    }\n\n\n    p.draw = () => {\n        p.blendMode(p.ADD);\n        p.push();\n        p.translate(p.width/2, p.height/2);\n        for(let i=0;i<N;++i){\n            particles[i].update();\n            particles[i].display();\n        }\n        p.pop();\n    };\n\n    p.keyPressed = () => {\n        if(p.key == 's') {\n            p.save(\"midnight_tunnel.png\");\n        }\n    }\n\n    class Particle {\n        pos;\n        velocity;\n        acceleration;\n        noise_scale;\n        color;\n        max_speed = 0.003;\n        min_speed = 0.0001;\n\n        width;\n        constructor(x, y, ns, w) {\n            this.pos = p.createVector(y, x);\n            \n            this.noise_scale = ns;\n\n            this.velocity = p.createVector(0,0);\n            this.acceleration = p.createVector(0,0);\n\n            let dt = 1- p.sqrt(y*y/YS/YS + x*x/XS/XS);\n            this.color = p.color(\n                p.int(palette(PA[0], PB[0], PC[0], PD[0], p.abs(this.pos.x)) * 255 + 510) % 255,\n                p.int(palette(PA[1], PB[1], PC[1], PD[1], p.abs(this.pos.y)) * 255 + 510) % 255,\n                p.int(palette(PA[2], PB[2], PC[2], PD[2], p.sqrt(this.pos.x*this.pos.x+this.pos.y*this.pos.y)) * 255 + 510) % 255,\n                150 - dt*140\n            );\n\n            this.width = w;\n        }\n\n        update(){\n            let po = this.trans(this.pos);\n            let nx = p.noise(p.abs(po.x)*this.noise_scale) - .5;\n            let ny = p.noise(p.abs(po.x)/(po.y)*this.noise_scale) - .5;\n            //let ny = p.noise(po.y*this.noise_scale) - .5;\n            this.acceleration = p.createVector(\n                nx,\n                ny\n            );\n\n            this.velocity.add(this.acceleration);\n            let speed = this.velocity.mag();\n            this.velocity.normalize().mult(p.max(this.min_speed, p.min(speed, this.max_speed)));\n\n            this.pos.add(this.velocity);\n            \n            this.acceleration.mult(0);\n        }\n        trans(po){\n            let sgy = po.y < 0 ? -1: 1;\n            let ret = p.createVector(\n                p.atan2((po.y-GX), (po.x-GY)) / p.PI,\n                p.sqrt(po.mag())*sgy\n            );\n            return ret;\n        }\n        display(){\n            p.strokeWeight(this.width/200);\n            p.stroke(this.color);\n\n            p.point(\n                this.pos.y * this.width,\n                this.pos.x * this.width,\n            )\n        }\n    }\n\n    function palette(a, b, c, d, x) {\n        return a + b * p.abs(p.cos(p.TWO_PI * c * x + d));\n    }\n\n};\n\nnew p5(sketch);",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by tk87, with tags generativeart,particle,noise"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "let bg;\nlet letters = \"\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u3002\u540d\u524d\u306f\u307e\u3060\u7121\u3044\u3002\u3069\u3053\u3067\u751f\u308c\u305f\u304b\u3068\u3093\u3068\u898b\u5f53\u304c\u3064\u304b\u306c\u3002\u4f55\u3067\u3082\u8584\u6697\u3044\u3058\u3081\u3058\u3081\u3057\u305f\u6240\u3067\u30cb\u30e3\u30fc\u30cb\u30e3\u30fc\u6ce3\u3044\u3066\u3044\u305f\u4e8b\u3060\u3051\u306f\u8a18\u61b6\u3057\u3066\u3044\u308b\u3002\u543e\u8f29\u306f\u3053\u3053\u3067\u59cb\u3081\u3066\u4eba\u9593\u3068\u3044\u3046\u3082\u306e\u3092\u898b\u305f\u3002\u3057\u304b\u3082\u3042\u3068\u3067\u805e\u304f\u3068\u305d\u308c\u306f\u66f8\u751f\u3068\u3044\u3046\u4eba\u9593\u4e2d\u3067\u4e00\u756a\uff5c\u7370\u60aa\u306a\u7a2e\u65cf\u3067\u3042\u3063\u305f\u305d\u3046\u3060\u3002\u3053\u306e\u66f8\u751f\u3068\u3044\u3046\u306e\u306f\u6642\u3005\u6211\u3005\u3092\u6355\u3048\u3066\u716e\u3066\u98df\u3046\u3068\u3044\u3046\u8a71\u3067\u3042\u308b\u3002\u3057\u304b\u3057\u305d\u306e\u5f53\u6642\u306f\u4f55\u3068\u3044\u3046\u8003\u3082\u306a\u304b\u3063\u305f\u304b\u3089\u5225\u6bb5\u6050\u3057\u3044\u3068\u3082\u601d\u308f\u306a\u304b\u3063\u305f\u3002\u305f\u3060\u5f7c\u306e\u638c\u306b\u8f09\u305b\u3089\u308c\u3066\u30b9\u30fc\u3068\u6301\u3061\u4e0a\u3052\u3089\u308c\u305f\u6642\u4f55\u3060\u304b\u30d5\u30ef\u30d5\u30ef\u3057\u305f\u611f\u3058\u304c\u3042\u3063\u305f\u3070\u304b\u308a\u3067\u3042\u308b\u3002\u638c\u306e\u4e0a\u3067\u5c11\u3057\u843d\u3061\u3064\u3044\u3066\u66f8\u751f\u306e\u9854\u3092\u898b\u305f\u306e\u304c\u3044\u308f\u3086\u308b\u4eba\u9593\u3068\u3044\u3046\u3082\u306e\u306e\u898b\u59cb\u3067\u3042\u308d\u3046\u3002\u3053\u306e\u6642\u5999\u306a\u3082\u306e\u3060\u3068\u601d\u3063\u305f\u611f\u3058\u304c\u4eca\u3067\u3082\u6b8b\u3063\u3066\u3044\u308b\u3002\u7b2c\u4e00\u6bdb\u3092\u3082\u3063\u3066\u88c5\u98fe\u3055\u308c\u3079\u304d\u306f\u305a\u306e\u9854\u304c\u3064\u308b\u3064\u308b\u3057\u3066\u307e\u308b\u3067\u85ac\u7f36\u3060\u3002\u305d\u306e\u5f8c\u732b\u306b\u3082\u3060\u3044\u3076\u9022\u3063\u305f\u304c\u3053\u3093\u306a\u7247\u8f2a\u306b\u306f\u4e00\u5ea6\u3082\u51fa\u4f1a\u308f\u3057\u305f\u4e8b\u304c\u306a\u3044\u3002\u306e\u307f\u306a\u3089\u305a\u9854\u306e\u771f\u4e2d\u304c\u3042\u307e\u308a\u306b\u7a81\u8d77\u3057\u3066\u3044\u308b\u3002\u305d\u3046\u3057\u3066\u305d\u306e\u7a74\u306e\u4e2d\u304b\u3089\u6642\u3005\u3077\u3046\u3077\u3046\u3068\u7159\u3092\u5439\u304f\u3002\u3069\u3046\u3082\u54bd\u305b\u307d\u304f\u3066\u5b9f\u306b\u5f31\u3063\u305f\u3002\u3053\u308c\u304c\u4eba\u9593\u306e\u98f2\u3080\u7159\u8349\u3068\u3044\u3046\u3082\u306e\u3067\u3042\u308b\u4e8b\u306f\u3088\u3046\u3084\u304f\u3053\u306e\u9803\u77e5\u3063\u305f\u3002\u3053\u306e\u66f8\u751f\u306e\u638c\u306e\u88cf\u3067\u3057\u3070\u3089\u304f\u306f\u3088\u3044\u5fc3\u6301\u306b\u5750\u3063\u3066\u304a\u3063\u305f\u304c\u3001\u3057\u3070\u3089\u304f\u3059\u308b\u3068\u975e\u5e38\u306a\u901f\u529b\u3067\u904b\u8ee2\u3057\u59cb\u3081\u305f\u3002\u66f8\u751f\u304c\u52d5\u304f\u306e\u304b\u81ea\u5206\u3060\u3051\u304c\u52d5\u304f\u306e\u304b\u5206\u3089\u306a\u3044\u304c\u7121\u6697\u306b\u773c\u304c\u5efb\u308b\u3002\u80f8\u304c\u60aa\u304f\u306a\u308b\u3002\u5230\u5e95\u52a9\u304b\u3089\u306a\u3044\u3068\u601d\u3063\u3066\u3044\u308b\u3068\u3001\u3069\u3055\u308a\u3068\u97f3\u304c\u3057\u3066\u773c\u304b\u3089\u706b\u304c\u51fa\u305f\u3002\u305d\u308c\u307e\u3067\u306f\u8a18\u61b6\u3057\u3066\u3044\u308b\u304c\u3042\u3068\u306f\u4f55\u306e\u4e8b\u3084\u3089\u3044\u304f\u3089\u8003\u3048\u51fa\u305d\u3046\u3068\u3057\u3066\u3082\u5206\u3089\u306a\u3044\u3002\";\n\nlet counter = 0;\n\nfunction setup() {\n  createCanvas(800, 800);\n  colorMode(HSB, 360, 100, 100, 100);\n  bg = createGraphics(width, height);\n  bg.colorMode(HSB, 360, 100, 100, 100);\n  bg.fill(0, 0, 0, 15);\n  for (let i = 0; i < width * height * 20 / 100; i++) {\n    let radius = sqrt(sq(width / 2) + sq(height / 2));\n    let angle = random(360);\n    let r = 1 - (random(random(random(1))));\n    let x = width / 2 + r * radius * cos(angle);\n    let y = height / 2 + r * radius * sin(angle);\n    let w = random(3);\n    let h = random(3);\n    bg.noStroke();\n    bg.ellipse(x, y, w, h);\n  }  \n}\n\nfunction draw() {\n  background(0, 0, 95);\n  image(bg,0,0);\n  separateGrid(0, 0, width);\n  frameRate(1);\n  noLoop();\n}\n\nfunction separateGrid(x, y, d) {\n  let sepNum = int(random(1, 4));\n  let w = d / sepNum;\n  for (let i = x; i < x + d - 1; i += w) {\n    for (let j = y; j < y + d - 1; j += w) {\n      if (random(100) < 90 && d > width / 15) {\n        separateGrid(i, j, w);\n      } else {\n        //rect(i, j, w, w);\n        push();\n        translate(i+w/2,j+w/2 + w * 0.1);\n        textSize(w);\n        textAlign(CENTER,CENTER);\n        text(letters[counter],0,0);\n        pop();\n        counter++;\n        if(counter > letters.length-1){\n          counter = 0;\n        }\n      }\n    }\n  }\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by reona396\n\n### Response:\n",
    "completion": "var shapes = [];\nvar frame_w = 400;\nvar frame_h = 400;\nvar vertexPoints = [];\n\nfunction setup() {\n  createCanvas(400, 400);\n\n  for (var i = 0; i < 500; i++) {\n    shapes.push(new Shape());\n  }\n\n  for (var j = 0; j < 300; j++) {\n    vertexPoints.push(new VertexPoint());\n  }\n}\n\nfunction draw() {\n\tcolorMode(RGB, 255, 255, 255, 100);\n  background(360);\n\tcolorMode(HSB, 360, 100, 100, 100);\n\n  for (var i = 0; i < shapes.length; i++) {\n    shapes[i].display();\n    shapes[i].move();\n  }\n\n  fill(0, 0, 100);\n  beginShape();\n  vertex(0, 0);\n  vertex(frame_w, 0);\n  vertex(frame_w, frame_h);\n  vertex(0, frame_h);\n  beginContour();\n  for (var j = vertexPoints.length-1; j > 0; j--) {\n    vertex(vertexPoints[j].x, vertexPoints[j].y);\n    vertexPoints[j].update();\n  }\n  endContour();\n  endShape(CLOSE);\n}\n\nfunction Shape() {\n  this.color_set = [0, 50, 180, 240];\n\n  this.x = random(-40, width + 40);\n  this.y = random(height);\n  this.speed = random(0.5, 2);\n  this.r = [];\n  this.c = this.color_set[floor(random(4))];\n  this.vertex_val = random(3, 6);\n\n  for (var i = 0; i < this.vertex_val; i++) {\n    this.r[i] = random(20);\n  }\n\n  this.move = function() {\n    this.x += this.speed;\n    if (this.x > width + 40) {\n      this.x = -40;\n    }\n  };\n\n  this.display = function() {\n    noStroke();\n    fill(this.c, 100, 100, 50);\n\n    beginShape();\n    for (var i = 0; i < this.vertex_val; i++) {\n      vertex(this.x + this.r[i] * cos(i * TWO_PI / this.vertex_val),\n        this.y + this.r[i] * sin(i * TWO_PI / this.vertex_val));\n    }\n    endShape();\n  };\n}\n\nfunction VertexPoint() {\n  this.x = random(width);\n  this.y = random(height);\n  this.next_x = this.x + random(-20, 20);\n  this.next_y = this.y + random(-20, 20);\n\n  this.easing_x = random(0.01, 0.04);\n  this.easing_y = random(0.01, 0.04);\n\n  this.update = function() {\n    this.x += (this.next_x - this.x) * this.easing_x;\n    this.y += (this.next_y - this.y) * this.easing_y;\n\n    if (floor(this.next_x) == floor(this.x) || floor(this.next_y) == floor(this.y)) {\n      this.next_x = random(width);\n      this.next_y = random(height);\n    }\n  };\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by reona396"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by SamuelYAN, with tags p5js,processing,openprocessing,code,creativecode,creativecodeart,art,artwork,artworks,generativeart,shape,codingeveryday,everyday,line,pattern,samuelyan\n\n### Response:\n",
    "completion": "// by SamuelYAN\n// more works //\n// ****** // https://twitter.com/SamuelAnn0924\n// ****** // https://www.instagram.com/samuel_yan_1990/\n\n// Chinese Window Pattern\n\nvar seed = Math.random() * 2951;\nvar mySize, margin;\nlet tile_count;\nlet colors1 = \"be132d-e81d3c-ff0000\".split(\"-\").map((a) => \"#\" + a + \"1a\");\nlet colors12 = \"be132d-e81d3c-ff0000\".split(\"-\").map((a) => \"#\" + a + \"40\");\nlet colors2 = \"93df58-91c540-1cac18\".split(\"-\").map((a) => \"#\" + a + \"1a\");\nlet colors22 = \"93df58-91c540-1cac18\".split(\"-\").map((a) => \"#\" + a + \"b3\");\nlet colors3 = \"6e97ec-3053ab-58087b\".split(\"-\").map((a) => \"#\" + a + \"80\");\nlet colors32 = \"6e97ec-3053ab-58087b\".split(\"-\").map((a) => \"#\" + a + \"00\");\nlet colors4 = \"f4d69d-ecb855-ffffc7\".split(\"-\").map((a) => \"#\" + a + \"1a\");\nlet colors42 = \"f4d69d-ecb855-ffffc7\".split(\"-\").map((a) => \"#\" + a + \"80\");\nlet colors5 = \"f998f9-9e92ff-a3eedb\".split(\"-\").map((a) => \"#\" + a + \"b3\");\nlet colors52 = \"f998f9-9e92ff-a3eedb\".split(\"-\").map((a) => \"#\" + a + \"40\");\nlet colorbg = \"ffffff\".split(\"-\").map((a) => \"#\" + a);\nlet colorbg2 = \"ffffff1a\".split(\"-\").map((a) => \"#\" + a);\nvar Windows;\nlet t = 0;\nlet color1, color2;\nlet filter, grad;\n\nfunction setup() {\n\t// pixelDensity(5);\n\ttile_count = int(random(1, 5));\n\tmySize = min(windowWidth, windowHeight);\n\tcreateCanvas(mySize, mySize);\n\trandomSeed(seed);\n\tcolor1 = random([colors1, colors2, colors3, colors4, colors5]);\n\tcolor2 = random([colors12, colors22, colors32, colors42, colors52]);\n\tmargin = 0;\n\tbackground(colorbg);\n\taddWin();\n\tfilter = new makeFilter();\n}\n\nfunction draw() {\n\trandomSeed(seed);\n\tbackground(colorbg2);\n\tfill(0);\n\tgrad = drawingContext.createLinearGradient(0, 0, 0, height);\n\tgrad.addColorStop(0, colorbg);\n\tgrad.addColorStop(1, colorbg2);\n\tdrawingContext.fillStyle = grad;\n\tnoStroke();\n\trectMode(CORNER);\n\trect(0, 0, width, height);\n\n\tpush();\n\ttranslate((width - mySize) / 2, (height - mySize) / 2);\n\tfor (let Win of Windows) {\n\t\tWin.display();\n\t}\n\tpop();\n\timage(overAllTexture, 0, 0);\n\t// noLoop();\n}\n\nfunction addWin() {\n\tWindows = [];\n\tlet w = width / tile_count;\n\tlet h = height / tile_count;\n\tfor (let i = 0; i < tile_count; i++) {\n\t\tfor (let j = 0; j < tile_count; j++) {\n\t\t\t// \u884c\u5217\n\t\t\tlet noiseW = 0;\n\t\t\tlet noiseH = 0;\n\n\t\t\tlet x = i * w + noiseW;\n\t\t\tlet y = j * h + noiseH;\n\t\t\tlet colorItem = int(random(3));\n\t\t\tif (colorItem == 0) {\n\t\t\t\tWindows.push(new CWP(x, y, w, random(colors1), random(colors12)));\n\t\t\t} else if (colorItem == 1) {\n\t\t\t\tWindows.push(new CWP(x, y, w, random(colors2), random(colors22)));\n\t\t\t} else if (colorItem == 2) {\n\t\t\t\tWindows.push(new CWP(x, y, w, random(colors3), random(colors32)));\n\t\t\t}\n\t\t}\n\t}\n}\n\n// make ChineseWindowPattern by position\nclass CWP {\n\tconstructor(x, y, w, color1, color2) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.w = w; // \u884c\u5217\n\t\tthis.h = this.w;\n\t\tthis.strWei = 0;\n\t\tthis.color1 = color1;\n\t\tthis.color2 = color2;\n\t}\n\tdisplay() {\n\t\tpush();\n\t\ttranslate(this.x + this.w / 2, this.y + this.w / 2);\n\n\t\tlet lineNum = this.w / this.strWei;\n\t\tlet space = (this.w / lineNum) * 2;\n\t\tstrokeCap(PROJECT);\n\t\tnoFill();\n\n\t\t//left-up-------------------------------------------------------------\n\t\tpush();\n\t\ttranslate(-this.w / 4, -this.h / 4);\n\t\trect(0, 0, this.w / 2, this.h / 2);\n\n\t\trectMode(CORNER);\n\t\tnoStroke();\n\t\tfill(10);\n\n\t\t//R1\n\t\tfor (let i = 0; i < int(random(2, 8)); i++) {\n\t\t\tlet move_y = i * (this.h / 8);\n\t\t\tpush();\n\t\t\ttranslate(0, move_y);\n\t\t\tgrad = drawingContext.createLinearGradient(0, -this.h / 4, 0, 0);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.75, 1), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(this.w / 8, -this.h / 4, this.w / 8, this.h / 4);\n\t\t\tpop();\n\t\t}\n\t\t//R2\n\t\tfor (let i = 0; i < int(random(2, 8)); i++) {\n\t\t\tlet move_x = i * (this.w / 8);\n\t\t\tpush();\n\t\t\ttranslate(-move_x, 0);\n\t\t\tgrad = drawingContext.createLinearGradient(this.w / 4, 0, 0, 0);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.75, 1), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(this.w / 4, this.h / 8, -this.w / 4, this.h / 8);\n\t\t\tpop();\n\t\t}\n\t\t//L1\n\t\tfor (let i = 0; i < int(random(2, 8)); i++) {\n\t\t\tlet move_x = i * (this.w / 8);\n\t\t\tpush();\n\t\t\ttranslate(move_x, 0);\n\t\t\tgrad = drawingContext.createLinearGradient(-this.w / 4, 0, 0, 0);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.75, 1), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(-this.w / 4, -this.h / 8, this.w / 4, -this.h / 8);\n\t\t\tpop();\n\t\t}\n\t\t//L2\n\t\tfor (let i = 0; i < int(random(2, 8)); i++) {\n\t\t\tlet move_y = i * (this.h / 16);\n\t\t\tpush();\n\t\t\ttranslate(0, -move_y);\n\t\t\tgrad = drawingContext.createLinearGradient(0, this.h / 4, 0, 0);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.25, 0.5), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(-this.w / 8, this.h / 4, -this.w / 8, -this.h / 4);\n\t\t\tpop();\n\t\t}\n\n\t\t//r1\n\t\tfor (let i = 0; i < int(random(2, 8)); i++) {\n\t\t\tlet move_x = i * (this.w / 32);\n\t\t\tpush();\n\t\t\ttranslate(move_x, 0);\n\t\t\tgrad = drawingContext.createLinearGradient(0, 0, this.w / 4, 0);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.25, 0.5), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(0, 0, this.w / 4, -this.h / 8);\n\t\t\tpop();\n\t\t}\n\t\t//r2\n\t\tfor (let i = 0; i < int(random(2, 8)); i++) {\n\t\t\tlet move_y = i * (this.h / 32);\n\t\t\tpush();\n\t\t\ttranslate(0, move_y);\n\t\t\tgrad = drawingContext.createLinearGradient(0, 0, 0, this.h / 4);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.25, 0.5), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(0, 0, this.w / 8, this.h / 4);\n\t\t\tpop();\n\t\t}\n\t\t//l1\n\t\tfor (let i = 0; i < int(random(12, 8)); i++) {\n\t\t\tlet move_y = i * (this.h / 32);\n\t\t\tpush();\n\t\t\ttranslate(0, -move_y);\n\t\t\tgrad = drawingContext.createLinearGradient(0, 0, 0, -this.h / 4);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.25, 0.5), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(0, 0, -this.w / 8, -this.h / 4);\n\t\t\tpop();\n\t\t}\n\t\t//l2\n\t\tfor (let i = 0; i < int(random(12, 8)); i++) {\n\t\t\tlet move_x = i * (this.w / 32);\n\t\t\tpush();\n\t\t\ttranslate(-move_x, 0);\n\t\t\tgrad = drawingContext.createLinearGradient(0, 0, -this.w / 4, 0);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.25, 0.5), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(0, 0, -this.w / 4, this.h / 8);\n\t\t\tpop();\n\t\t}\n\t\tpop();\n\n\t\t// right-up-------------------------------------------------------------\n\t\tpush();\n\t\ttranslate(this.w / 4, -this.h / 4);\n\t\trect(0, 0, this.w / 2, this.h / 2);\n\n\t\trectMode(CORNER);\n\t\tnoStroke();\n\t\tfill(10);\n\t\tfor (let i = 0; i < int(random(12, 16)); i++) {\n\t\t\tlet move_y = i * (this.h / 32);\n\t\t\tpush();\n\t\t\ttranslate(0, move_y);\n\t\t\tgrad = drawingContext.createLinearGradient(0, -this.h / 4, 0, this.h / 4);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.125, 0.25), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(-this.w / 4, -this.h / 4, this.w / 4, this.h / 2);\n\t\t\tpop();\n\t\t}\n\n\t\tfor (let i = 0; i < int(random(2, 8)); i++) {\n\t\t\tlet move_y = i * (this.h / 8);\n\t\t\tpush();\n\t\t\ttranslate(0, -move_y);\n\t\t\tgrad = drawingContext.createLinearGradient(0, this.h / 8, 0, -this.h / 4);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.2, 0.5), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(-this.w / 4, -this.h / 4, this.w / 8, (this.h / 8) * 3);\n\t\t\tpop();\n\t\t}\n\n\t\tfor (let i = 0; i < int(random(12, 6)); i++) {\n\t\t\tlet move_y = i * (this.h / 16);\n\t\t\tpush();\n\t\t\ttranslate(0, -move_y);\n\t\t\tgrad = drawingContext.createLinearGradient(0, this.h / 4, 0, -this.h / 4);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.25, 0.5), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(this.w / 4, this.h / 4, -this.w / 4, -this.h / 2);\n\t\t\tpop();\n\t\t}\n\n\t\tfor (let i = 0; i < int(random(2, 8)); i++) {\n\t\t\tlet move_y = i * (this.h / 8);\n\t\t\tpush();\n\t\t\ttranslate(0, move_y);\n\t\t\tgrad = drawingContext.createLinearGradient(0, -this.h / 8, 0, this.h / 4);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.2, 0.5), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(this.w / 4, this.h / 4, -this.w / 8, (-this.h / 8) * 3);\n\t\t\tpop();\n\t\t}\n\n\t\tpop();\n\n\t\t// left-down-------------------------------------------------------------\n\t\tpush();\n\t\ttranslate(-this.w / 4, this.h / 4);\n\t\trect(0, 0, this.w / 2, this.h / 2);\n\n\t\trectMode(CORNER);\n\t\tnoStroke();\n\t\tfill(10);\n\t\tfor (let i = 0; i < int(random(12, 6)); i++) {\n\t\t\tlet move_y = i * (this.h / 16);\n\t\t\tpush();\n\t\t\ttranslate(0, move_y);\n\t\t\tgrad = drawingContext.createLinearGradient(0, -this.h / 4, 0, this.h / 4);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.25, 0.5), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(-this.w / 4, -this.h / 4, this.w / 4, this.h / 2);\n\t\t\tpop();\n\t\t}\n\n\t\tfor (let i = 0; i < int(random(2, 8)); i++) {\n\t\t\tlet move_y = i * (this.h / 8);\n\t\t\tpush();\n\t\t\ttranslate(0, -move_y);\n\t\t\tgrad = drawingContext.createLinearGradient(0, this.h / 8, 0, -this.h / 4);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.2, 0.5), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(-this.w / 4, -this.h / 4, this.w / 8, (this.h / 8) * 3);\n\t\t\tpop();\n\t\t}\n\n\t\tfor (let i = 0; i < int(random(16, 8)); i++) {\n\t\t\tlet move_y = i * (this.h / 32);\n\t\t\tpush();\n\t\t\ttranslate(0, -move_y);\n\t\t\tgrad = drawingContext.createLinearGradient(0, this.h / 4, 0, -this.h / 4);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.125, 0.25), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(this.w / 4, this.h / 4, -this.w / 4, -this.h / 2);\n\t\t\tpop();\n\t\t}\n\n\t\tfor (let i = 0; i < int(random(2, 8)); i++) {\n\t\t\tlet move_y = i * (this.h / 8);\n\t\t\tpush();\n\t\t\ttranslate(0, move_y);\n\t\t\tgrad = drawingContext.createLinearGradient(0, -this.h / 8, 0, this.h / 4);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.2, 0.5), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(this.w / 4, this.h / 4, -this.w / 8, (-this.h / 8) * 3);\n\t\t\tpop();\n\t\t}\n\n\t\tpop();\n\n\t\t//right-down-------------------------------------------------------------\n\t\tpush();\n\t\ttranslate(this.w / 4, this.h / 4);\n\t\trect(0, 0, this.w / 2, this.h / 2);\n\n\t\trectMode(CORNER);\n\t\tnoStroke();\n\t\tfill(10);\n\n\t\t//R1\n\t\tfor (let i = 0; i < int(random(12, 6)); i++) {\n\t\t\tlet move_y = i * (this.h / 16);\n\t\t\tpush();\n\t\t\ttranslate(0, move_y);\n\t\t\tgrad = drawingContext.createLinearGradient(0, -this.h / 4, 0, 0);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.5, 1), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(this.w / 8, -this.h / 4, this.w / 8, this.h / 4);\n\t\t\tpop();\n\t\t}\n\t\t//R2\n\t\tfor (let i = 0; i < int(random(2, 8)); i++) {\n\t\t\tlet move_x = i * (this.w / 8);\n\t\t\tpush();\n\t\t\ttranslate(-move_x, 0);\n\t\t\tgrad = drawingContext.createLinearGradient(this.w / 4, 0, 0, 0);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.75, 1), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(this.w / 4, this.h / 8, -this.w / 4, this.h / 8);\n\t\t\tpop();\n\t\t}\n\t\t//L1\n\t\tfor (let i = 0; i < int(random(2, 8)); i++) {\n\t\t\tlet move_x = i * (this.w / 8);\n\t\t\tpush();\n\t\t\ttranslate(move_x, 0);\n\t\t\tgrad = drawingContext.createLinearGradient(-this.w / 4, 0, 0, 0);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.75, 1), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(-this.w / 4, -this.h / 8, this.w / 4, -this.h / 8);\n\t\t\tpop();\n\t\t}\n\t\t//L2\n\t\tfor (let i = 0; i < int(random(2, 8)); i++) {\n\t\t\tlet move_y = i * (this.h / 8);\n\t\t\tpush();\n\t\t\ttranslate(0, -move_y);\n\t\t\tgrad = drawingContext.createLinearGradient(0, this.h / 4, 0, 0);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.75, 1), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(-this.w / 8, this.h / 4, -this.w / 8, -this.h / 4);\n\t\t\tpop();\n\t\t}\n\n\t\t//r1\n\t\tfor (let i = 0; i < int(random(12, 6)); i++) {\n\t\t\tlet move_x = i * (this.w / 32);\n\t\t\tpush();\n\t\t\ttranslate(move_x, 0);\n\t\t\tgrad = drawingContext.createLinearGradient(0, 0, this.w / 4, 0);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.25, 0.5), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(0, 0, this.w / 4, -this.h / 8);\n\t\t\tpop();\n\t\t}\n\t\t//r2\n\t\tfor (let i = 0; i < int(random(12, 6)); i++) {\n\t\t\tlet move_y = i * (this.h / 32);\n\t\t\tpush();\n\t\t\ttranslate(0, move_y);\n\t\t\tgrad = drawingContext.createLinearGradient(0, 0, 0, this.h / 4);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.25, 0.5), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(0, 0, this.w / 8, this.h / 4);\n\t\t\tpop();\n\t\t}\n\t\t//l1\n\t\tfor (let i = 0; i < int(random(2, 8)); i++) {\n\t\t\tlet move_y = i * (this.h / 32);\n\t\t\tpush();\n\t\t\ttranslate(0, -move_y);\n\t\t\tgrad = drawingContext.createLinearGradient(0, 0, 0, -this.h / 4);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.25, 0.5), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(0, 0, -this.w / 8, -this.h / 4);\n\t\t\tpop();\n\t\t}\n\t\t//l2\n\t\tfor (let i = 0; i < int(random(2, 8)); i++) {\n\t\t\tlet move_x = i * (this.w / 32);\n\t\t\tpush();\n\t\t\ttranslate(-move_x, 0);\n\t\t\tgrad = drawingContext.createLinearGradient(0, 0, -this.w / 4, 0);\n\t\t\tgrad.addColorStop(0, random(color1));\n\t\t\tgrad.addColorStop(random(0.25, 0.5), random(color2));\n\t\t\tdrawingContext.fillStyle = grad;\n\t\t\trect(0, 0, -this.w / 4, this.h / 8);\n\t\t\tpop();\n\t\t}\n\t\tpop();\n\n\t\tpop();\n\t}\n}\n\nfunction makeFilter() {\n\t// noise\u306e\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u3064\u304f\u308b\n\tcolorMode(HSB, 360, 100, 100, 100);\n\t// drawingContext.shadowColor = color(0, 0, 95, 5);\n\toverAllTexture = createGraphics(width, height);\n\toverAllTexture.loadPixels();\n\tfor (var i = 0; i < width; i++) {\n\t\tfor (var j = 0; j < height; j++) {\n\t\t\toverAllTexture.set(\n\t\t\t\ti,\n\t\t\t\tj,\n\t\t\t\tcolor(0, 0, 99, noise(i / 5, j / 5, (i * j) / 300) * random(20, 5))\n\t\t\t);\n\t\t}\n\t}\n\toverAllTexture.updatePixels();\n}\n\nfunction keyTyped() {\n\tif (key === \"s\" || key === \"S\") {\n\t\t//noLoop();\n\t\tsaveCanvas(\"Gradient Pattern_220121\", \"png\");\n\t}\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by SamuelYAN, with tags p5js,processing,openprocessing,code,creativecode,creativecodeart,art,artwork,artworks,generativeart,shape,codingeveryday,everyday,line,pattern,samuelyan"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "let img;\nlet noiseScaleX = 100;\nlet noiseScaleY = 100;\n\nfunction preload() {\n  let num = int(random(1000));\n  img = loadImage(\"https://loremflickr.com/800/800?random=\" + num);\n}\n\nfunction setup() {\n  createCanvas(800, 800);\n  let cells = int(random(5, 30));\n  let w = width / cells;\n  let h = height / cells;\n  for (let j = 0; j < cells; j++) {\n    for (let i = 0; i < cells; i++) {\n      let x = i * w;\n      let y = j * h;\n      let trim = img.get(x, y, w, h);\n      //image(trim,x,y);\n      if (random(100) < 50) {\n        let ny = y + noise(x / noiseScaleX, y / noiseScaleY) * h;\n        for (let yy = y; yy < ny; yy++) {\n          image(trim, x, yy);\n        }\n      } else {\n        let nx = x + noise(x / noiseScaleX, y / noiseScaleY) * w;\n        for (let xx = x; xx < nx; xx++) {\n          image(trim, xx, y);\n        }\n      }\n    }\n  }\n  noLoop();\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Sam Darlow\n\n### Response:\n",
    "completion": "// \u30dd\u30a4\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u3092\u53ec\u559a\u3057\u307e\u3059\u3002\n// \u8853\u5f0f\u69cb\u7bc9\n\n// \u30ce\u30a4\u30ba\u30d5\u30ed\u30fc\u3084\u3063\u3066\u307f\u308b\n// \u30ce\u30a4\u30ba\u306b\u5f93\u3063\u3066\u6d41\u308c\u308b\n// \u9032\u884c\u65b9\u5411\u306f\u30ce\u30a4\u30ba\u306e2PI\u500d\n// \u4e00\u5ea6\u306b\u9032\u3080\u8ddd\u96e2\u306f0.2\u3067, \u3082\u3068\u3044\u53ef\u5909\u3067\n// \u3068\u3044\u3046\u304b_SIZE/600\u306b\u3057\u3088\u3046\u305d\u3046\u3057\u3088\u3046\n// \u3093\u3067\u30b9\u30b1\u30fc\u30eb\u306b\u3064\u3044\u3066\u306f\u30fb\u30fb_SIZE\u3067\u5272\u308c\u3070\u3044\u3044\u3088\u306d\u3002\u305d\u3046\u3057\u3088\u3046\u3002\n// \u3067\u3001\u30dd\u30a4\u30f3\u30c8\u30b5\u30a4\u30ba\u3082\u3001_SIZE/1200\u306b\u3059\u308b\u304b\u3053\u3063\u3061\u306f\u3002\n\n// \u4fc2\u6570\u5909\u3048\u308b\u3068\u9762\u767d\u3044\u306e\u30671\uff5e8\u3067\u53ef\u5909\u306b\u3059\u308b\n\n// \u3055\u3066\u3068\n// \u30c6\u30b9\u30c8\u3082OK\u307f\u305f\u3044\u3060\u3057\u7b49\u9ad8\u7dda\u3044\u3063\u3066\u307f\u308b\u304b\u30fb\u30fb\uff08\u5225\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\uff09\n// \u3060\u3063\u3066\u30ce\u30a4\u30ba\u3092\u65b9\u5411\u306b\u5909\u63db\u3059\u308b\u3060\u3051\u3058\u3083\u7269\u8db3\u308a\u306a\u3044\u3057\n// \u305f\u3060\u307e\u3042\u305d\u308c\u3067\u3082\u304d\u308c\u3044\u306a\u306e\u3088\u306d\u30fb\u30fb\n\n// \u7403\u9762\u4f5c\u308d\u3046\u3068\u3057\u305f\u3051\u3069\u5931\u6557\u3002\n\n// \u53c2\u8003\uff1ahttps://openprocessing.org/sketch/157576\n\nlet count = 0;\nlet _SIZE;\nlet _POINT_SIZE;\nlet _SPEED;\nlet _NOISE_SCALE;\nlet _POINT_NUM; // \u4eca\u56de\u306f\u30b5\u30a4\u30ba\u304b\u3089\u6c7a\u3081\u308b\u30021.6\u500d\u3067\u3044\u304f\u3002\u4e0a\u4e0b\u306e\u30fb\u30fb\u3046\u3093\u3002\n// \u8272\u306f\u30ce\u30a4\u30ba\u3067\u3002\nlet _NOISE_SEED; // \u30ce\u30a4\u30ba\u30b7\u30fc\u30c9\nlet _X_DIFF; // x\u306e\u305a\u3089\u3057\nlet _Y_DIFF; // y\u306e\u305a\u3089\u3057\u30fb\u30fb\u305a\u3089\u3055\u306a\u3044\u3068\u5bfe\u79f0\u306b\u306a\u3063\u3061\u3083\u3046\u3063\u307d\u3044\nlet _COEFF; // noise()*TAU\u306b\u639b\u3051\u308b\u4fc2\u6570(1\uff5e8)\nconst LIFE_COUNT_MAX = 300;\nlet positions ;\nlet lifes;\n// \u7b2c3\u5f15\u6570\u3067\u8272\u3092\u6c7a\u3081\u308b\u3001\u8272\u306f\u9069\u5f53\u306bRGB\u306e\u3069\u308c\u304b\u3001\u30e9\u30f3\u30c0\u30e0\u3067\u6700\u521d\u306b\u6c7a\u307e\u308b\u3001\u305d\u308c\u00b110\u304f\u3089\u3044\u3067\u3002\u6574\u6570\u3067\u8db3\u3059\u3002\n// \u4eca\u56de\u306f\u65b9\u5411\u306f\u30d1\u30b9\u3067\u3002\u6574\u6570\u3060\u3051\u9001\u308b\u611f\u3058\u30fb\u30fb\u3066\u304b\u3082\u3046\u3044\u3063\u305dHSB\u306e\u5024\u3060\u3051\u9001\u308d\u3046\u3002sat\u5024\u306f\u30ab\u30a6\u30f3\u30c8\u3067\u8272\u4ed8\u3051\u305f\u308a\u6d88\u3057\u305f\u308a\u3059\u308b\u611f\u3058\u3067\u3002\n// \u9ed2\u80cc\u666f\u3067bg0,9\u4f7f\u3046\u3002\n\nlet _gl, gl;\nlet pBuf;\nlet myPointShader;\nlet vsPoint =\n\"precision mediump float;\" +\n// \u2191\u3053\u308c\u304c\u306a\u3044\u3068\u4e21\u65b9\u3067uCount\u4f7f\u3048\u306a\u304f\u3066\u30a8\u30e9\u30fc\u306b\u306a\u308b\n\"attribute vec3 aPosition;\" +\n\"uniform float uPointSize;\" +\n\"uniform float uCount;\" +\n\"const float TAU = 6.28318;\" +\n\"const float PI = 3.14159;\"+\n\"varying float vStrokeWeight;\" +\n\"varying vec3 vPosition;\" +\n\"varying vec4 vMaterialColor;\" +\n\"varying float vHue;\" +\n\"uniform mat4 uModelViewMatrix;\" +\n\"uniform mat4 uProjectionMatrix;\" +\n\"void main() {\" +\n\"  vec3 p = aPosition;\" +\n\n// \u70b9\u306e\u4f4d\u7f6e\u3092\u3044\u3058\u308b\u30d1\u30fc\u30c8\n\"  vHue = p.z;\" + // \u8272\u60c5\u5831.0\uff5e1\u3067\u3002\n\"  p.z = 0.0;\" + // \u8272\u60c5\u5831\u53d6\u308a\u51fa\u3057\u305f\u3089\u6d88\u3059\u3002\n\n// \u8a2d\u5b9a\n\"  vec4 positionVec4 =  vec4(p, 1.0);\" +\n\n\"  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\" +\n\n// \u30b5\u30a4\u30ba\u3092\u3044\u3058\u308b\n\"  gl_PointSize = uPointSize;\" +\n\"  vStrokeWeight = uPointSize;\" +\n\"}\";\n\nlet fsPoint =\n\"precision mediump float;\" +\n\"precision mediump int;\" +\n\"uniform vec4 uMaterialColor;\" +\n\"uniform float uCount;\" +\n\"const float TAU = 6.28318;\" +\n\"varying float vStrokeWeight;\" +\n\"varying vec3 vPosition;\" +\n\"varying float vHue;\" +\n// getRGB,\u53c2\u4e0a\uff01\n\"vec3 getRGB(float h, float s, float b){\" +\n\"    vec3 c = vec3(h, s, b);\" +\n\"    vec3 rgb = clamp(abs(mod(c.x * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\" +\n\"    rgb = rgb * rgb * (3.0 - 2.0 * rgb);\" +\n\"    return c.z * mix(vec3(1.0), rgb, c.y);\" +\n\"}\" +\n\n\"void main(){\" +\n\"  float mask = 0.0;\" +\n\n// make a circular mask using the gl_PointCoord (goes from 0 - 1 on a point)\n// might be able to get a nicer edge on big strokeweights with smoothstep but slightly less performant\n\n\"  mask = step(0.98, length(gl_PointCoord * 2.0 - 1.0));\" +\n\n// if strokeWeight is 1 or less lets just draw a square\n// this prevents weird artifacting from carving circles when our points are really small\n// if strokeWeight is larger than 1, we just use it as is\n\n\"  mask = mix(0.0, mask, clamp(floor(vStrokeWeight - 0.5),0.0,1.0));\" +\n\n// throw away the borders of the mask\n// otherwise we get weird alpha blending issues\n\n\"  if(mask > 0.98){\" +\n\"    discard;\" +\n\"  }\" +\n\n// \u8272\u3092\u3044\u3058\u308b\u30d1\u30fc\u30c8\n// \u60c5\u5831\u4f7f\u308f\u306a\u3044\u306e\u52ff\u4f53\u306a\u3044\u6c17\u3082\u3059\u308b\u3051\u3069\u4eca\u56de\u306f\u6642\u9593\u306a\u3044\u306e\u3067\u30b7\u30f3\u30d7\u30eb\u306b\u3002\n// blt\u3044\u3058\u308b\u3068\u7b49\u9ad8\u7dda\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u3084\u3059\u3044\n\"  float hue = vHue;\" +\n\"  float sat = 0.5 + 0.5 * cos(TAU * uCount * (0.01 + vHue * 0.002));\" +\n\"  float blt = (abs(fract(vHue * 20.0)-0.5) < 0.05 ? 1.0 : 0.0);\" +\n\"  blt = 1.0 - pow(0.5 + 0.5 * sin(vHue * 20.0 * TAU), 4.0);\" +\n\"  vec3 col = getRGB(hue, sat, blt);\" +\n\"  gl_FragColor = vec4(col, 1.0);\" +\n\"}\";\n\nlet bg;\n\nfunction setup(){\n\t_gl = createCanvas(windowWidth, windowHeight, WEBGL);\n\tbg = createGraphics(width, height);\n\t_SIZE = min(width, height);\n\t_POINT_SIZE = _SIZE / 300;\n\t_SPEED = _SIZE / 300;\n\t_NOISE_SCALE = _SIZE * 0.8;\n\t_POINT_NUM = floor(_SIZE * 3.5);\n\tpixelDensity(1);\n\tpositions = new Float32Array(_POINT_NUM * 3); // \u305f\u3068\u3048\u3070600\u306a\u3089960\u304f\u3089\u3044\u3002\n\tlifes = new Float32Array(_POINT_NUM); // 600\u30ab\u30a6\u30f3\u30c8\u3067\u79fb\u52d5\u3059\u308b\u611f\u3058\u3067\n\tgl = _gl.GL;\n\tmyPointShader = createShader(vsPoint, fsPoint);\n\tmyPointShader.isPointShader = () => true;\n\t_gl.userPointShader = myPointShader;\n\t\n\tinitialize(); // \u521d\u671f\u5316\u51e6\u7406\n\tbackground(0);\n}\n\nfunction initialize(){\n\t//clear();\n\t//bg.clear();\n\tbackground(0);\n\t_COEFF = 1.0 + 7.0 * Math.random(); // \u4fc2\u6570\n\t_NOISE_SEED = Math.random() * 9999; // \u30b7\u30fc\u30c9\u5024\n\t_X_DIFF = max(width, height) * (1 + Math.random());\n\t_Y_DIFF = max(width, height) * (1 + Math.random());\n\tfor(let i = 0; i < _POINT_NUM; i++){\n\t\tpositions[i * 3] = (Math.random() - 0.5) * width;\n\t\tpositions[i * 3 + 1] = (Math.random() - 0.5) * height;\n\t\tpositions[i * 3 + 2] = 0;\n\t\tlifes[i] = LIFE_COUNT_MAX; // \u5bff\u547d\u3002\u753b\u9762\u5916\u306b\u51fa\u305f\u5834\u5408\u306f\u30ab\u30a6\u30f3\u30c8\u306b\u3088\u3089\u305a\u30ea\u30bb\u30c3\u30c8\u3002\n\t}\n}\n\n// \u30d1\u30bf\u30fc\u30f3\u30c1\u30a7\u30f3\u30b8\u306f\u5168\u4f53\u3092\u30af\u30ea\u30a2\u3057\u3066\n// \u3082\u3061\u308d\u3093\u80cc\u666f\u3082\u30af\u30ea\u30a2\u3057\u3066\n// positions\u3082\u518d\u8a2d\u5b9a\u3057\u3066\n// _MAIN_COLOR\u3068_COEFF\u3092\u518d\u8a2d\u5b9a\u3059\u308b\nfunction draw(){\n\tlet start = millis();\n  //background(0);\n\t//image(bg, -width * 0.5, -height * 0.5);\n\tresetShader();\n\tstroke(0);\n\tstrokeWeight(_POINT_SIZE);\n\tnoFill();\n\tshader(myPointShader);\n\tmyPointShader.setUniform(\"uCount\", count);\n\tmyPoints(_POINT_NUM);\n\tcount++;\n\t//bg.image(_gl, 0, 0);\n\t//bg.background(0, 6);\n\tlet end = millis();\n\t//if(count % 60 == 0){ console.log((end-start)*60/999); }\n}\n\n// \u70b9\u3092\u7528\u610f\u3059\u308b\u3060\u3051\uff01\nfunction myPoints(num){\n\tconst gId = `myPoints|${num}`;\n  if(!_gl.geometryInHash(gId)){\n    const _geom = new p5.Geometry();\n    let v = createVector();\n    for(let i = 0; i < num; i++){\n      _geom.vertices.push(v.set(positions[i * 3], positions[i * 3 + 1], positions[i * 3 + 2]).copy());\n    }\n    pBuf = _gl.createBuffers(gId, _geom);\n  }\n\tmyDrawPoints();\n}\n\n// \u3055\u3066\u3068\u3002\u30e1\u30a4\u30f3\u30c7\u30a3\u30c3\u30b7\u30e5\u3002\nfunction myDrawPoints(){\n  _gl._setPointUniforms(myPointShader);\n\n  _gl._bindBuffer(_gl.immediateMode.buffers.point, gl.ARRAY_BUFFER, _gl._vToNArray(pBuf.model.vertices), Float32Array, gl.DYNAMIC_DRAW);\n  \n  myPointShader.enableAttrib(myPointShader.attributes.aPosition, 3);\n\n\tsetPositions();\n\tgl.bufferSubData(gl.ARRAY_BUFFER, 0, positions);\n\n  gl.drawArrays(gl.Points, 0, pBuf.model.vertices.length);\n  myPointShader.unbindShader();\n}\n\n// \u571f\u53f0\u304c\u4e00\u5fdc\u3067\u304d\u305f\u306e\u3067\n// \u30ed\u30b8\u30c3\u30af\n// \u307e\u305a\u30ce\u30a4\u30ba\u3092\u8a08\u7b97\u3057\u3066\n// \u305d\u308c\u306bTAU\u3092\u639b\u3051\u3066\u65b9\u5411\u3068\u3057\n// \u30b9\u30d4\u30fc\u30c9\u3092\u8db3\u3059\n// \u4ee5\u4e0a\u3002\u305d\u308c\u3060\u3051\u3002\n// \u753b\u9762\u5916\u306b\u51fa\u305f\u3089\u518d\u914d\u7f6e\u3059\u308b\u3002\n// \u3044\u3051\u308b\u304b\uff1f\uff1f\n\n// \u5909\u3048\u308b\u306e\u306f\u3053\u3053\u3060\u3051\u30fb\u30fb\u306e\u306f\u305a\uff08\u30ce\u30a4\u30ba\u3067\u7740\u8272\u3059\u308b\u306a\u3089\u5225\u3060\u3051\u3069\uff09\nfunction setPositions(){\n\tlet x, y, n, dx, dy, direction, u, v;\n\tfor(let i = 0; i < _POINT_NUM; i++){\n\t\tx = positions[i * 3];\n\t\ty = positions[i * 3 + 1];\n\t\tn = noise((x + _X_DIFF) / _NOISE_SCALE, (y + _Y_DIFF) / _NOISE_SCALE, _NOISE_SEED);\n\t\tdx = noise((x + _X_DIFF + 1) / _NOISE_SCALE, (y + _Y_DIFF) / _NOISE_SCALE, _NOISE_SEED) - n;\n\t\tdy = noise((x + _X_DIFF) / _NOISE_SCALE, (y + _Y_DIFF + 1) / _NOISE_SCALE, _NOISE_SEED) - n;\n\t\tdirection = atan2(dx, -dy);\n\t\tu = _SPEED * cos(direction);\n\t\tv = _SPEED * sin(direction);\n\t\tif(abs(x + u) > width * 0.5 || abs(y + v) > height * 0.5){\n\t\t\tx = width * (Math.random() - 0.5);\n\t\t\ty = height * (Math.random() - 0.5);\n\t\t\tlifes[i] = LIFE_COUNT_MAX;\n\t\t}else{\n\t\t\tx += u;\n\t\t\ty += v;\n\t\t}\n\t\tlifes[i]--;\n\t\tif(lifes[i] === 0){\n\t\t\tx = width * (Math.random() - 0.5);\n\t\t\ty = height * (Math.random() - 0.5);\n\t\t\tlifes[i] = LIFE_COUNT_MAX;\n\t\t}\n\t\tpositions[i * 3] = x;\n\t\tpositions[i * 3 + 1] = y;\n\t\tpositions[i * 3 + 2] = n * 2.0;\n\t}\n}\n\nfunction mouseClicked(){\n\tinitialize();\n}\n",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Sam Darlow"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "let url = [\n\t// \"https://coolors.co/264653-2a9d8f-e9c46a-f4a261-e76f51\",\n\t// \"https://coolors.co/001219-005f73-0a9396-94d2bd-e9d8a6-ee9b00-ca6702-bb3e03-ae2012-9b2226\",\n\t\"https://coolors.co/9b5de5-f15bb5-fee440-00bbf9-00f5d4\",\n];\nlet palette;\nlet noiseGra;\nlet sw;\n\nfunction setup() {\n\tcreateCanvas(800, 800);\n\tcolorMode(HSB, 360, 100, 100, 100);\n\tangleMode(DEGREES);\n\n\t//\u30ce\u30a4\u30ba\u753b\u50cf\u3092\u4f5c\u308b\n\tnoiseGra = createGraphics(width, height);\n\tnoiseGra.noStroke();\n\tnoiseGra.fill(255, 15 / 100 * 255);\n\tfor (let i = 0; i < width * height * 0.05; i++) {\n\t\tlet x = random(width);\n\t\tlet y = random(height);\n\t\tlet dia = noise(x * 0.01, y * 0.01) * 1 + 1; //\u30ce\u30a4\u30ba\u306e\u5024\u3067\u5186\u306e\u5927\u304d\u3055\u3092\n\t\tnoiseGra.ellipse(x, y, dia, dia);\n\t}\n}\n\nfunction draw() {\n\tclear();\n\tpalette = createPalette(random(url), 100);\n\t// let n = int(random(palette.length));\n\t// let c = palette[n];\n\t// c.setAlpha(100);\n\n\t// palette.splice(n, 1);\n\tbackground(0, 0, 0);\n\tblendMode(ADD);\n\n\tlet cells = int(random(1, 6));\n\tsw = map(cells, 1, 5, 5,1);\n\tlet offset = width / 20;\n\tlet margin = offset / 1.5;\n\tlet d = (width - offset * 2 - margin * (cells - 1)) / cells;\n\n\tfor (let j = 0; j < cells; j++) {\n\t\tfor (let i = 0; i < cells; i++) {\n\t\t\tlet xMin = offset + i * (d + margin);\n\t\t\tlet yMin = offset + j * (d + margin);\n\t\t\tlet xMax = xMin + d;\n\t\t\tlet yMax = yMin + d;\n\t\t\tdrawSepRect(xMin, yMin, xMax, yMax);\n\t\t}\n\t}\n\n\timage(noiseGra, 0, 0);\n\n\tframeRate(1 / 2);\n}\n\nfunction drawSepRect(xMin, yMin, xMax, yMax) {\n\tlet w = (xMax - xMin);\n\tlet h = (yMax - yMin);\n\tpush();\n\ttranslate(xMin + w / 2, yMin + h / 2);\n\tscale(random() > 0.5 ? -1 : 1,\n\t\trandom() > 0.5 ? -1 : 1\n\t);\n\tscale(0.85);\n\t// let rotate_num = int(random(4)) * 360 / 4;\n\t// if (rotate_num / 90 % 2 == 1) {\n\t//   let tmp = w;\n\t//   w = h;\n\t//   h = tmp;\n\t// }\n\t// rotate(rotate_num);\n\ttranslate(-w / 2, -h / 2);\n\tlet x = 0;\n\tlet y = 0;\n\tlet yStep, xStep;\n\n\twhile (y < h) {\n\t\tyStep = int(random(h / 3));\n\t\tif (y + yStep > h) yStep = h - y;\n\t\tx = 0;\n\t\twhile (x < w / 2) {\n\t\t\txStep = int(random(w / 2));\n\t\t\tif (x + xStep > w / 2) xStep = w / 2 - x;\n\t\t\t// stroke(0, 0, 50);\n\t\t\tnoStroke();\n\t\t\tlet shape_num = int(random(6));\n\t\t\tlet sep = int(random(1, 5));\n\t\t\tdrawingContext.shadowBlur = max(w, h) / 30;\n\t\t\tdrawingContext.shadowColor = color(random(palette));\n\t\t\tellipseMode(CENTER);\n\t\t\trectMode(CENTER);\n\t\t\tlet m = random(0.5, 10);\n\t\t\tif (min(xStep, yStep) > w / 40) {\n\t\t\t\tlet angle = random(90, 270);\n\t\t\t\tlet counter_angle = angle > 180 ? angle + abs(270 - angle) * 2 : angle - abs(angle - 90) * 2;\n\t\t\t\tlet shear_x = random(15/2) * (random() > 0.5 ? -1:1);\n\t\t\t\tlet shear_y = random(15/2) * (random() > 0.5 ? -1:1);\n\t\t\t\tlet colors = shuffle(palette.concat());\n\t\t\t\tpush();\n\t\t\t\ttranslate(x + xStep / 2, y + yStep / 2);\n\t\t\t\tlet t = 0;\n\t\t\t\tlet v = 0;\n\t\t\t\tfor (let i = 1.3; i > 0; i -= 1 / sep) {\n\t\t\t\t\tpush();\n\t\t\t\t\tscale(i);\n\t\t\t\t\tstrokeWeight(1 / i * sw);\n\t\t\t\t\tshearX(shear_x);\n\t\t\t\t\tshearY(shear_y);\n\t\t\t\t\trotate(angle);\n\t\t\t\t\ttranslate(-xStep / 2, -yStep / 2);\n\t\t\t\t\tstroke(colors[(t + v) % colors.length]);\n\t\t\t\t\tnoFill();\n\t\t\t\t\tdrawRandomShape(0, 0, xStep, yStep, shape_num, m);\n\t\t\t\t\tv++;\n\t\t\t\t\tpop();\n\t\t\t\t}\n\t\t\t\tpop();\n\n\t\t\t\tpush();\n\t\t\t\ttranslate(w - x - xStep + xStep / 2, y + yStep / 2);\n\t\t\t\tscale(-1, 1);\n\t\t\t\tv = 0;\n\t\t\t\tfor (let i = 1.3; i > 0; i -= 1 / sep) {\n\t\t\t\t\tpush();\n\t\t\t\t\tscale(i);\n\t\t\t\t\tstrokeWeight(1 / i * sw);\n\t\t\t\t\tshearX(shear_x);\n\t\t\t\t\tshearY(shear_y);\n\t\t\t\t\trotate(angle);\n\t\t\t\t\ttranslate(-xStep / 2, -yStep / 2);\n\t\t\t\t\tstroke(colors[[t + v] % colors.length]);\n\t\t\t\t\tnoFill();\n\t\t\t\t\tdrawRandomShape(0, 0, xStep, yStep, shape_num, m);\n\t\t\t\t\tv++;\n\t\t\t\t\tpop();\n\t\t\t\t}\n\t\t\t\tpop();\n\t\t\t}\n\t\t\tx += xStep;\n\t\t}\n\t\ty += yStep;\n\t}\n\tpop();\n}\n\nfunction drawRandomShape(x, y, w, h, shape_num = int(random(6)), m) {\n\tswitch (shape_num) {\n\t\tcase 0:\n\t\t\tellipse(x + w / 2, y + h / 2, w, h);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tarc(x, y, w * 2, h * 2, 0, 90, PIE);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tquad(x, y, x + w / 2, y, x + w, y + h, x + w / 2, y + h);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tcircle(x + w / 2, y + h / 2, min(w, h));\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\trect(x, y, w, h, max(w, h));\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\ttriangle(x, y, x + w, y + h, x + w, y);\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tdrawSuperEllipes(x + w / 2, y + h / 2, w, h, m);\n\t\t\tbreak;\n\t}\n}\n\nfunction createPalette(_url, percent = 100) {\n\tlet slash_index = _url.lastIndexOf('/');\n\tlet pallate_str = _url.slice(slash_index + 1);\n\tlet arr = pallate_str.split('-');\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tarr[i] = color('#' + arr[i] + hex(int(percent / 100 * 255), 2));\n\t}\n\treturn arr;\n}\n\nfunction drawSuperEllipes(x, y, w, h, n) {\n\tpush();\n\ttranslate(x, y);\n\tlet na = 2 / n;\n\tbeginShape();\n\tfor (let angle = 0; angle < 360; angle += 2) {\n\t\tlet x = pow(abs(cos(angle)), na) * w / 2 * sgn(cos(angle));\n\t\tlet y = pow(abs(sin(angle)), na) * h / 2 * sgn(sin(angle));\n\t\tvertex(x, y);\n\t}\n\tendShape(CLOSE);\n\tpop();\n}\n\nfunction sgn(val) {\n\tif (val == 0) {\n\t\treturn 0;\n\t}\n\treturn val / abs(val);\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by anthony, with tags slider,createVector,line.\n\n### Response:\n",
    "completion": "let sliderA, sliderB, sliderN;\n\nfunction setup() {\n  createCanvas(1112, 834);\n  colorMode(HSB, 255);\n  sliderA = createSlider(-20, 20, 11, 1);\n  sliderA.position(40, 10);\n  sliderA.style(\"width\", \"200px\");\n  \n  sliderB = createSlider(-20, 20, 4, 1);\n  sliderB.position(40, 40);\n  sliderB.style(\"width\", \"200px\");\n  \n  sliderN = createSlider(1, 1000, 400, 1);\n  sliderN.position(40, 70);\n  sliderN.style(\"width\", \"200px\");\n}\n\nfunction draw() {\n  background(255);\n  noStroke();\n  var A = sliderA.value();\n  text(\"A = \" + str(A), 10, 15);\n  \n  var B = sliderB.value();\n  text(\"B = \" + str(B), 10, 45);\n  \n  var N = sliderN.value();\n  text(\"N = \" + str(N), 10, 75);\n\n  for (var i = 0; i < N; i++) {\n    var A1 = map((A * i) % N, 0, N, 0, TWO_PI);\n    var A2 = map((B * i) % N, 0, N, 0, TWO_PI);\n\n    var smallerDim = min(width, height);\n\n    var P1 = createVector(\n      width / 2 + (smallerDim / 2.2) * cos(A1),\n      height / 2 + (smallerDim / 2.2) * sin(A1)\n    );\n    var P2 = createVector(\n      width / 2 + (smallerDim / 2.2) * cos(A2),\n      height / 2 + (smallerDim / 2.2) * sin(A2)\n    );\n\t\tstroke(i/N * 255, 255, 230);\n    line(P1.x, P1.y, P2.x, P2.y);\n  }\n}\n\n// save jpg\nlet lapse = 0;    // mouse timer\nfunction mousePressed(){\n  // prevents mouse press from registering twice\n  if (millis() - lapse > 400 && mouseX > 200 && mouseY > 120){\n    save(\"img_\" + month() + '-' + day() + '_' + hour() + '-' + minute() + '-' + second() + \".jpg\");\n    lapse = millis();\n  }\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by anthony, with tags slider,createVector,line."
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by LzzzzZ, with tags 3d,box,noise\n\n### Response:\n",
    "completion": "let s = 0.25;\nlet o = 0;\nlet ui = {\n\tmaxSize: 85,\n\tboxesX: 10,\n\tboxesY: 20,\n\tboxesZ: 10\n}\nlet gui;\n\nsetup = _ => {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL);\n\tgui = new dat.gui.GUI();\n\t// gui.add(ui, 'shading', {\n\t// \tshaded: 0,\n\t// \twhite: 1,\n\t// \t\"lines only\": 2,\n\t// \tinverted: 3\n\t// });\n\tgui.add(ui, 'maxSize', 10, 200).step(1);\n\tgui.add(ui, 'boxesX', 1, 20).step(1);\n\tgui.add(ui, 'boxesY', 1, 20).step(1);\n\tgui.add(ui, 'boxesZ', 1, 20).step(1);\n}\n\ndraw = _ => {\n\torbitControl();\n\tbackground(0);\n\trotateY(o / 8);\n\tfor (i = 0; i < ui.boxesX; i++) {\n\t\tfor (j = 0; j < ui.boxesY; j++) {\n\t\t\tfor (k = 0; k < ui.boxesZ; k++) {\n\t\t\t\tpush();\n\t\t\t\ttranslate(i * 20 - 90, j * 20 - 180, k * 20 - 90);\n\t\t\t\tlet n = (noise(i * s, j * s + o, k * s) - 0.5);\n\t\t\t\tn = n > 0 ? n * ui.maxSize : 0;\n\n\t\t\t\t// Add sparks\n\t\t\t\tif (n > 4) {\n\t\t\t\t\tnoStroke();\n\t\t\t\t\tfill(n * 10);\n\t\t\t\t}\n\t\t\t\tstroke(n * 12);\n\t\t\t\tpop(box(n));\n\t\t\t}\n\t\t}\n\t}\n\to += 0.02;\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by LzzzzZ, with tags 3d,box,noise"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Naoki Tsutae, with tags visualization\n\n### Response:\n",
    "completion": "const num=20\nconst snakeLength=20\nlet viewAngle=0\nlet snakes\nlet pg\nconst backgroundColour='lightcyan'\n\nsetup=()=>{\n createCanvas(800,800)\n pg=createGraphics(width,height)\n pg.colorMode(HSB,num)\n snakes=new Snakes()\n}\n\nclass Snakes{\n  constructor(){\n    this.snakes=[]\n    for(let i=num;i--;){\n      this.snakes[i]=new Snake(i)\n\t}\n  }\n  show(){\n    for(const snake of this.snakes){\n      snake.show()\n    }\n  }\n  update(){\n    this.snakes.forEach((snake,index)=>\n      snake.update(index)\n    )\n  }\n  getLeaderAngle(){\n    return this.snakes[0].getAngle()\n  }\n  getLeaderPosition(){\n    return this.snakes[0].getPosition()\n  }\n  collision(i,x,y){\n   let flg=true\n   for(let j=i;j--;){\n     const [X,Y]=this.snakes[j].getPosition()\n     if(dist(x,y,X,Y)<100){flg=false;break}\n   }\n   return flg \n  }\n}\n\nclass Snake{\n  constructor(i){\n    this.noiseIndex=random(100)\n    this.colour=[i,num,num]\n    this.body=[]\n    \n    const v=[random(width),random(height)]\n    for(let i=snakeLength;i--;){\n     this.body.push(v)\n\t}\n  }\n  show(){\n    pg.fill(this.colour)\n    for(let i=snakeLength;i--;){\n      const [x,y]=this.body[i]\n      if(i<8)\n      pg.ellipse(x,y,i?8:20)\n      else{\n        const k=(i-8)      \n        pg.ellipse(x-k,y-k,8)\n        pg.ellipse(x+k,y+k,8)\n      }\n    }\n  }\n  update(i){\n    const newNoiseIndex=this.noiseIndex+.01\n    const n=noise(newNoiseIndex)*32\n    let [x,y]=this.body[0]\n    x+=cos(n)*5\n    y+=sin(n)*5\n    x=(x+width)%width\n    y=(y+height)%height\n    if(snakes.collision(i,x,y)){\n      this.body.pop()\n      this.body.unshift([x,y])\n      this.noiseIndex=newNoiseIndex\n    }\n  }\n  getAngle(){\n    return noise(this.noiseIndex)*32\n  }\n  getPosition(){\n    return this.body[0]\n  }\n}\n\ndraw=()=>{\n  pg.background(backgroundColour).noStroke()\n  \n  snakes.update()\n  snakes.show()  \n\n  viewAngle=lerp(viewAngle,snakes.getLeaderAngle(),.001)          \n  translate(width/2,height/2)\n  rotate(-viewAngle-PI/2)\n  const [x,y]=snakes.getLeaderPosition()\n  translate(-x,-y)\n  for(const i of[-width,0,width])\n    for(const j of[-height,0,height]){\n      image(pg,i,j,width,height)\n\t}\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Naoki Tsutae, with tags visualization"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Almina\n\n### Response:\n",
    "completion": "/**\n * color pallet\n */\n// let curl = \"https://coolors.co/555233-df921d-878937-cfc52A-dc2a41\";\n// let curl = \"https://coolors.co/565554-2e86ab-f6f5ae-f5f749-f24236\";\nlet curl = \"https://coolors.co/e3170a-a9e5bb-fcf6b1-f7b32b-2d1e2f\";\n\nlet bgColor;\nlet seed, noiseArg;\nlet obj;\nlet bg, fb, ef, win;\nlet fbbg;\nlet step;\n\nfunction setup() {\n\tcreateCanvas(600, 600);\n\t// colorMode(HSB, 360, 100, 100, 100);\n\tangleMode(DEGREES);\n\tbackground(255);\n\t// noLoop();\n\t// frameRate(0.5);\n\n\tpal = createPallete(curl);\n\tlet cid = int(random(pal.length));\n\tbgColor = pal[cid];\n\tpal.splice(cid, 1);\n\tpal = shuffle(pal);\n\n\tseed = random(1e+4);\n\tnoiseArg = random(1e+4);\n\t\n\t// obj = [];\n\t// for (let i = 0; i < 16; i++) { obj[i] = new Hexagon({phase: int(random(6))}); }\n\n\tbg = genBackground(pal[0], pal[1]);\n\t// bg = genBackground(color(300), color(150));\n\t// bg = genBackground(color(100), color(10));\n\t\n\tef = genEffect();\n\twin = genWindow();\n\t\n\tfbbg = genBackground(pal[1], pal[2]);\n\t// fbbg = genBackground(color(255), color(150));\n\t// fbbg = genBackground(color(100), color(10));\n\t\n\tfb = createGraphics(width, height);\n\tfb.copy(fbbg, 0, 0, width, height, 0, 0, width, height);\n\tfb = genFramebuffer(fb);\n}\n\nfunction update() {\n\tfb = genFramebuffer(fb);\n}\n\nfunction draw() {\n\t// pal = shuffle(pal);\n\t// fbbg = genBackground(pal[1], pal[2]);\n\t\n\trandomSeed(seed);\n\tbackground(30);\n\n\timage(bg, 0, 0);\n\timage(fb, 0, 0);\n\timage(ef, 0, 0);\n\timage(win, 0, 0);\n\t\n\tupdate();\n}\n\nfunction genFramebuffer(pg){\n\tpg = createGraphics(width, height);\n\tpg.copy(fbbg, 0, 0, width, height, 0, 0, width, height);\n\t\n\tpg.angleMode(DEGREES);\n\t// shadow(pg, true);\n\tpg.blendMode(DIFFERENCE);\n\t\n\t// let gradient;\n\tgradient = drawingContext.createRadialGradient(300, 1400, 850, 300, 1400, 1000);\n\tgradient.addColorStop(0, color(255));\n\tgradient.addColorStop(1, color(200));\n\tpg.drawingContext.fillStyle = gradient;\n\tpg.circle(300, 1400, 2000);\n\t\n\tpg.noStroke();  pg.fill(255);\n\tpg.circle(300, 40, 300);\n\t\n\tlet siz = 120;\n\tlet cx = 300;\n\tlet cy = 300;\n\t\n\tpg.noStroke();  pg.fill(255);\n\tpg.beginShape();\n\tpg.vertex(cx, cy);\n\tpg.vertex(cos(360/6*0+90)*siz+cx, sin(360/6*0+90)*siz+cy);\n\tpg.vertex(cos(360/6*1+90)*siz+cx, sin(360/6*1+90)*siz+cy);\n\tpg.vertex(cos(360/6*2+90)*siz+cx, sin(360/6*2+90)*siz+cy);\n\tpg.endShape();\n\t\n\tpg.noStroke();  pg.fill(125);\n\tpg.beginShape();\n\tpg.vertex(cx, cy);\n\tpg.vertex(cos(360/6*2+90)*siz+cx, sin(360/6*2+90)*siz+cy);\n\tpg.vertex(cos(360/6*3+90)*siz+cx, sin(360/6*3+90)*siz+cy);\n\tpg.vertex(cos(360/6*4+90)*siz+cx, sin(360/6*4+90)*siz+cy);\n\tpg.endShape();\n\t\n\tpg.noStroke();  pg.fill(25);\n\tpg.beginShape();\n\tpg.vertex(cx, cy);\n\tpg.vertex(cos(360/6*4+90)*siz+cx, sin(360/6*4+90)*siz+cy);\n\tpg.vertex(cos(360/6*5+90)*siz+cx, sin(360/6*5+90)*siz+cy);\n\tpg.vertex(cos(360/6*6+90)*siz+cx, sin(360/6*6+90)*siz+cy);\n\tpg.endShape();\n\t\n\tfor (let i = 0; i < 60; i++) {\n\t\tpg.push();\n\n\t\tlet ns = noise(i, frameCount*4e-3);\n\t\tlet r = map(int(random(30)), 0, 10-1, 0, 1) + ns;\n\t\tlet m = int(random(3));\n\t\tlet p;\n\t\tif (m==0) { p = p5.Vector.lerp(createVector(cx, cy), createVector(cos(360/6*0+90)*siz*1.6+cx, sin(360/6*0+90)*siz*1.6+cy), r); }\n\t\tif (m==1) { p = p5.Vector.lerp(createVector(cx, cy), createVector(cos(360/6*2+90)*siz*1.6+cx, sin(360/6*2+90)*siz*1.6+cy), r); }\n\t\tif (m==2) { p = p5.Vector.lerp(createVector(cx, cy), createVector(cos(360/6*4+90)*siz*1.6+cx, sin(360/6*4+90)*siz*1.6+cy), r); }\n\n\t\tpg.translate(p.x, p.y);\n\t\tpg.rotate(90);\n\n\t\tlet d = siz * (1 - r);\n\n\t\tpg.noStroke();  pg.fill(255);\n\t\tpg.beginShape();\n\t\tpg.vertex(0, 0);\n\t\tpg.vertex(cos(360/6*0)*d, sin(360/6*0)*d);\n\t\tpg.vertex(cos(360/6*1)*d, sin(360/6*1)*d);\n\t\tpg.vertex(cos(360/6*2)*d, sin(360/6*2)*d);\n\t\tpg.endShape();\n\n\t\tpg.noStroke();  pg.fill(125);\n\t\tpg.beginShape();\n\t\tpg.vertex(0, 0);\n\t\tpg.vertex(cos(360/6*2)*d, sin(360/6*2)*d);\n\t\tpg.vertex(cos(360/6*3)*d, sin(360/6*3)*d);\n\t\tpg.vertex(cos(360/6*4)*d, sin(360/6*4)*d);\n\t\tpg.endShape();\n\n\t\tpg.noStroke();  pg.fill(25);\n\t\tpg.beginShape();\n\t\tpg.vertex(0, 0);\n\t\tpg.vertex(cos(360/6*4)*d, sin(360/6*4)*d);\n\t\tpg.vertex(cos(360/6*5)*d, sin(360/6*5)*d);\n\t\tpg.vertex(cos(360/6*6)*d, sin(360/6*6)*d);\n\t\tpg.endShape();\n\n\t\tpg.pop();\n\t}\n\t\n\treturn pg;\n}\n\nfunction easeInQuart(t) { return 1 + (--t) * t * t * t * t; }\nfunction easeInOutQuart(t) { return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t; }\nfunction easeInElastic(t) { return (0.01 - 0.01 / t) * Math.sin(60 * t) + 1; }\n\nfunction shadow(pg, bShadow) {\n\tif (bShadow) {\n\t\tpg.drawingContext.shadowOffsetX = 5;\n\t\tpg.drawingContext.shadowOffsetY = 5;\n\t\tpg.drawingContext.shadowBlur = 10;\n\t\tpg.drawingContext.shadowColor = color(30);\n\t\t// pg.drawingContext.shadowColor = color(200);\n\t\t// pg.drawingContext.shadowColor = color(pal[0]);\n\t\t// drawingContext.shadowColor = bgColor;\n\t} else {\n\t\tpg.drawingContext.shadowOffsetX = 0;\n\t\tpg.drawingContext.shadowOffsetY = 0;\n\t\tpg.drawingContext.shadowBlur = 0;\n\t}\n}\n\nfunction keyPressed() {\n\tif (keyCode == ENTER) {\n\t\tsave('screenshot.png');\n\t}\n}\n\nfunction genBackground(c1, c2) {\n\tpg = createGraphics(width, height);\n\t\n\tlet res = 180;\n\tlet d = width / res + 1;\n\tpg.rectMode(CENTER);\n\tlet col;\n\tfor (let i = 0; i < res; i++) {\n\t\tfor (let j = 0; j < res; j++) {\n\t\t\tlet ns = map(noise(i*1e-1), 0, 1, -res/20, res/20);\n\t\t\tcol = lerpColor(c1, c2, map(j + ns, 0, res - 1, 0, 1));\n\t\t\tpg.stroke(col);  pg.fill(col);\n\t\t\tpg.rect(map(i, 0, res - 1, 0, width), map(j, 0, res - 1, 0, height), d, d);\n\t\t}\n\t}\n\tpg.rectMode(CORNER);\n\t\n\treturn pg;\n}\n\nfunction genEffect() {\n\tpg = createGraphics(width, height);\n\n\t// glitch\n\tpg.strokeWeight(1);\n\tfor (let i = 0; i < width / 4; i++) {\n\t\tpg.stroke(red(bgColor), green(bgColor), blue(bgColor), random(30));\n\t\tlet px = random(width);\n\t\tlet py = random(height);\n\t\tpg.line(px, py, px, py + 200);\n\t}\n\n\t// noise\n\tpg.strokeWeight(1);\n\tfor (let i = 0; i < width * height / 20; i++) {\n\t\tpg.stroke(red(bgColor), green(bgColor), blue(bgColor), random(100));\n\t\tlet px = random(width);\n\t\tlet py = random(height);\n\t\tpg.point(px, py);\n\t}\n\t\n\treturn pg;\n}\n\nfunction genWindow() {\n\tpg = createGraphics(width, height);\n\tlet w = width / 30;\n\tpg.noStroke();  pg.fill(255);\n\tpg.rect(0, 0, width, w);\n\tpg.rect(0, height - w, width, w);\n\tpg.rect(0, 0, w, height);\n\tpg.rect(width - w, 0, w, height);\n\treturn pg;\n}\n\nfunction createPallete(_url) {\n\tlet slash_index = _url.lastIndexOf('/');\n\tlet pallate_str = _url.slice(slash_index + 1);\n\tlet arr = pallate_str.split('-');\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tarr[i] = color('#' + arr[i]);\n\t}\n\treturn arr;\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Almina"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "let imageArray = [];\nlet current = 0;\nlet target = 1;\nlet rs;\nlet sx, sw;\nlet layerNum = 5;\n\nfunction setup() {\n  createCanvas(800, 800);\n  colorMode(HSB, 360, 100, 100, 100);\n  angleMode(DEGREES);\n\n  palette = shuffle(random(colorScheme).colors.concat());\n\n  imageArray = createImageArray(int(width / 4), 10, colorScheme);\n  rs = int(random(10000));\n}\n\nfunction draw() {\n  background(0, 0, 90);\n  let deltaTime = 1 / 90;\n  let k = 8;\n  current = lerp(target, current, exp(-k * deltaTime));\n\n  let offset = 0;\n  let x = offset;\n  let y = offset;\n  let d = width - offset * 2;\n  let g = this;\n\n  push();\n  translate(-width / 2, 0);\n  randomSeed(rs);\n  for (let i = 0; i < layerNum; i++) {\n    separateGrid(x, y, d, g);\n  }\n  pop();\n\n  push();\n  translate((width * 3) / 2, 0);\n  scale(-1, 1);\n  randomSeed(rs);\n  for (let i = 0; i < layerNum; i++) {\n    separateGrid(x, y, d, g);\n  }\n  pop();\n  if (current > 0.9999) {\n\t\t// save();\n    current = 0;\n    rs = int(random(10000));\n    palette = shuffle(random(colorScheme).colors.concat());\n    imageArray = createImageArray(int(width / 4), 10, colorScheme);\n  }\n}\n\nfunction createImageArray(w, num, colorScheme) {\n  let imageArray = [];\n  let g = createGraphics(w, w);\n  g.drawingContext.shadowColor = color(0, 0, 0, 33);\n  g.drawingContext.shadowBlur = w / 4;\n  for (let i = 0; i < num; i++) {\n    let img = createImage(w, w);\n    let colors = shuffle(palette);\n    // g.background(colors[i % colors.length]);\n    g.clear();\n    g.push();\n    g.translate(g.width / 2, g.height / 2);\n    g.rotate((int(random(4)) * PI) / 2);\n    g.translate(-g.width / 2, -g.height / 2);\n    let n = 0;\n    let sclStep = int(random(2, 8));\n    let shape_num = int(random(4));\n    for (let scl = 1; scl > 0; scl -= 1 / sclStep) {\n      let gradient = g.drawingContext.createConicGradient(0, 0, 0);\n\n      gradient.addColorStop(0, colors[(i + n++) % colors.length]);\n      gradient.addColorStop(1 / 4 / 2, colors[(i + n++) % colors.length]);\n      gradient.addColorStop(1 / 4 / 2 + 0.001, colors[(i + n) % colors.length]);\n      gradient.addColorStop(1 / 4, colors[(i + n++) % colors.length]);\n      g.drawingContext.fillStyle = gradient;\n      // g.fill(colors[1]);\n      g.noStroke();\n      // g.clear();\n      switch (shape_num) {\n        case 0:\n          g.rectMode(CORNER);\n          g.rect(0, 0, g.width * scl, g.height * scl);\n          break;\n        case 1:\n          g.arc(0, 0, g.width * 2 * scl, g.height * 2 * scl, 0, PI / 2, PIE);\n          break;\n        case 2:\n          g.triangle(0, 0, g.width * scl, 0, 0, g.height * scl);\n          break;\n        case 3:\n          g.rectMode(CORNER);\n          g.rect(0, 0, g.width * scl, g.height);\n          break;\n      }\n    }\n    g.pop();\n    img.copy(g, 0, 0, g.width, g.height, 0, 0, g.width, g.height);\n    imageArray.push(img);\n  }\n  g.remove();\n  return imageArray;\n}\n\nfunction separateGrid(x, y, d, g) {\n  let sepNum = int(random(1, 4));\n  let w = d / sepNum;\n  for (let i = x; i < x + d - 1; i += w) {\n    for (let j = y; j < y + d - 1; j += w) {\n      if (random(100) < 80 && w > width / 5) {\n        separateGrid(i, j, w, g);\n      } else {\n        let dx = i;\n        let dy = j;\n        let dw = w;\n        let dh = w;\n\n        g.push();\n        g.translate(dx + dw / 2, dy + dh / 2);\n        g.rotate(int(random(4)) * 90);\n        // g.translate(-dw / 2, -dh / 2);\n        g.fill(255, 0);\n        g.noStroke();\n        g.rectMode(CENTER);\n        g.rect(0, 0, dw, dh);\n        g.drawingContext.clip();\n        g.translate(-dw / 2, -dh / 2);\n        let n = int(random(imageArray.length));\n        if (random() < 0.5) {\n          g.image(imageArray[n], dw * current, 0, dw, dh);\n          g.image(\n            imageArray[(n + 1) % imageArray.length],\n            -dw + dw * current,\n            0,\n            dw,\n            dh\n          );\n        } else {\n          g.push();\n          g.rotate(current * 90);\n          g.image(imageArray[n], 0, 0, dw, dh);\n          g.pop();\n          g.push();\n          g.rotate(-90 + current * 90);\n          g.image(imageArray[(n + 1) % imageArray.length], 0, 0, dw, dh);\n          g.pop();\n        }\n        g.pop();\n      }\n    }\n  }\n}\n\nlet colorScheme = [\n  {\n    name: \"Benedictus\",\n    colors: [\"#F27EA9\", \"#366CD9\", \"#5EADF2\", \"#636E73\", \"#F2E6D8\"],\n  },\n  {\n    name: \"Cross\",\n    colors: [\"#D962AF\", \"#58A6A6\", \"#8AA66F\", \"#F29F05\", \"#F26D6D\"],\n  },\n  {\n    name: \"Demuth\",\n    colors: [\"#222940\", \"#D98E04\", \"#F2A950\", \"#BF3E21\", \"#F2F2F2\"],\n  },\n  {\n    name: \"Hiroshige\",\n    colors: [\"#1B618C\", \"#55CCD9\", \"#F2BC57\", \"#F2DAAC\", \"#F24949\"],\n  },\n  {\n    name: \"Hokusai\",\n    colors: [\"#074A59\", \"#F2C166\", \"#F28241\", \"#F26B5E\", \"#F2F2F2\"],\n  },\n  {\n    name: \"Hokusai Blue\",\n    colors: [\"#023059\", \"#459DBF\", \"#87BF60\", \"#D9D16A\", \"#F2F2F2\"],\n  },\n  {\n    name: \"Java\",\n    colors: [\"#632973\", \"#02734A\", \"#F25C05\", \"#F29188\", \"#F2E0DF\"],\n  },\n  {\n    name: \"Kandinsky\",\n    colors: [\"#8D95A6\", \"#0A7360\", \"#F28705\", \"#D98825\", \"#F2F2F2\"],\n  },\n  {\n    name: \"Monet\",\n    colors: [\"#4146A6\", \"#063573\", \"#5EC8F2\", \"#8C4E03\", \"#D98A29\"],\n  },\n  {\n    name: \"Nizami\",\n    colors: [\"#034AA6\", \"#72B6F2\", \"#73BFB1\", \"#F2A30F\", \"#F26F63\"],\n  },\n  {\n    name: \"Renoir\",\n    colors: [\"#303E8C\", \"#F2AE2E\", \"#F28705\", \"#D91414\", \"#F2F2F2\"],\n  },\n  {\n    name: \"VanGogh\",\n    colors: [\"#424D8C\", \"#84A9BF\", \"#C1D9CE\", \"#F2B705\", \"#F25C05\"],\n  },\n  {\n    name: \"Mono\",\n    colors: [\"#D9D7D8\", \"#3B5159\", \"#5D848C\", \"#7CA2A6\", \"#262321\"],\n  },\n  {\n    name: \"RiverSide\",\n    colors: [\"#906FA6\", \"#025951\", \"#252625\", \"#D99191\", \"#F2F2F2\"],\n  },\n];\n",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by reona396\n\n### Response:\n",
    "completion": "var R;\nvar x;\nvar y;\nvar N = 0.0;\nvar fromColor;\nvar toColor;\nvar val = 20;\n\nfunction setup() {\n    createCanvas(windowWidth, windowHeight);\n    background(255);\n\n    fromColor = color(255, 255, 255);\n    toColor = color(200, 0, 0);\n\n    strokeJoin(ROUND);\n    noStroke();\n}\n\nfunction draw() {\n    background(255);\n\n    push();\n    translate(width / 2, height / 2);\n    for (var i = val; i > 0; i--) {\n        beginShape();\n        fill(lerpColor(fromColor, toColor, 1 - i / val));\n        for (var theta = 360; theta > 0; theta -= 2) {\n            R = i + i * noise(theta * i + N);\n\n            x = R * (16 * sin(radians(theta)) * sin(radians(theta)) * sin(radians(theta)));\n            y = (-1) * R * (13 * cos(radians(theta)) - 5 * cos(radians(2 * theta)) -\n                2 * cos(radians(3 * theta)) - cos(radians(4 * theta)));\n\n            curveVertex(x, y);\n        }\n        endShape(CLOSE);\n    }\n    pop();\n\n    N += 0.01;\n}\n",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by reona396"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Eric Ly\n\n### Response:\n",
    "completion": "let canvas;\nlet palette;\n\nfunction setup() {\n\tcanvas = createCanvas(800, 800, WEBGL);\n\tcolorMode(HSB, 360, 100, 100, 100);\n\tangleMode(DEGREES);\n\n\tortho(-width / 2, width / 2, -height / 2, height / 2, -5000, 5000);\n\n\tpalette = [];\n\twhile (palette.length < 5) {\n\t\tpalette = shuffle(chromotome.get().colors);\n\n\t\tfor (let i = 0; i < palette.length; i++) {\n\t\t\tlet c = color(palette[i]);\n\t\t\t// c.setAlpha(25);\n\t\t\tpalette[i] = c;\n\t\t}\n\t}\n}\n\nfunction draw() {\n\tbackground(0, 0, 10);\n\tnoStroke();\n\tambientLight(0, 0, 50);\n\n\tdirectionalLight(color(0, 0, 80), 1, 0, -1);\n\tdirectionalLight(color(0, 0, 50), -1, 1, 0);\n\tdirectionalLight(color(0, 0, 30), 0, 1, 0);\n\n\trandomSeed(0);\n\torbitControl();\n\n\tlet offset = width / 15;\n\tlet w = sqrt(sq(width) + sq(height));\n\tlet x = -offset;\n\tlet y = -offset;\n\tlet d = w + offset * 2;\n\tlet minD = w / 10;\n\n\tpush();\n\trotateX(180);\n\trotateZ(45);\n\ttranslate(-w / 2, -w / 2, 0);\n\t// scale(0.85);\n\tseparateGrid(x, y, d, minD);\n\tpop();\n\n\t// frameRate(1);\n\tnoLoop();\n}\n\nfunction separateGrid(x, y, d, minD) {\n\tlet sep = int(random(1, 5));\n\tlet w = d / sep;\n\n\tpush();\n\ttranslate(x + d / 2, y + d / 2);\n\tscale(random() > 0.5 ? -1 : 1, random() > 0.5 ? -1 : 1);\n\trotate((int(random(4)) * 360) / 4);\n\ttranslate(-d / 2, -d / 2);\n\n\tfor (let j = 0; j < sep; j++) {\n\t\tfor (let i = 0; i < sep; i++) {\n\t\t\tlet nx = i * w;\n\t\t\tlet ny = j * w;\n\t\t\tif (random(100) < 95 && w > minD) {\n\t\t\t\tseparateGrid(nx, ny, w, minD);\n\t\t\t} else {\n\t\t\t\tpixelRect(nx, ny, w, w);\n\t\t\t}\n\t\t}\n\t}\n\n\tpop();\n}\n\nfunction pixelRect(x, y, w, h, c) {\n\t// rect(x,y,w,h);\n\n\tlet density = random([2, 4, 6, 8, 10, 12]);\n\n\tlet colors = shuffle(palette.concat());\n\tlet c1 = colors[0];\n\tlet c2 = colors[1];\n\n\tlet g = createGraphics(density, density);\n\tg.background(c1);\n\tg.stroke(c2);\n\tg.translate(0.5, 0.5);\n\tlet n, k;\n\tswitch (random([4])) {\n\t\tcase 0:\n\t\t\tfor (let i = 0; i < density; i++) {\n\t\t\t\tg.point(i, i);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tn = int(random(2));\n\t\t\tfor (let i = 0; i < density; i++) {\n\t\t\t\tif (i % 2 == n) {\n\t\t\t\t\tg.line(i, -1, i, g.height + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tk = int(random(2));\n\t\t\tfor (let j = 0; j < density; j++) {\n\t\t\t\tfor (let i = 0; i < density; i++) {\n\t\t\t\t\tif (j % 2 == (j + k) % 2) {\n\t\t\t\t\t\tg.point(i, j);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tk = int(random(2));\n\t\t\tfor (let i = 0; i < density; i++) {\n\t\t\t\tif (i % 2 == k) {\n\t\t\t\t\tfor (let j = i; j < density; j++) {\n\t\t\t\t\t\tg.point(i, j);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tfor (let j = 0; j < density; j++) {\n\t\t\t\tk = j % 2;\n\t\t\t\tfor (let i = 0; i < density; i++) {\n\t\t\t\t\tn = j * density + i;\n\t\t\t\t\tif (n % 2 == k) {\n\t\t\t\t\t\tg.point(i, j);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t}\n\tlet tex = canvas.getTexture(g);\n\ttex.setInterpolation(NEAREST, NEAREST);\n\tpush();\n\tlet bh = random(w / 2, w * 5);\n\ttranslate(x + w / 2, y + w / 2, 0);\n\trotateX(-90);\n\trotateY((int(random(4)) * 360) / 4 + 45);\n\tscale(random() > 0.5 ? -1 : 1, 1, random() > 0.5 ? -1 : 1);\n\tscale(0.9);\n\ttexture(g);\n\t// noStroke();\n\tcone((w / 2) * sqrt(2), bh / 2, 5, int(random(1, 8)));\n\tpop();\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Eric Ly"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Keeth Kuwahara, with tags p5study,dailycoding,arc\n\n### Response:\n",
    "completion": "const cp = [\"#382E37\", \"#DF642F\", \"#FAAB10\", \"#CB812B\", \"#3CAE64\"];\nconst NUM = 15;\nlet items = [];\nlet bgc;\n\nfunction setup() {\n  createCanvas((W = windowHeight), W);\n  noFill();\n  bgc = random(cp);\n\n  for (let i = 0; i < NUM; i++) {\n    items.push({\n      x: random(width),\n      y: random(height),\n      step: ~~random(5, 30),\n      swingX: random([50, 0, -50]),\n      swingY: random([50, 0, -50]),\n      diff: random(TAU),\n      lines: [],\n    });\n\n    for (let j = 0; j < ~~(~~random(80, 300) / items[i].step); j++) {\n      let initAngle = random(TAU);\n      items[i].lines.push({\n        strokeColor: random(cp),\n        weight: random(1, 8),\n        start: initAngle,\n        current: initAngle,\n        end: initAngle + TAU,\n        speed: random(0.03, 0.08),\n        drawing: true,\n        cond: random() < 0.3,\n      });\n    }\n  }\n}\n\nfunction draw() {\n  background(bgc);\n\n  for (let i of items) {\n    push();\n    translate(\n      i.x + sin(i.diff + frameCount / 30) * i.swingX,\n      i.y + sin(i.diff + frameCount / 30) * i.swingY,\n    );\n    drawCircles(i);\n    pop();\n  }\n}\n\nfunction drawCircles({ lines, step, diff, swingX, swingY }) {\n  let cSize = 0;\n  let count = 0;\n\n  while (count < lines.length) {\n    const { strokeColor, weight, start, end, cond, speed } = lines[count];\n    cSize += step;\n    stroke(strokeColor);\n    strokeWeight(weight);\n\n    if (lines[count].drawing > 0) {\n      lines[count].current += speed;\n      if (lines[count].current + speed > end) {\n        lines[count].current = end;\n        lines[count].drawing = false;\n      }\n    } else {\n      lines[count].current -= speed;\n      if (lines[count].current - speed <= start) {\n        lines[count].drawing = true;\n      }\n    }\n    if (cond) {\n      ellipse(0, 0, cSize, cSize);\n    } else {\n      arc(\n        sin(diff + frameCount / 30) * swingX,\n        cos(diff + frameCount / 30) * swingY,\n        cSize + cos(diff + frameCount / 30) * swingX,\n        cSize + cos(diff + frameCount / 30) * swingX,\n        start,\n        lines[count].current,\n      );\n    }\n    count++;\n  }\n}\n\nfunction keyPressed() {\n  // this will download the first 5 seconds of the animation!\n  if (key === \"s\") {\n    saveGif(\"mySketch\", 5);\n  }\n}\n",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Keeth Kuwahara, with tags p5study,dailycoding,arc"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Okazz\n\n### Response:\n",
    "completion": "let shapes = [];\nlet colors = ['#e6302b', '#fd7800', '#fbd400', '#3bd89f', '#0045e8', '#f477c3', '#70499c'];\n\nfunction setup() {\n\tcreateCanvas(900, 900);\n\trectMode(CENTER);\n\tlet c = 32;\n\tlet w = width / c;\n\tlet off = w / 4;\n\tfor (let i = 0; i < c; i++) {\n\t\tfor (let j = 0; j < c; j++) {\n\t\t\tlet x = i * w + w / 2;\n\t\t\tlet y = j * w + w / 2;\n\t\t\tlet t = noise(i * 0.1, j * 0.1) * 100 + 20;\n\t\t\toff *= -1;\n\t\t\tshapes.push(new SquareToCircle(x, y, x + off, y, w * 0.95, w * 0.3, t));\n\t\t}\n\t}\n}\n\nfunction draw() {\n\tbackground(255);\n\tfor (let i of shapes) {\n\t\ti.show();\n\t\ti.move();\n\t}\n}\n\nfunction easeInOutQuart(x){\n\treturn x < 0.5 ? 8 * x * x * x * x : 1 - pow(-2 * x + 2, 4) / 2;\n\t}\n\nclass SquareToCircle {\n\tconstructor(x1, y1, x2, y2, w, d, t) {\n\t\tthis.x1 = x1;\n\t\tthis.y1 = y1;\n\t\tthis.x2 = x2;\n\t\tthis.y2 = y2;\n\t\tthis.x = this.x1;\n\t\tthis.y = this.y1;\n\t\tthis.s = w;\n\t\tthis.s1 = w;\n\t\tthis.s2 = d;\n\t\tthis.t0 = t;\n\t\tthis.t = -t;\n\t\tthis.t1 = 60;\n\t\tthis.t2 = 100 + this.t1;\n\t\tthis.t3 = 60 + this.t2;\n\t\tthis.t4 = 100 + this.t3;\n\t\tthis.a = 0;\n\t\tthis.cr = 0;\n\t\tthis.col1 = color('#000000');\n\t\tthis.col2 = color(random(colors));\n\t\tthis.col = this.col1;\n\t}\n\n\tshow() {\n\t\tpush();\n\t\ttranslate(this.x, this.y);\n\t\trotate(this.a);\n\t\tnoStroke();\n\t\tfill(this.col);\n\t\tsquare(0, 0, this.s, this.cr);\n\t\tpop();\n\n\t}\n\n\tmove() {\n\t\tthis.t++;\n\t\tif (0 < this.t && this.t < this.t1) {\n\t\t\tlet amt = norm(this.t, 0, this.t1 - 1);\n\t\t\tamt = easeInOutQuart(amt)\n\t\t\tthis.s = lerp(this.s1, this.s2, amt);\n\t\t\tthis.cr = lerp(0, this.s, amt);\n\t\t\tthis.x = lerp(this.x1, this.x2, amt);\n\t\t\tthis.y = lerp(this.y1, this.y2, amt);\n\t\t\tthis.a = lerp(0, TAU, amt);\n\t\t\tthis.col = lerpColor(this.col1, this.col2, amt);\n\t\t}\n\t\tif (this.t2 < this.t && this.t < this.t3) {\n\t\t\tlet amt = norm(this.t, this.t2, this.t3 - 1);\n\t\t\tamt = easeInOutQuart(amt)\n\t\t\tthis.s = lerp(this.s2, this.s1, amt);\n\t\t\tthis.cr = lerp(this.s, 0, amt);\n\t\t\tthis.x = lerp(this.x2, this.x1, amt);\n\t\t\tthis.y = lerp(this.y2, this.y1, amt);\n\t\t\tthis.a = lerp(TAU, 0, amt);\n\t\t\tthis.col = lerpColor(this.col2, this.col1, amt);\n\t\t}\n\n\t\tif (this.t4 < this.t) {\n\t\t\tthis.t = 0;\n\t\t}\n\t}\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Okazz"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Okazz\n\n### Response:\n",
    "completion": "let palette = [\"#1c77c3\", \"#39a9db\", \"#40bcd8\", \"#f39237\", \"#e03431\"];\n\nfunction setup() {\n\tcreateCanvas(800, 800);\n\tnoLoop();\n}\n\nfunction draw() {\n\tlet c = int(random(6, 15));\n\tlet w = 5;\n\tlet off = w * 2;\n\tbackground(0);\n\tfill(255);\n\tstroke(0);\n\tstrokeWeight(w);\n\tdivideRect(off, off, width - off * 2, height - off * 2, 100);\n\tfor (let i = 0; i < c; i++) {\n\t\tlet x = random(0.1, 0.9) * width;\n\t\tlet y = random(0.1, 0.9) * height;\n\t\tlet d = random(35, 190);\n\t\tif (random(1) < 0.2) {\n\t\t\tConcentricCircles(x, y, d);\n\t\t} else {\n\t\t\tstroke(0);\n\t\t\tfill(random(palette));\n\t\t\tellipse(x, y, d, d);\n\t\t}\n\t}\n}\n\nfunction divideRect(x, y, w, h, min) {\n\tlet p = 0.2;\n\tif (w > min && h > min) {\n\t\tif (w >= h) {\n\t\t\tlet rndw = random(0.1, 0.9) * w;\n\t\t\tdivideRect(x, y, rndw, h, min);\n\t\t\tdivideRect(x + rndw, y, w - rndw, h, min);\n\t\t}\n\t\tif (w < h) {\n\t\t\tlet rndh = random(0.1, 0.9) * h;\n\t\t\tdivideRect(x, y, w, rndh, min);\n\t\t\tdivideRect(x, y + rndh, w, h - rndh, min);\n\t\t}\n\t} else {\n\t\trect(x, y, w, h);\n\t}\n}\n\nfunction ConcentricCircles(x, y, d) {\n\tlet t = 0;\n\tnoStroke();\n\twhile (d > 1) {\n\t\tfill(255);\n\t\tif (t == 0) {\n\t\t\tfill(0);\n\t\t\tt = 1;\n\t\t} else if (t == 1) {\n\t\t\tfill(255);\n\t\t\tt = 0;\n\t\t}\n\t\tellipse(x, y, d);\n\t\td -= 10;\n\t}\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Okazz"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "// https://en.wikipedia.org/wiki/Parametric_equation#:~:text=Parametric%20equations%20are%20commonly%20used,as%20parametrisation)%20of%20the%20object.\n// https://twitter.com/nakamura/status/1396726213306044419\nlet rs;\n\nfunction setup() {\n\tcreateCanvas(800, 800);\n\tframeRate(60);\n\trs = int(random(10000));\n}\n\nfunction draw() {\n\tbackground(220);\n\n\trandomSeed(rs + frameCount / 200);\n\tif (frameCount % 200 == 0) {\n\t\trs = int(random(10000));\n\t}\n\n\tfill(255, 200);\n\tstroke(0, 0, 0, 150);\n\tlet offset = width / 20;\n\tlet x = offset;\n\tlet y = offset;\n\tlet d = width - offset * 2;\n\n\tdrawingContext.shadowColor = color(0, 0, 0, (15 / 100) * 255);\n\tdrawingContext.shadowBlur = offset;\n\n\trecursiveRect(x, y, d, this);\n\n\t// frameRate(3);\n}\n\nfunction recursiveRect(x, y, d, g) {\n\tlet step = int(random(1, 4));\n\tlet w = d / step;\n\tfor (let j = 0; j < step; j++) {\n\t\tfor (let i = 0; i < step; i++) {\n\t\t\tlet nx = x + i * w;\n\t\t\tlet ny = y + j * w;\n\t\t\tif (random(100) < 90 && w > width) {\n\t\t\t\trecursiveRect(nx, ny, w, g);\n\t\t\t} else {\n\t\t\t\tlet cx = nx + w / 2;\n\t\t\t\tlet cy = ny + w / 2;\n\t\t\t\tlet r = w / 2;\n\t\t\t\tlet arr = [];\n\t\t\t\tfor (let i = 0; i < 4; i++) {\n\t\t\t\t\tarr[i] = random(10);\n\t\t\t\t}\n\t\t\t\tarr[4] = random([1, 3, 5, 7]);\n\t\t\t\tarr[5] = random([1, 3, 5, 7]);\n\t\t\t\tdisplayAuxiliaryVariable(cx, cy, r, arr);\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction displayAuxiliaryVariable(cx, cy, r, arr) {\n\tlet a = arr[0];\n\tlet b = arr[1];\n\tlet c = arr[2];\n\tlet d = arr[3];\n\tlet e = arr[4];\n\tlet f = arr[5];\n\tlet isVertical = random() > 0.5;\n\tpush();\n\ttranslate(cx, cy);\n\tscale((r - 10) / r);\n\tfor (let i = 0; i < 2; i++) {\n\t\tpush();\n\t\tscale(i % 2 == 0 ? -1 : 1, 1);\n\t\t// noFill();\n\t\tpush();\n\t\tbeginShape();\n\t\tfor (let theta = 0; theta < TWO_PI; theta += TWO_PI / 360) {\n\t\t\tlet u = theta + (frameCount * e) / 2000;\n\t\t\tlet v = theta - (frameCount * f) / 1500;\n\t\t\tlet x = cos(a * u) - pow(sin(b * v), e) * r;\n\t\t\tlet y = sin(c * v) - pow(cos(d * u), f) * r;\n\t\t\tvertex(x, y);\n\t\t\t// if (isVertical) {\n\t\t\t//   line(x, y, x, 0);\n\t\t\t// } else {\n\t\t\t//   line(x, y, 0, y);\n\t\t\t// }\n\t\t}\n\t\tendShape(CLOSE);\n\t\tpop();\n\n\t\tpop();\n\t}\n\tpop();\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "let graphics;\n\nfunction setup() {\n  createCanvas(800, 800);\n  colorMode(HSB, 360, 100, 100, 100);\n  angleMode(DEGREES);\n  graphics = createGraphics(width, height);\n  graphics.colorMode(HSB, 360, 100, 100, 100);\n\n  let percent = 10 / 100;\n  for (let i = 0; i < width * height * percent; i++) {\n    let x = random(width);\n    let y = random(height);\n    let dw = random(3);\n    let dh = random(3);\n    graphics.fill(0, 0, 0, 5);\n    graphics.noStroke();\n    graphics.ellipse(x, y, dw, dh);\n  }\n}\n\nfunction draw() {\n  background(0, 0, 90);\n  separateGrid(0, 0, width);\n\n  frameRate(.5);\n  image(graphics, 0, 0);\n}\n\n\nfunction separateGrid(x, y, d, colors) {\n  let sepNum = int(random(1, 4));\n  let w = d / sepNum;\n  for (let i = x; i < x + d - 1; i += w) {\n    for (let j = y; j < y + d - 1; j += w) {\n      if (random(100) < 90 && d > width / 10) {\n        separateGrid(i, j, w);\n      } else {\n        let num = int(random(1,4));\n        if (random(100) > 50) {\n          drawLineArc(i, j, w/2, num);\n        } else {\n          drawLineTriangle(i, j, w, num)\n        }\n      }\n    }\n  }\n}\n\nfunction drawLineArc(x, y, d, num) {\n  push();\n  translate(x, y);\n  for (let i = 0; i < num; i++) {\n    push();\n    rotate(int(random(4)) * 360 / 4);\n    for (let dd = d * 2 * 2; dd >= 0; dd -= d * 2 / 3) {\n      arc(-d, -d, dd, dd, 0, 90);\n    }\n    pop();\n  }\n  pop();\n}\n\n\nfunction drawLineTriangle(x, y, d, num) {\n  let rotateArr = [0, 90, 180, 360];\n  let rotateArrCopy = rotateArr.concat();\n  push();\n  translate(x, y);\n  for (let i = 0; i < num; i++) {\n    push();\n    rotate(int(random(4)) * 360 / 4);\n    for (let dd = 0; dd <= d; dd += d / 3) {\n      fill(0, 0, 100);\n      noStroke();\n      triangle(0, 0 - dd, -d + dd, -d, d - dd, -d);\n      stroke(0);\n      line(0, 0 - dd, -d + dd, -d);\n      line(0, 0 - dd, d - dd, -d);\n    }\n    pop();\n  }\n  pop();\n}\n\nfunction createPallete(_url) {\n  let slash_index = _url.lastIndexOf('/');\n  let pallate_str = _url.slice(slash_index + 1);\n  let arr = pallate_str.split('-');\n\n  for (let i = 0; i < arr.length; i++) {\n    let red = unhex(arr[i].substr(0, 2));\n    let green = unhex(arr[i].substr(2, 2));\n    let blue = unhex(arr[i].substr(4, 2));\n    colorMode(RGB, 255, 255, 255);\n    let c = color(red, green, blue);\n    let h = hue(c);\n    let s = saturation(c);\n    let b = brightness(c);\n    let t = 100 * 3 / 4;\n    colorMode(HSB, 360, 100, 100, 100);\n    c = color(h, s, b, t);\n    arr[i] = c;\n  }\n  return arr;\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "let palette = [];\n\nfunction setup() {\n  createCanvas(800, 800);\n  angleMode(DEGREES);\n  while (palette.length < 5) {\n    palette = shuffle(chromotome.get().colors);\n  }\n}\n\nfunction draw() {\n  background(random(palette));\n  blendMode(MULTIPLY);\n  background(0, 0, 0, 50);\n  blendMode(BLEND);\n\n  let offset = width / 20;\n  let xMin = offset;\n  let xMax = width - offset;\n  let yMin = offset;\n  let yMax = height - offset;\n\n  drawingContext.shadowColor = color(0, 0, 0, 33);\n  drawingContext.shadowBlur = offset;\n\n  push();\n  translate(width / 2, height / 2);\n  rotate((int(random(4)) * 360) / 4);\n  scale(random() > 0.5 ? -1 : 1, random() > 0.5 ? -1 : 1);\n  translate(-width / 2, -height / 2);\n  drawXYPattern(xMin, yMin, xMax, yMax);\n  pop();\n\n  // filter(GRAY);\n  noLoop();\n}\n\nfunction drawXYPattern(xMin, yMin, xMax, yMax) {\n  let xStep, yStep;\n  let minStep = width / 50;\n  let y = yMin;\n  while (y < yMax) {\n    yStep = random(yMin, yMax) / 3;\n    if (y + yStep > yMax || yMax - (y + yStep) < minStep) {\n      yStep = yMax - y;\n    }\n    let x = xMin;\n    while (x < xMax) {\n      xStep = yStep; //random(xMin, xMax) / 5;\n      // xStep = random(xMin, xMax) / 5;\n      if (x + xStep > xMax || xMax - (x + xStep) < minStep) {\n        xStep = xMax - x;\n      }\n      push();\n      translate(x + xStep / 2, y + yStep / 2);\n      scale(random() > 0.5 ? -1 : 1, random() > 0.5 ? -1 : 1);\n      rotate((angle = (int(random(4)) * 360) / 4));\n      let dw, dh;\n      if (angle % 180 == 0) {\n        dw = xStep;\n        dh = yStep;\n      } else {\n        dw = yStep;\n        dh = xStep;\n      }\n      scale((dw - 5) / dw);\n      stroke(0, 0, 0, 50);\n      strokeWeight(dw / (dw - 10));\n      // strokeWeight(1.5);\n      // noStroke();\n      fill(random(palette));\n      switch (int(random(4))) {\n        case 0:\n          // if (random() > 0.5) {\n          // } else {\n          rectMode(CENTER);\n          rect(0, 0, dw, dh);\n          // }\n          break;\n        case 1:\n          ellipse(0, 0, dw, dh);\n          break;\n        case 2:\n          arc(-dw / 2, -dh / 2, dw * 2, dh * 2, 0, 90, PIE);\n          break;\n        case 3:\n          triangle(-dw / 2, -dh / 2, dw / 2, -dh / 2, -dw / 2, dh / 2);\n          break;\n      }\n      drawingContext.clip();\n\n      // rotate(360/8 * int(random(8)));\n      rotate(random(15) * (random() > 0.5 ? -1 : 1));\n      drawRecursiveRect(-dw / 2, -dh / 2, dw, dh);\n\n      pop();\n      x += xStep;\n    }\n    y += yStep;\n  }\n}\n\nfunction drawRecursiveRect(x, y, w, h, minD = width / 15) {\n  push();\n\n  translate(x, y);\n\n  let nx = 0;\n  let ny = 0;\n  let nw = random(w) / 3;\n  let nh = random(w) / 3;\n  let direction = true;\n  // rect(nx, ny, nw, nh);\n  let stepx = 0;\n  let stepy = 0;\n\n  while (nx < w) {\n         let colors = shuffle(palette.concat(),true);\n        let myColor = [colors[0], colors[1]];\n    if (direction) {\n      nw = random(w);\n      if (nx + nw > w || w - (nx + nw) < width / 100) {\n        nw = w - nx;\n      }\n      if (min(nw, nh) > random(width) / 3) {\n        drawRecursiveRect(nx, ny, nw, nh);\n      } else {\n        // rectMode(CENTER);\n       push();\n        translate(nx + nw / 2, ny + nh / 2);\n\n        angleMode(RADIANS);\n        let np = max(nw, nh);\n        rectMode(CENTER);\n        // patternColors(myColor);\n        // patternAngle(random(TAU));\n        // pattern(randPattern(random([np / 2, np])));\n        // rectPattern(0, 0, nw - 2, nh - 2);\n        angleMode(DEGREES);\n\n        // fill(random(palette));\n        // noStroke();\n        fill(myColor[0]);\n        rect(0, 0, nw, nh);\n        pop();\n        // ellipse(nx+nw/2,ny+nh/2,nw,nh);\n      }\n      nx += nw;\n      if (abs(w - nx) < 0.1) {\n        direction = !direction;\n        nx = stepx;\n        ny += nh;\n        stepy = ny;\n      }\n    } else {\n      nh = random(h);\n      if (ny + nh > h || h - (ny + nh) < width / 100) {\n        nh = h - ny;\n      }\n      if (min(nw, nh) > random(width) / 10) {\n        drawRecursiveRect(nx, ny, nw, nh);\n      } else {\n        push();\n        translate(nx + nw / 2, ny + nh / 2);\n        rectMode(CENTER);\n        angleMode(RADIANS);\n        let np = max(nw, nh);\n        angleMode(DEGREES);\n\n        fill(myColor[1]);\n        rect(0, 0, nw, nh);\n        pop();\n      }\n      ny += nh;\n      if (abs(h - ny) < 0.1) {\n        direction = !direction;\n        ny = stepy;\n        nx += nw;\n        stepx = nx;\n      }\n    }\n  }\n  pop();\n}\n",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by cloud.cb\n\n### Response:\n",
    "completion": "let circles = [];\nlet colors = [\"#303030\", \"#ED4141\", \"#FECA16\", \"#2B8BDF\", \"#159670\"];\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tinit();\n}\n\nfunction draw() {\n\tbackground(255);\n\tfor (let i of circles) {\n\t\ti.run();\n\t}\n\n\tlet e = 240;\n\tlet t = frameCount % e;\n\tbackground(255, (norm(t, 0, e) ** 30) * 255);\n\n\tif (t == e - 1) {\n\t\tinit();\n\t}\n\n}\n\nfunction init() {\n\tcircles = [];\n\tlet num = int(random(10, 50));\n\tfor (let i = 0; i < num; i++) {\n\t\tlet x = randomGaussian(0.5, 0.15) * width;\n\t\tlet y = randomGaussian(0.5, 0.15) * height;\n\t\tlet d = random(0.05, 0.2) * min(width, height);\n\t\tlet rnd = int(random(3));\n\t\tif (rnd == 0) circles.push(new Circle01(x, y, d));\n\t\telse if (rnd == 1) circles.push(new Circle02(x, y, d));\n\t\telse if (rnd == 2) circles.push(new Circle03(x, y, d));\n\t}\n}\n\nfunction easeOutElastic(x) {\n\tconst c4 = (2 * Math.PI) / 3;\n\treturn x === 0 ?\n\t\t0 :\n\t\tx === 1 ?\n\t\t1 :\n\t\tpow(2, -10 * x) * sin((x * 10 - 0.75) * c4) + 1;\n}\n\nfunction easeInCubic(x) {\n\treturn x * x * x;\n}\n\nfunction easeOutCubic(x) {\n\treturn 1 - pow(1 - x, 3);\n}\n\nfunction easeOutCirc(x) {\n\treturn sqrt(1 - pow(x - 1, 2));\n}\n\nclass Circle01 {\n\tconstructor(x, y, d) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.d = 0;\n\t\tthis.d0 = 0;\n\t\tthis.d1 = d;\n\t\tthis.t = -int(random(60));\n\t\tthis.t1 = 120;\n\t\tthis.col = color(random(colors));\n\t}\n\n\tshow() {\n\t\tfill(this.col);\n\t\tnoStroke();\n\t\tcircle(this.x, this.y, this.d);\n\t}\n\n\tmove() {\n\t\tif (0 < this.t && this.t < this.t1) {\n\t\t\tlet amt = easeOutElastic(norm(this.t, 0, this.t1 - 1));\n\t\t\tthis.d = lerp(this.d0, this.d1, amt);\n\t\t}\n\t\tthis.t++;\n\t}\n\n\trun() {\n\t\tif (this.t > 0) this.show();\n\t\tthis.move();\n\t}\n}\n\nclass Circle02 extends Circle01 {\n\tconstructor(x, y, d) {\n\t\tsuper(x, y, d);\n\t\tthis.x0 = x + width * random(-1, 1) * 0.5;\n\t\tthis.y0 = y + height * random(-1, 1) * 0.5;\n\t\tthis.x1 = x;\n\t\tthis.y1 = y;\n\t\tthis.x = this.x0;\n\t\tthis.y = this.y0;\n\t}\n\n\tmove() {\n\t\tif (0 < this.t && this.t < this.t1) {\n\t\t\tlet amt = easeOutCirc(norm(this.t, 0, this.t1 - 1));\n\t\t\tthis.x = lerp(this.x0, this.x1, amt);\n\t\t\tthis.y = lerp(this.y0, this.y1, amt);\n\t\t\tthis.d = lerp(this.d0, this.d1, amt);\n\t\t}\n\t\tthis.t++;\n\t}\n}\n\nclass Circle03 extends Circle01 {\n\tconstructor(x, y, d) {\n\t\tsuper(x, y, d);\n\t\tthis.d = d;\n\t\tthis.alph = 0;\n\t\tthis.aa = 0;\n\t\tthis.ang = random(TAU);\n\t\tthis.sw = width * 0.005;\n\t\tthis.pm = (int(random(2)) * 2) - 1;\n\t}\n\n\tshow() {\n\t\tthis.col.setAlpha(this.alph);\n\t\tfill(this.col);\n\t\tnoStroke();\n\t\tcircle(this.x, this.y, this.d);\n\n\t\tpush();\n\t\tthis.col.setAlpha(255);\n\t\tnoFill();\n\t\tstroke(this.col);\n\t\tstrokeWeight(this.sw);\n\t\ttranslate(this.x, this.y);\n\t\tscale(this.pm, 1);\n\t\trotate(this.ang);\n\t\tarc(0, 0, this.d - this.sw, this.d - this.sw, 0, this.aa);\n\t\tpop();\n\n\t}\n\n\tmove() {\n\t\tif (0 < this.t && this.t < this.t1) {\n\t\t\tlet amt = norm(this.t, 0, this.t1 - 1);\n\t\t\tthis.alph = lerp(0, 255, easeInCubic(amt));\n\t\t\tthis.aa = lerp(0, TAU, easeOutCubic(amt));\n\t\t}\n\t\tthis.t++;\n\t}\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by cloud.cb"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Okazz\n\n### Response:\n",
    "completion": "let cx, cy;\nlet palettes = ['#d90368','#ef476f', '#ffd166', '#3a0ca3', '#0197f6', '#16e0bd', '#98ce00','#78c3fb', '#FF82EA', '#000000', '#ffffff']\nlet colors = [];\n\nfunction setup() {\n\tcreateCanvas(900, 900);\n\tcx = width/2;\n\tcy = height/2;\n\tlet s = width * 0.3;\n\tlet r = s;\n\tlet n = 0;\n\tshuffle(palettes, true);\n\tbackground(palettes[0]);\n\tpalettes.splice(0, 1);\n\n\tfor(let i=0; i<3; i++){\n\t\tcolors[i] = [];\n\t\tshuffle(palettes, true);\n\t\tfor(let j=0; j<3; j++){\n\t\t\tcolors[i][j] = palettes[j]\n\t\t}\n\t}\n\n\tnoFill();\n\tnoStroke();\n\tstrokeWeight(0.5);\n\tform(cx, cy, s, 0, 0);\n\tform(cx, cy, s * 0.1, 0, 2);\n\t\n\tfor(let i=0; i<6; i++){\n\t\tlet a = map(i, 0, 6, 0, TAU);\n\t\tif(i % 2 == 0)n = 1\n\t\telse n = 2\n\t\tform(cx + r * cos(a), cy + r * sin(a), s, n, 0);\n\t\tform(cx + r * cos(a), cy + r * sin(a), s * 0.1, 3-n, 0);\n\t}\n\tfor(let i=0; i<6; i++){\n\t\tlet a = map(i, 0, 6, 0, TAU);\n\t\tn = i % 3\n\t\tform(cx + r * 0.577 * cos(a + TAU/12), cy + r * 0.577 * sin(a + TAU/12), s * 0.42, n, TAU / 12);\n\t\tform(cx + r * 0.577 * 2 * cos(a + TAU/12), cy + r * 2 * 0.577 * sin(a + TAU/12), s * 0.42, (n + 1) % 3, TAU / 12);\n\t}\n}\n\nfunction draw() {\n\t\n}\n\nfunction form(x, y, w, n, ang){\n\tlet b = TAU/6;\n\tlet r = w * tan(b/2);\n\tlet col1 = colors[n][0]\n\tlet col2 = colors[n][1]\n\tlet col3 = colors[n][2]\n\tpush();\n\ttranslate(x, y);\n\trotate(ang);\n\tlet xx = r * 0.5 * cos(b/2);\n\tlet yy = r * 0.5 * sin(b/2);\n\tlet hr = r * 0.5;\n\tfor(let i=0; i<6; i++){\n\t\tfill(col1);\n\t\tstroke(col1);\n\t\tbeginShape();\n\t\tfor(let a=b*3.5; a<b*5.5; a+=TAU/180){\n\t\t\tvertex(xx + hr * cos(a), yy + hr * sin(a));\n\t\t}\n\t\tfor(let a=b*0.5; a<b*1.5; a+=TAU/180){\n\t\t\tvertex(xx + hr * cos(a), -yy + hr * sin(a));\n\t\t}\n\t\tfor(let a=b*5.5; a>b*4.5; a-=TAU/180){\n\t\t\tvertex(0 + hr * cos(a), hr + hr * sin(a));\n\t\t}\n\t\tendShape(CLOSE);\n\n\t\tfill(col2);\n\t\tbeginShape();\n\t\tfor(let a = 0; a<PI/2; a+= TAU/180){\n\t\t\tvertex(hr * cos(b/2) + hr * 0.5 * cos(a), hr * 0.5 * sin(a))\n\t\t}\n\t\t\n\t\tfor(let a=b*5.5; a>b*5; a-=TAU/180){\n\t\t\tvertex(0 + hr * cos(a), hr + hr * sin(a));\n\t\t}\n\n\t\tfor(let a = TAU * 0.48; a<TAU; a+= TAU/180){\n\t\t\tvertex(hr * cos(b/2) + hr * 0.5 * cos(a), hr * 0.5 * sin(a))\n\t\t}\n\t\tendShape();\n\t\tfill(col3);\n\t\tnoStroke();\n\t\tcircle(hr * cos(b/2), 0, hr * 0.5);\n\t\tcircle(0, 0, r * 0.25);\n\n\t\trotate(TAU / 6);\n\t}\n\tpop();\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Okazz"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by kusakari\n\n### Response:\n",
    "completion": "//Created by kusakari\n//https://twitter.com/kusakarism\n\nlet _minW;\n\nfunction setup() {\n  createCanvas(windowWidth, windowHeight);\n  frameRate(30);\n  colorMode(HSB, 360, 100, 100, 255);\n  \n  setObject();\n}\n\nlet _aryArcs;\nfunction setObject() {\n  _minW = min(width, height) * 1;\n\n  _aryArcs = [];\n  let numTile = 3;\n  for (let xi = 0; xi < numTile; xi++) {\n    for (let yi = 0; yi < numTile; yi++) {\n      let centX = -_minW/2 + _minW / numTile * (0.5 + xi);\n      let centY = -_minW/2 + _minW / numTile * (0.5 + yi);\n      let circleXy = createVector(centX, centY);\n      let circleR = _minW / numTile / 2 * 0.95;\n      let col = color(0);\n      _aryArcs.push(new Arcs(circleXy, circleR, col));\n    }\n  }\n  \n}\n\nclass Arcs {\n  constructor(circleXy, circleR, col) {\n    this.circleXy = circleXy;\n    this.circleR = circleR;\n    this.col = col;\n    let angInit = random(2*PI);\n    this.numAng = int(random(2, 8));\n    let aryRatio = [];\n    for (let i = 0; i < this.numAng; i++) {\n      if (i == 0) {\n        aryRatio[i] = random();\n      } else {\n        aryRatio[i] = aryRatio[i-1] + random();\n      }\n    }\n    this.aryAng = [angInit];\n    for (let i = 0; i < this.numAng; i++) {\n      this.aryAng.push(angInit + 2*PI * aryRatio[i] / aryRatio[aryRatio.length - 1]);\n    }\n    this.aryArc = [];\n    for (let i = 0; i < this.numAng; i++) {\n      this.aryArc[i] = new GradArc(this.circleXy, this.circleR, this.col, this.aryAng[i], this.aryAng[i+1]);\n    }\n  }\n\n  draw() {\n    for (let i = 0; i < this.numAng; i++) {\n      this.aryArc[i].draw();\n    }\n  }\n}\n\nclass GradArc {\n  constructor(circleXy, circleR, col, angStart, angEnd) {\n    this.circleXy = circleXy;\n    this.circleR = circleR;\n    this.col = col;\n    this.angStart = angStart;\n    this.angEnd = angEnd;\n    this.angStep = angEnd - angStart;\n    this.numDot = 8000 / (_minW / 3)**1 * circleR**1;\n    this.dotW = (circleR / 65)**0.5;\n  }\n\n  draw() {\n    fill(this.col);\n    for (let i = 0; i < this.numDot; i++) {\n      let r = this.circleR * random()**0.5;\n      let ang = this.angStart + this.angStep * random()**0.2;\n      let xy = createVector(r, 0).rotate(ang).add(this.circleXy);\n      rect(xy.x, xy.y, this.dotW);\n    }\n  }\n}\n\nfunction draw() {\n  background(100);\n  translate(width/2, height/2);\n\n  noStroke();\n  for (let i = 0; i < _aryArcs.length; i++) {\n    _aryArcs[i].draw();\n  }\n  noLoop();\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by kusakari"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by CodingChef\n\n### Response:\n",
    "completion": "let kMax;\nlet step;\nlet n = 250; // number of blobs\nlet radius = 80; // diameter of the circle\nlet inter = 0.05; // difference between the sizes of two blobs\nlet maxNoise = 500;\n\nlet noiseProg = (x) => (x*x);\n\nfunction setup() {\n  createCanvas(windowWidth, windowHeight);\n\tangleMode(DEGREES);\n  noFill();\n\t//noLoop();\n\tframeRate(30);\n\tkMax = random(0.5, 1);\n\tstep = 0.01;\nbackground(58,63,80);\n}\nlet i = 0;\nfunction draw() {\n  //\n\t\n  i = frameCount % n;\n\tlet alpha = 1 - noiseProg(i / n);\n\tstroke(94,255,255, alpha*50);\n\tlet size = radius + frameCount * inter;\n\tlet k = kMax * sqrt(i/n);\n\tlet noisiness = maxNoise * noiseProg(i / n);\n\tblob(size, width/2, height/2, k, i * step, noisiness);\n  \n}\n\nfunction blob(size, xCenter, yCenter, k, t, noisiness) {\n  beginShape();\n\tlet angleStep = 360 / 500;\n  for (let theta = 0; theta < 360; theta += angleStep) {\n    let r1, r2;\n\t\t/*\n    if (theta < PI / 2) {\n      r1 = cos(theta);\n      r2 = 1;\n    } else if (theta < PI) {\n      r1 = 0;\n      r2 = sin(theta);\n    } else if (theta < 3 * PI / 2) {\n      r1 = sin(theta);\n      r2 = 0;\n    } else {\n      r1 = 1;\n      r2 = cos(theta);\n    }\n\t\t*/\n\t\tr1 = cos(theta)+1;\n\t\tr2 = sin(theta)+1;\n    let r = size + noise(k * r1,  k * r2, t) * noisiness;\n    let x = xCenter + r * cos(theta);\n    let y = yCenter + r * sin(theta);\n    curveVertex(x, y);\n  }\n  endShape(CLOSE);\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by CodingChef"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by reona396\n\n### Response:\n",
    "completion": "// https://zenn.dev/baroqueengine/books/a19140f2d9fc1a/viewer/786179\n\nconst radius = 270;\nlet img, maxRad;\nconst palette = [\"#ffff00\", \"#00ffff\", \"#ff00ff\"];\n\nfunction setup() {\n  const mainColor = random(palette);\n  img = createGraphics(630, 630);\n  img.background(\"#000\");\n  img.noStroke();\n  for (let i = 0; i < 100; i++) {\n    let x1 = random(img.width/2);\n    img.strokeWeight(random(1, 5));\n    img.stroke(mainColor);\n    img.line(x1, 0, x1, img.height);\n\n    let x2 = random(img.width/2, img.width);\n    img.strokeWeight(random(1, 5));\n    img.stroke(\"#E7ECF2\");\n    img.line(x2, 0, x2, img.height);\n  }\n\n  createCanvas(img.width, img.height);\n\tbackground(\"#E7ECF2\");\n  // image(img, 0, 0);\n\n  maxRad = PI * random(0.5, 1.25);\n  img.loadPixels();\n\n  const dest = createImage(img.width, img.height);\n  dest.copy(img, 0, 0, img.width, img.height, 0, 0, img.width, img.height);\n  dest.loadPixels();\n\n  const cx = img.width / 2;\n  const cy = img.height / 2;\n\n  for (let y = 0; y < img.height; y++) {\n    for (let x = 0; x < img.width; x++) {\n      const d = dist(cx, cy, x, y);\n      const rad = max(0, map(d, 0, radius, maxRad, 0));\n\n      if (rad > 0) {\n        const tx = cx + round(cos(rad) * (x - cx) - sin(rad) * (y - cy));\n        const ty = cy + round(sin(rad) * (x - cx) + cos(rad) * (y - cy));\n        const c = getPixel(img, tx, ty);\n        setPixel(dest, x, y, c);\n      }\n    }\n  }\n\n  dest.updatePixels();\n  push();\n  image(dest, 0, 0);\n  pop();\n\n  noStroke();\n  fill(\"#E7ECF2\");\n  beginShape();\n  vertex(0, 0);\n  vertex(width, 0);\n  vertex(width, height);\n  vertex(0, height);\n\n  beginContour();\n  for (let t = TWO_PI; t >= 0; t -= TWO_PI / 360) {\n    vertex(width / 2 + radius * cos(t), height / 2 + radius * sin(t));\n  }\n  endContour();\n  endShape(CLOSE);\n}\n\nfunction getPixel(img, x, y) {\n  const i = (y * img.width + x) * 4;\n  return [img.pixels[i], img.pixels[i + 1], img.pixels[i + 2]];\n}\n\nfunction setPixel(img, x, y, color) {\n  const i = (y * img.width + x) * 4;\n  img.pixels[i + 0] = color[0];\n  img.pixels[i + 1] = color[1];\n  img.pixels[i + 2] = color[2];\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by reona396"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Optimystery\n\n### Response:\n",
    "completion": "let colors = ['#0E0D23', '#AE8D6B', '#F2E9E1', '#EBCFC4', '#D1C0B0'];\n\nfunction setup() {\n  createCanvas(800, 800);\n  background(255);\n  noStroke();\n  drawGeometricArt();\n}\n\nfunction drawGeometricArt() {\n  // draw random shapes with random colors\n  for (let i = 0; i < 1000; i++) {\n    let x = random(width);\n    let y = random(height);\n    let size = random(10, 100);\n    let colorIndex = floor(random(colors.length));\n    let color = colors[colorIndex];\n    fill(color);\n    let shape = floor(random(3));\n    switch (shape) {\n      case 0:\n        // draw rectangle\n        rect(x, y, size, size);\n        break;\n      case 1:\n        // draw triangle\n        let x1 = x;\n        let y1 = y + size;\n        let x2 = x + size / 2;\n        let y2 = y;\n        let x3 = x + size;\n        let y3 = y + size;\n        triangle(x1, y1, x2, y2, x3, y3);\n        break;\n      case 2:\n        // draw ellipse\n        ellipse(x, y, size, size / 2);\n        break;\n      default:\n        break;\n    }\n  }\n  \n  // draw lines\n  strokeWeight(2);\n  stroke(colors[floor(random(colors.length))]);\n  for (let i = 0; i < 50; i++) {\n    let x1 = random(width);\n    let y1 = random(height);\n    let x2 = random(width);\n    let y2 = random(height);\n    line(x1, y1, x2, y2);\n  }\n  \n  // draw circles\n  noFill();\n  strokeWeight(4);\n  stroke(colors[floor(random(colors.length))]);\n  for (let i = 0; i < 10; i++) {\n    let x = random(width);\n    let y = random(height);\n    let size = random(50, 150);\n    ellipse(x, y, size, size);\n  }\n}\n",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Optimystery"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "let cells, cols, rows;\nlet offset, margin;\nlet w, h;\nlet bg;\nlet pallete = [\"#1A535C\", \"#4ECDC4\", \"#F7FFF7\", \"#FF6B6B\", \"#FFE66D\"];\n\nfunction setup() {\n  createCanvas(800, 800);\n  colorMode(HSB, 360, 100, 100, 100);\n  angleMode(DEGREES);\n}\n\nfunction init() {\n  background(0, 0, 15);\n  bg = createGraphics(width, height);\n    bg.colorMode(HSB, 360, 100, 100, 100);\n  drawNoiseBackground(100000, bg);\n\n  offset = width / 10 / int(random(1, 3));\n  margin = offset / int(random(2, 5));\n\n  cells = int(random(3, 10));\n  cols = cells;\n  rows = cells;\n\n  w = (width - offset * 2 - margin * (cols - 1)) / cols;\n  h = (height - offset * 2 - margin * (rows - 1)) / rows;\n\n\n  for (let j = 0; j < rows; j++) {\n    for (let i = 0; i < cols; i++) {\n      let x = map(i, 0, cols - 1, offset, width - offset - w);\n      let y = map(j, 0, rows - 1, offset, height - offset - h);\n      let r = sqrt(random(1));\n      let depth = map(r, 0, 1, 2, 5); //int(random(3, 15));\n      let n = int(random(pallete.length));\n      waveInRect(x + w / 2, y + h / 2, w, h);\n    }\n  }\n  image(bg, 0, 0);\n}\n\nfunction mousePressed() {\n  redraw();\n}\n\nfunction waveInRect(_x, _y, _w, _h) {\n  push();\n  translate(_x, _y);\n  rotate(int(random(4)) * 90);\n\n  fill(0, 0, 100);\n  noStroke();\n  rectMode(CENTER);\n  rect(0, 0, _w, _h);\n\n  let step;\n  let freq = int(random(1, 15)) / 7;\n  let c1, c2;\n  for (let x = -_w / 2; x < _w / 2; x += step) {\n    step = int(random(1, 100)) / 100 * _w;\n    let nextX = constrain(x + step, -_w / 2, _w / 2);\n\n    let c3 = int(random(pallete.length));\n    let c4 = int(random(pallete.length));\n    while (c1 == c3) {\n      c3 = int(random(pallete.length));\n    }\n    while (c2 == c4 || c3 == c4) {\n      c4 = int(random(pallete.length));\n    }\n    c1 = c3;\n    c2 = c4;\n\n    let topPos = createVector(x, -h / 2);\n    let topNextPos = createVector(nextX, -h / 2);\n\n    fill(pallete[c1]);\n    beginShape();\n    vertex(topPos.x, topPos.y);\n    for (let currentX = x; currentX < nextX; currentX += .1) {\n      let currentY = sin(currentX * freq) * _w / 4;\n      vertex(currentX, currentY);\n    }\n    vertex(topNextPos.x, topNextPos.y);\n    endShape(CLOSE);\n\n    step = int(random(1, 10)) / 10 * _w;\n    nextX = constrain(x + step, -_w / 2, _w / 2);\n\n    let bottomPos = createVector(x, +h / 2);\n    let bottomNextPos = createVector(nextX, +h / 2);\n\n    fill(pallete[c2]);\n\n    beginShape();\n    vertex(bottomPos.x, bottomPos.y);\n    for (let currentX = x; currentX < nextX; currentX += .1) {\n      let currentY = sin(currentX * freq) * _w / 4;\n      vertex(currentX, currentY);\n    }\n    vertex(bottomNextPos.x, bottomNextPos.y);\n    endShape(CLOSE);\n  }\n  pop();\n}\n\n\nfunction drawNoiseBackground(_n, _graphics) {\n  for (let i = 0; i < _n; i++) {\n    let x = sqrt(random(1)) * width;\n    let y = sqrt(random(1)) * height;\n    let w = random(1, 2);\n    let h = random(1, 2);\n    _graphics.noStroke();\n    _graphics.fill(0, 0, 100, 5);\n    _graphics.ellipse(x, y, w, h);\n  }\n}\n\nfunction draw() {\n\tclear();\n\tinit();\n  noLoop();\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Okazz\n\n### Response:\n",
    "completion": "let colors = ['#f78e2c', '#fdd903', '#cae509', '#81cfe5', '#15b097', '#d1603d', '#f40076', '#20a4f3', '#38187d', '#474046', '#e7e7e7'];\nlet maxSize;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tgenerate();\n}\n\nfunction generate() {\n\tmaxSize = max(width, height);\n\tlet seg = 20;\n\tlet w = maxSize / seg;\n\ttranslate((width - maxSize) / 2, (height - maxSize) / 2);\n\tbackground(240);\n\n\tnoStroke();\n\tstrokeWeight(0.1);\n\tfor (let i = -1; i < seg; i++) {\n\t\tfor (let j = -1; j < seg; j++) {\n\t\t\tlet x = i * w + w / 2;\n\t\t\tlet y = j * w + w / 2;\n\t\t\tlet a = 0;\n\t\t\tif (i % 2 == 0) a += PI;\n\t\t\tif (j % 2 == 0) a += PI;\n\t\t\tform(x, y, w, a);\n\t\t\tform(x + w / 2, y + w / 2, w, a - HALF_PI);\n\t\t}\n\t}\n}\n\nfunction form(x, y, w, a) {\n\tlet ww = w / 10;\n\tlet col1 = random(colors)\n\tlet col2 = random(colors)\n\twhile (col1 == col2) {\n\t\tcol2 = random(colors);\n\t}\n\tpush();\n\ttranslate(x, y);\n\trotate(a);\n\n\tfor (let i = 0; i < 2; i++) {\n\t\tfill(col1);\n\t\tstroke(col1);\n\t\tbeginShape();\n\t\tvertex(-0.5, ww * 5);\n\t\tvertex(ww * 1, ww * 5);\n\t\tvertex(ww * 1, ww * 3);\n\t\tvertex(ww * 2, ww * 3);\n\t\tvertex(ww * 2, ww * 1);\n\t\tvertex(ww * 4, ww * 1);\n\t\tvertex(ww * 4, ww * 2);\n\t\tvertex(ww * 5, ww * 2);\n\t\tvertex(ww * 5, 0);\n\t\tvertex(ww * 3, 0);\n\t\tvertex(ww * 3, -ww);\n\t\tvertex(ww * 4, -ww);\n\t\tvertex(ww * 4, -ww * 3);\n\t\tvertex(ww * 2, -ww * 3);\n\t\tvertex(ww * 2, -ww * 4);\n\t\tvertex(-0.5, -ww * 4);\n\t\tendShape(CLOSE);\n\n\t\tfill(col2);\n\t\tstroke(col2);\n\n\t\tbeginShape();\n\t\tvertex(-1, ww * 2);\n\t\tvertex(ww, ww * 2);\n\t\tvertex(ww, 0);\n\t\tvertex(ww * 2, 0);\n\t\tvertex(ww * 2, -ww * 2);\n\t\tvertex(ww * 1, -ww * 2);\n\t\tvertex(ww * 1, -ww * 3);\n\t\tvertex(-1, -ww * 3);\n\t\tendShape(CLOSE);\n\n\t\tscale(-1, 1);\n\t}\n\tpop();\n}\n\n\nfunction windowResized() {\n\tresizeCanvas(windowWidth, windowHeight);\n\tgenerate();\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Okazz"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Aaron Reuland (a_ soluble_fish), with tags moire effect,moire\n\n### Response:\n",
    "completion": "let theta=0\nlet p=150\nd=5\n\nfunction setup() {\n  createCanvas(600, 600);\n  noFill()\n  blendMode(DIFFERENCE)\n}\n\nfunction draw() {\n  clear()\n  background(0)\n  \n  stroke(255)\n  push()\n  translate(300, 200)\n  for(let i=25; i<450; i+=d){\n    ellipse(cos(theta)*-p, sin(theta)*-p, i)\n  }\n  pop()\n   push()\n  translate(300, 400)\n  for(let i=25; i<450; i+=d){\n    ellipse(cos(theta)*p, sin(theta)*p, i)\n  }\n  pop()\n  push()\n  translate(200, 400)\n  for(let i=25; i<450; i+=d){\n    ellipse(cos(theta)*p, sin(theta)*-p, i)\n  }\n  pop()\n   push()\n  translate(400, 200)\n  for(let i=25; i<450; i+=d){\n    ellipse(cos(theta)*-p, sin(theta)*p, i)\n  }\n  pop()\n  theta+=0.05\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Aaron Reuland (a_ soluble_fish), with tags moire effect,moire"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by kusakari, with tags gradation,noise\n\n### Response:\n",
    "completion": "let _aryObject = [];\nlet _minWidth;\nlet _grid;\n\nfunction setup() {\n  createCanvas(windowWidth, windowHeight);\n  _minWidth = min(width, height);\n  frameRate(30);\n  noStroke();\n  setObject();\n}\n\nclass Grid {\n  constructor(numTile) {\n    this.numTile = numTile;\n    this.aryGridNoiseInit = [];\n    for (let x = 0; x <= numTile; x++) {\n      this.aryGridNoiseInit[x] = [];\n      for (let y = 0; y <= numTile; y++) {\n        this.aryGridNoiseInit[x][y] = [random(1000), random(1000)]; //[x, y]\n      }\n    }\n    this.gridNoiseSpeed = 0.003;\n    this.count = 0;\n    this.minNoiseVal = 0.3;\n    let maxNoiseVal = 1;\n    this.gapNoiseVal = maxNoiseVal - this.minNoiseVal;\n  }\n\n  update() {\n    let aryGridNoiseVal = [];\n    for (let x = 0; x <= this.numTile; x++) {\n      aryGridNoiseVal[x] = [];\n      for (let y = 0; y <= this.numTile; y++) {\n        let noiseSeed = [\n          [this.aryGridNoiseInit[x][y][0], this.aryGridNoiseInit[x][y][0] + this.gridNoiseSpeed * this.count, this.gridNoiseSpeed * this.count],\n          [this.aryGridNoiseInit[x][y][1], this.aryGridNoiseInit[x][y][1] + this.gridNoiseSpeed * this.count, this.gridNoiseSpeed * this.count]]; //[x, y]\n        aryGridNoiseVal[x][y] = [\n          this.minNoiseVal + calcNoise(noiseSeed[0], 3, 1) * this.gapNoiseVal,\n          this.minNoiseVal + calcNoise(noiseSeed[1], 3, 1) * this.gapNoiseVal];\n        if (x == 0) { aryGridNoiseVal[x][y][0] = 0; }\n        if (y == 0) { aryGridNoiseVal[x][y][1] = 0; }\n      }\n    }\n\n    let aryTotalVal_x = []; //for each column\n    for (let x = 0; x <= this.numTile; x++) {\n      let currentVal = 0;\n      for (let y = 0; y <= this.numTile; y++) {\n        currentVal += aryGridNoiseVal[x][y][1];\n        aryGridNoiseVal[x][y][1] = currentVal;\n      }\n      aryTotalVal_x[x] = currentVal;\n    }\n    \n    let aryTotalVal_y = []; //for each row\n    for (let y = 0; y <= this.numTile; y++) {\n      let currentVal = 0;\n      for (let x = 0; x <= this.numTile; x++) {\n        currentVal += aryGridNoiseVal[x][y][0];\n        aryGridNoiseVal[x][y][0] = currentVal;\n      }\n      aryTotalVal_y[y] = currentVal;\n    }\n\n    this.aryGridPos = []; //[x][y][val_x, val_y]\n    for (let x = 0; x <= this.numTile; x++) {\n      this.aryGridPos[x] = [];\n      for (let y = 0; y <= this.numTile; y++) {\n        this.aryGridPos[x][y] = [\n          _minWidth * (min(1, aryGridNoiseVal[x][y][0] / aryTotalVal_y[y]) - 0.5) * 0.8,\n          _minWidth * (min(1, aryGridNoiseVal[x][y][1] / aryTotalVal_x[x]) - 0.5) * 0.8]; //[x, y] center=[0, 0]\n      }\n    }\n    this.count ++;\n  }\n}\n\nfunction setObject() {\n  let numColor = 6;\n  let numTile = 4;\n  _grid = new Grid(numTile);\n  _aryObject = [];\n  for (let x = 0; x < numTile; x++) {\n    _aryObject[x] = [];\n    for (let y = 0; y < numTile; y++) {\n      let aryGradNoiseInit = [];\n      for (let i = 0; i < numColor; i++) {\n        aryGradNoiseInit[i] = [[random(1000), random(1000)], [random(1000), random(1000)]];\n      }\n      _aryObject[x][y] = new GradationRect(\n        numColor, aryGradNoiseInit);\n    }\n  }\n}\n\nclass GradationRect {\n  constructor(numColor, aryGradNoiseInit) {    \n    this.rotateAngle = random([0, PI/2]);\n    this.numColor = numColor;\n    this.aryGradNoiseInit = aryGradNoiseInit;\n    this.gradNoiseSpeed = [random(0.001, 0.003), random(0.002, 0.005)]; //[for pos, for color]\n    this.aryGradNoise = []; //[value for pos, value for color, ratio for pos]\n    this.count = 0;\n    for (let i = 0; i < this.numColor; i++) {\n      this.aryGradNoise[i] = [0, 0, 0];\n    }\n  }\n  update() {\n    let totalNoiseValPos = 0;\n    for (let i = 0; i < this.numColor; i++) {\n      let noiseSeed;\n      noiseSeed = [this.aryGradNoiseInit[i][0][0], this.aryGradNoiseInit[i][0][1] + this.gradNoiseSpeed[0] * this.count, this.gradNoiseSpeed[0] * this.count];\n      this.aryGradNoise[i][0] = calcNoise(noiseSeed, 4, 1); //pos\n      if (i == 0) { this.aryGradNoise[i][0] = 0; }\n      totalNoiseValPos += this.aryGradNoise[i][0];\n      noiseSeed = [this.aryGradNoiseInit[i][1][0], this.aryGradNoiseInit[i][1][1] + this.gradNoiseSpeed[1] * this.count, this.gradNoiseSpeed[1] * this.count];\n      this.aryGradNoise[i][1] = calcNoise(noiseSeed, 3, 1); //color\n    }\n    let previousNoiseRatioPos = 0.0;\n    for (let i = 0; i < this.numColor; i++) {\n      previousNoiseRatioPos += this.aryGradNoise[i][0] / totalNoiseValPos;\n      this.aryGradNoise[i][2] = previousNoiseRatioPos;\n      if (this.aryGradNoise[i][2] > 1) { this.aryGradNoise[i][2] = 1.0; }\n    }\n    this.count++;\n  }\n  draw(aryGridPos, x, y) {\n    this.gridXY1 = aryGridPos[x][y];\n    this.gridXY2 = aryGridPos[x+1][y];\n    this.gridXY3 = aryGridPos[x+1][y+1];\n    this.gridXY4 = aryGridPos[x][y+1];\n    this.minX = min(this.gridXY1[0], this.gridXY4[0]);\n    this.maxX = max(this.gridXY2[0], this.gridXY3[0]);\n    this.minY = min(this.gridXY1[1], this.gridXY2[1]);\n    this.maxY = max(this.gridXY3[1], this.gridXY4[1]);\n\n    push();\n    let grad;\n    if (this.rotateAngle == 0) {\n      grad = drawingContext.createLinearGradient(0, this.minY, 0, this.maxY);\n    } else {\n      grad = drawingContext.createLinearGradient(this.minX, 0, this.maxX, 0);\n    }\n    \n    for (let i = 0; i < this.numColor; i++) {\n      grad.addColorStop(this.aryGradNoise[i][2], color(255 * this.aryGradNoise[i][1]));\n    }\n    drawingContext.fillStyle = grad;\n    drawingContext.shadowColor = color(128);\n    drawingContext.shadowBlur = _minWidth / 20;\n    beginShape();\n    vertex(this.gridXY1[0], this.gridXY1[1]);\n    vertex(this.gridXY2[0], this.gridXY2[1]);\n    vertex(this.gridXY3[0], this.gridXY3[1]);\n    vertex(this.gridXY4[0], this.gridXY4[1]);\n    endShape();\n    pop();\n  }\n}\n\nfunction calcNoise(noiseSeed, freq, d) { //noiseSeed = [x, y, z]\nlet noiseVal;\nnoiseVal = (sin(2 * PI * freq * noise(noiseSeed[0], noiseSeed[1], noiseSeed[2])) * 0.5 + 0.5) ** d;\nreturn noiseVal;\n}\n\nfunction draw() {\n  background(255);\n  translate(width/2, height/2);\n  _grid.update();\n  for (let x = 0; x < _aryObject.length; x++) {\n    for (let y = 0; y < _aryObject[x].length; y++) {\n      _aryObject[x][y].update();\n      _aryObject[x][y].draw(_grid.aryGridPos, x, y);\n    }\n  }\n}\n\n\nfunction mouseReleased() {\n  screenReset();\n}\n\nfunction screenReset() {\n  setObject();\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by kusakari, with tags gradation,noise"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by kusakari, with tags mouse,lines,tap\n\n### Response:\n",
    "completion": "let aryColors = [];\nlet radRate;\nlet aryCircles = [];\n\nfunction setup() {\n  aryColors = [color(\"#5CE5D3\"),\n              color(\"#F6978D\"), \n              color(\"#833F72\"),\n              color(\"#472261\"),\n              color(\"#10175B\")];\n  let canvasSize;\n  if (windowWidth <= windowHeight) {\n    canvasSize = windowWidth;\n  } else {\n    canvasSize = windowHeight;\n  }\n  createCanvas(canvasSize, canvasSize)\n  background(aryColors[0]);\n  strokeWeight(width/500);\n  noFill();\n  radRate = PI/1; //D  \n}\n\nfunction draw() {\n  for (i=0; i<aryCircles.length; i++) {\n    aryCircles[i].updateMe();\n  }\n}\n\nfunction mouseClicked() {\n  let newCircle;\n  newCircle = new Circle();\n  aryCircles.push(newCircle);\n}\n\nclass Circle {\n  constructor() {\n    this.endX = mouseX;\n    this.endY = mouseY;\n    this.radNew = (int(random(1, 4))) * PI / 2;\n    this.direction = true;\n    this.radPrev = this.radNew;\n    this.radCurrent = this.radNew;\n    stroke(aryColors[4]);\n  }\n\n  updateMe() {\n    if ((this.direction == true && this.radCurrent >= this.radNew) ||\n        (this.direction == false && this.radCurrent <= this.radNew)) {\n      this.radShift = random([0, PI]);\n      if (this.radShift == PI) {\n        this.direction = ! this.direction;\n      }\n      this.radPrev = (this.radNew + this.radShift) % (PI * 2);\n      this.radius = width / 10 * random(0.01, 0.1); //D\n      this.centX = this.endX - this.radius * cos(this.radPrev);\n      this.centY = this.endY - this.radius * sin(this.radPrev);\n      if (this.direction == true) {\n        this.radNew = this.radPrev + (int(random(1, 3))) * PI / 2; //90~270deg\n      } else {\n        this.radNew = this.radPrev - (int(random(1, 3))) * PI / 2; //-90~-270deg\n      }\n      this.radCurrent = this.radPrev;\n    }\n\n    if (this.direction == true) {\n      if (this.radCurrent + radRate < this.radNew) {\n        arc(this.centX, this.centY,\n          this.radius*2, this.radius*2,\n          this.radCurrent, this.radCurrent + radRate);\n        this.radCurrent = this.radCurrent + radRate;\n      } else {\n        arc(this.centX, this.centY,\n          this.radius*2, this.radius*2,\n          this.radCurrent, this.radNew);\n        this.radCurrent = this.radNew;\n        this.endX = this.centX + this.radius * cos(this.radNew);\n        this.endY = this.centY + this.radius * sin(this.radNew);\n      }\n    } else {\n      if (this.radCurrent - radRate > this.radNew) {\n        arc(this.centX, this.centY,\n          this.radius*2, this.radius*2,\n          this.radCurrent - radRate, this.radCurrent);\n        this.radCurrent = this.radCurrent - radRate;\n      } else {\n        arc(this.centX, this.centY,\n          this.radius*2, this.radius*2,\n          this.radNew, this.radCurrent);\n        this.radCurrent = this.radNew;\n        this.endX = this.centX + this.radius * cos(this.radNew);\n        this.endY = this.centY + this.radius * sin(this.radNew);\n      }\n    }\n  }\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by kusakari, with tags mouse,lines,tap"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by reona396\n\n### Response:\n",
    "completion": "const canvasMag = 0.4;\nconst emoji = [\"\ud83e\udd84\", \"\ud83e\udddc\u200d\u2640\ufe0f\", \"\ud83c\udfbb\", \"\ud83e\udd5e\"];\nconst palette = [\"#2c2d1d\", \"#5b5940\", \"#66664e\", \"#a6a48b\", \"#cfceaf\"];\nconst bg = \"#cfceaf\";\n\nfunction setup() {\n  createCanvas(2123 * canvasMag, 1461 * canvasMag);\n  pixelDensity(1 / canvasMag);\n  imageMode(CENTER);\n\n  noLoop();\n}\n\nfunction draw() {\n  background(bg);\n\n  let pg = createGraphics(width, height);\n  pg.background(255);\n  pg.textAlign(CENTER, CENTER);\n  pg.textSize(500);\n  pg.text(random(emoji), pg.width / 2, pg.height / 2);\n  // image(pg, pg.width/2, pg.height/2);\n\n  const squareSize = 10;\n  const numX = floor(width / squareSize);\n  const numY = floor(height / squareSize);\n  for (let i = 0; i < numX; i++) {\n    for (let j = 0; j < numY; j++) {\n      let c = pg.get(i * squareSize, j * squareSize);\n      let bri = brightness(color(c));\n      let index = floor(map(bri, 0, 100, 0, palette.length - 1));\n\n      // console.log(index);\n      fill(palette[index]);\n      noStroke();\n      square(i * squareSize, j * squareSize, squareSize);\n    }\n  }\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by reona396"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by kusakari, with tags 3D,noise\n\n### Response:\n",
    "completion": "let _colH;\nlet _maxRingR;\nlet _ringNum;\nlet _tubeR;\nlet _noiseStepR;\nlet _noiseStepT;\nlet _aryNoise = [];\nlet _aryRing = [];\n\nfunction setup() {\n  let canvasSize;\n  if (windowWidth <= windowHeight) {\n    canvasSize = windowWidth;\n  } else {\n    canvasSize = windowHeight;\n  }\n  createCanvas(canvasSize, canvasSize, WEBGL);\n  setAttributes('premultipliedAlpha', true);\n  frameRate(30);\n  noStroke();\n  colorMode(HSB, 360, 100, 100, 255);\n  _colH = random(360);\n  _maxRingR = width/2;\n  _ringNum = 16;\n  _tubeR = _maxRingR / (_ringNum+1) / 2;\n  _noiseStepR = 0.04;\n  _noiseStepT = 0.006;\n\n  let initNoiseX = random(100);\n  let initNoiseY = random(100);\n  let initNoiseZ = random(100);\n  for (let i = 0; i < _ringNum; i++) {\n    //ring radius, tube raduis, color H\n    _aryRing[i] = [_maxRingR / (_ringNum + 1) * (i + 1), _tubeR, (_colH + 180 / _ringNum * i) % 360];\n    _aryNoise[i] = [initNoiseX + _noiseStepR * i, initNoiseY + _noiseStepR * i, initNoiseZ + _noiseStepR * i];\n  }\n}\n\nfunction draw() {\n  background((_colH+120)%360, 20, 100);\n  directionalLight(0, 0, 100, -1, 1, 0);\n  ambientLight(30);\n\n  ortho(-width/2, width/2, -width/2, width/2, 0, width*2);\n\n  for (let i = 0; i < _ringNum; i++) {\n    for (let j = 0; j < 3; j++) {\n      _aryNoise[i][j] += _noiseStepT;\n    }\n    push();\n    let freq = 3;\n    rotateX(freq*2*PI*noise(_aryNoise[i][0]));\n    rotateY(freq*2*PI*noise(_aryNoise[i][1]));\n    rotateZ(freq*2*PI*noise(_aryNoise[i][2]));\n    ambientMaterial(_aryRing[i][2], 100, 100);\n    torus(_aryRing[i][0], _aryRing[i][1], 128, 32);\n    pop();\n  }\n}\n\nfunction mouseReleased() {\n  _aryNoise = [];\n  _aryRing = [];\n  _colH = random(360);\n  _maxRingR = width/2;\n  _ringNum = 16;\n  _tubeR = _maxRingR / (_ringNum+1) / 2;\n  _noiseStepR = 0.04;\n  _noiseStepT = 0.006;\n\n  let initNoiseX = random(100);\n  let initNoiseY = random(100);\n  let initNoiseZ = random(100);\n  for (let i = 0; i < _ringNum; i++) {\n    //ring radius, tube raduis, color H\n    _aryRing[i] = [_maxRingR / (_ringNum + 1) * (i + 1), _tubeR, (_colH + 180 / _ringNum * i) % 360];\n    _aryNoise[i] = [initNoiseX + _noiseStepR * i, initNoiseY + _noiseStepR * i, initNoiseZ + _noiseStepR * i];\n  }\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by kusakari, with tags 3D,noise"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Almina\n\n### Response:\n",
    "completion": "/**\n * color pallet\n */\n// let curl = \"https://coolors.co/555233-df921d-878937-cfc52A-dc2a41\";\n// let curl = \"https://coolors.co/171219-225560-edf060-f0803c-310d20\";\nlet curl = \"https://coolors.co/223843-eff1f3-dbd3d8-d8b4a0-d77a61\";\n\nlet bgColor;\nlet seed, noiseArg;\nlet num;\nlet obj;\nlet prev_id, next_id;\n\nfunction setup() {\n  createCanvas(600, 600);\n  // colorMode(HSB, 360, 100, 100, 100);\n  angleMode(DEGREES);\n  background(255);\n  // noLoop();\n  frameRate(0.5);\n\n  pal = createPallete(curl);\n  let cid = int(random(pal.length));\n  bgColor = pal[cid];\n  pal.splice(cid, 1);\n  pal = shuffle(pal);\n  \n  seed = random(1e+4);\n  noiseArg = random(1e+4);\n\n  // background(bgColor);\n  // effect();  // noise effect\n}\n\nfunction draw() {\n  // randomSeed(seed);\n  background(bgColor);\n\tpal = shuffle(pal);\n  \n  let obj;\n  let d = 60;\n  let margin = -d/2;\n  let col = 10,  row = 3;\n  let c1, c2;\n  for (let k = 0; k < 4; k++) {\n    for (let i = 0; i <= col; i++) {\n      for (let j = 1; j <= row-1; j++) {\n        c1 = lerpColor(pal[0], pal[2], map(margin+d*j, 0, height, 0, 1));\n        c2 = lerpColor(pal[1], pal[3], map(margin+d*j, 0, height, 0, 1));\n        obj = new Tile1(d/2+d*i, margin+d*j, d, c1, c2);  obj.draw();\n      }\n      c1 = lerpColor(pal[0], pal[2], map(margin+d*row, 0, height, 0, 1));\n      c2 = lerpColor(pal[1], pal[3], map(margin+d*row, 0, height, 0, 1));\n      obj = new Tile2(d/2+d*i, margin+d*row, d, c2, c1);  obj.draw();\n    }\n    margin += d*row;\n    d /= 2;  col *= 2;  row *= 2;\n    margin += d/2;\n  }\n  \n  noStroke();  fill(bgColor);\n  beginShape();\n  for (let i = 0; i <= 360; i++) {\n    vertex(cos(i)*250+300, sin(i)*250+300);\n  }\n  vertex(600, 600);\n  vertex(600,   0);\n  vertex(  0,   0);\n  vertex(  0, 600);\n  vertex(600, 600);\n  endShape();\n  \n  strokeWeight(10);  stroke(bgColor);  noFill();\n  circle(300, 300, 470);\n\n  noiseArg += 2e-3;\n\n  // effect();\n  drawWindow();\n}\n\nclass Tile1 {\n  constructor(_x, _y, _d, _c1, _c2) {\n    this.x = _x;\n    this.y = _y;\n    this.d = _d;\n    this.c1 = _c1;  this.c2 = _c2;\n  }\n  \n  draw() {\n    push();\n    translate(this.x, this.y);\n    rotate(int(random(4)) * 90);\n    // stroke(300);  fill(this.c1);\n    noStroke();  fill(this.c1);\n    rectMode(CENTER);\n    rect(0, 0, this.d, this.d);\n    rectMode(CORNER);\n    \n    let mode = int(random(5));\n    if (mode == 0) {\n      noStroke();  fill(this.c2);\n      arc(this.d/2, this.d/2, this.d*2/3*2, this.d*2/3*2, 180, 270);\n      noStroke();  fill(this.c1);\n      arc(this.d/2, this.d/2, this.d*2/3*1, this.d*2/3*1, 180, 270);\n    \n      noStroke();  fill(this.c2);\n      arc(-this.d/2, -this.d/2, this.d*2/3*2, this.d*2/3*2, 0, 90);\n      noStroke();  fill(this.c1);\n      arc(-this.d/2, -this.d/2, this.d*2/3*1, this.d*2/3*1, 0, 90);\n    } else if (mode == 1) {\n      noStroke();  fill(this.c2);\n      rectMode(CENTER);\n      rect(0, 0, this.d / 3, this.d);\n      rect(0, 0, this.d, this.d / 3);\n      rectMode(CORNER);\n    } else if (mode == 2) {\n      noStroke();  fill(this.c2);\n      rect(-this.d/2, -this.d/2, this.d/3*2, this.d);\n      arc(this.d/2, 0, this.d*2/3/2, this.d*2/3/2, 90, 270);\n      noStroke();  fill(this.c1);\n      arc(-this.d/2, -this.d/2, this.d*2/3*1, this.d*2/3*1, 0, 90);\n      arc(-this.d/2,  this.d/2, this.d*2/3*1, this.d*2/3*1, 270, 360);\n    } else if (mode == 3) {\n      noStroke();  fill(this.c2);\n      arc( this.d/2, 0, this.d/3, this.d/3, 90, -90);\n      arc(-this.d/2, 0, this.d/3, this.d/3, -90, 90);\n      arc(0,  this.d/2, this.d/3, this.d/3, -180, 0);\n      arc(0, -this.d/2, this.d/3, this.d/3, 0, 180);\n    } else if (mode == 4) {\n      noStroke();  fill(this.c2);\n      arc(-this.d/2, 0, this.d/3, this.d/3, -90, 90);\n      arc(0, -this.d/2, this.d/3, this.d/3, 0, 180);\n      arc(this.d/2, this.d/2, this.d*2/3*2, this.d*2/3*2, -180, -90);\n      noStroke();  fill(this.c1);\n      arc(this.d/2, this.d/2, this.d*2/3*1, this.d*2/3*1, -180, -90);\n    } else {\n      noStroke();  fill(this.c2);\n      arc( this.d/2, 0, this.d/3, this.d/3, 90, -90);\n      arc(-this.d/2, 0, this.d/3, this.d/3, -90, 90);\n      rectMode(CENTER);\n      rect(0, 0, this.d/3, this.d*2);\n      rectMode(CORNER);\n    }\n    \n    pop();\n  }\n}\n\nclass Tile2 {\n  constructor(_x, _y, _d, _c1, _c2) {\n    this.x = _x;\n    this.y = _y;\n    this.d = _d;\n    this.c1 = _c1;  this.c2 = _c2;\n  }\n  \n  draw() {\n    push();\n    translate(this.x, this.y);\n    noStroke();  fill(this.c1);\n    rectMode(CENTER);\n    rect(0, 0, this.d, this.d);\n    rectMode(CORNER);\n    \n    noStroke();  fill(this.c2);\n    arc(-this.d/2, -this.d/2, this.d*2/3*1, this.d*2/3*1, 0, 90);\n    noStroke();  fill(this.c2);\n    arc( this.d/2, -this.d/2, this.d*2/3*1, this.d*2/3*1, 90, 180);\n    noStroke();  fill(this.c2);\n    arc(-this.d/2,  this.d/2, this.d*2/6*1, this.d*2/6*1, 270, 360);\n    noStroke();  fill(this.c2);\n    arc(        0,  this.d/2, this.d*2/6*1, this.d*2/6*1, 180, 360);\n    noStroke();  fill(this.c2);\n    arc( this.d/2,  this.d/2, this.d*2/6*1, this.d*2/6*1, 180, 270);\n\t\t\n    pop();\n  }\n}\n\nfunction easeInQuart(t) {\n  return 1 + (--t) * t * t * t * t;\n}\n\nfunction easeInOutQuart(t) {\n  return t < 0.5 ? 8*t*t*t*t : 1-8*(--t)*t*t*t;\n}\n\nfunction easeInElastic(t) {\n  return (0.01 - 0.01 / t) * Math.sin(60 * t) + 1;\n}\n\nfunction keyPressed() {\n  if (keyCode == ENTER) {\n    save('200124.png');\n  }\n}\n\nfunction effect() {\n  strokeWeight(1);\n  for (let i = 0; i < width * height * 5 / 100; i++) {\n    stroke(0, 0, 0, 10);\n    let px = random(width);\n    let py = random(height);\n    point(px, py);\n  }\n}\n\nfunction drawWindow() {\n  w = width / 30;\n  noStroke();\n  fill(255);\n  rect(0, 0, width, w);\n  rect(0, height - w, width, w);\n  rect(0, 0, w, height);\n  rect(width - w, 0, w, height);\n}\n\nfunction createPallete(_url) {\n  let slash_index = _url.lastIndexOf('/');\n  let pallate_str = _url.slice(slash_index + 1);\n  let arr = pallate_str.split('-');\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = color('#' + arr[i]);\n  }\n  return arr;\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Almina"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Almina\n\n### Response:\n",
    "completion": "/**\nThanks for greatful reference ->\n\thttps://qiita.com/inaba_darkfox/items/5fec0b47158c726e5274?utm_campaign=post_article&utm_medium=twitter&utm_source=twitter_share\n\tby mathfoxLab (https://openprocessing.org/user/161812?view=sketches)\n\t\nDescription:\n\tThis is example for basic particle system using vertex shader on p5.js.\n\tParticles are controlled by updating vbo dynamic in p5.js, not shader.\n\tThe movement of each particle is processed by cpu, but it is achieve about 60 fps in 10000 particles.\n\tYou can change animation easily by modify code of the function \"setPositions\".\n**/\n\nlet pBuf;\nlet _gl, gl;\nlet myPointShader;\n\nconst NUM = 120;\nconst POINT_NUM = NUM * NUM;\nlet positions = new Float32Array(POINT_NUM * 3);  // type \u3092\u5909\u66f4\u3057\u306a\u3044\u3053\u3068\n\nlet _SIZE;\n\nlet vsPoint =\n\"precision mediump float;\" +\n\"attribute vec3 aPosition;\" +\n\"attribute float aIndex;\" +\n\"uniform mat4 uModelViewMatrix;\" +\n\"uniform mat4 uProjectionMatrix;\" +\n\"uniform float uCount;\" +\n\"void main() {\" +\n\"  vec4 positionVec4 =  vec4(aPosition, 1.0);\" +\n\"  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\" +  // vertex shader \u5074\u306f\u4f55\u3082\u3057\u306a\u3044 (pointing \u3059\u308b\u3060\u3051)\n\"  gl_PointSize = 2.;\" +\n\"}\";\n\nlet fsPoint =\n\"precision mediump float;\" +\n\"precision mediump int;\" +\n\"void main(){\" +\n\"  gl_FragColor = vec4(1.);\" +  // fragment shader \u5074\u306f\u4f55\u3082\u3057\u306a\u3044 (color mapping \u3059\u308b\u3060\u3051)\n\"}\";\n\nlet bg;\n\nfunction setup(){\n  // _gl = createCanvas(w=600, w, WEBGL);\n  _gl = createCanvas(windowWidth, windowHeight, WEBGL);\n  _SIZE = min(width, height);\n\n  gl = _gl.GL;\n  myPointShader = createShader(vsPoint, fsPoint);\n}\n\nfunction draw() {\n  background(0);\n  shader(myPointShader);\n  myPointShader.setUniform(\"uCount\", frameCount);  // custom uniform\n\n  myDrawPoints(POINT_NUM);\n}\n\nfunction myDrawPoints(num){\n  /* Create vbo (vertex buffer object), manually (\u76f4\u63a5 vbo \u3092\u4f5c\u6210\u3059\u308b) */\n  const gId = `myPoints|${num}`;\n  if(!this._renderer.geometryInHash(gId)){\n    const myPointsGeom = new p5.Geometry();\n    let v = createVector();\n    for(let i = 0; i < num; i++){\n      myPointsGeom.vertices.push(v.copy());\n    }\n    pBuf = this._renderer.createBuffers(gId, myPointsGeom);\n  }\n\n  /* Set attributes as dynamic, manually (\u76f4\u63a5 vbo \u3092\u52d5\u7684\u306b\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b) */\n  _gl._setPointUniforms(myPointShader);\n  _gl._bindBuffer(_gl.immediateMode.buffers.point, gl.ARRAY_BUFFER,\n                  _gl._vToNArray(pBuf.model.vertices), Float32Array, gl.DYNAMIC_DRAW);\n  myPointShader.enableAttrib(myPointShader.attributes.aPosition, 3);\n\n  setPositions();\n\n  gl.bufferSubData(gl.ARRAY_BUFFER, 0, positions);\n  gl.drawArrays(gl.Points, 0, pBuf.model.vertices.length);\n}\n\n/** Set vertices position (\u70b9\u306e\u52d5\u304d\u306f p5.js \u5074\u3067\u64cd\u4f5c\u3059\u308b) **/\nfunction setPositions(){\n  let x, y;\n  for(let i = 0; i < POINT_NUM; i++){\n    x = 2 * (i % NUM) / NUM - 1;\n    y = 2 * floor(i / NUM) / NUM - 1;\n    x *= _SIZE * 0.4;\n    y *= _SIZE * 0.4;\n    x = map(i%NUM,0,NUM-1,-250,250);\n    y = map((i/NUM)%NUM,0,NUM-1,-250,250);\n    positions[i * 3] = x;\n    positions[i * 3 + 1] = y;\n    positions[i * 3 + 2] = sin(x/25+y/25+frameCount/30)*30;\n  }\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Almina"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Senbaku, with tags noise\n\n### Response:\n",
    "completion": "//2021-03-13@senbaku\nlet noiseT = 0.0\nlet ran;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tbackground(220)\n\tran = random(10)\n}\n\nfunction draw() {\n\tbackground(220, 3)\n\trandomSeed(ran);\n\tfor (let i = 0; i < 20; i++) {\n\t\tnoiseCircle(random(width), random(height));\n\t}\n}\n\nfunction noiseCircle(a, b) {\n\t//\u53c2\u8003: @deconbatch https://note.com/deconbatch/n/nc14219bfacc6?magazine_key=m5512019b8626\n\tlet xInit = a;\n\tlet yInit = b;\n\tlet rBase = random(5, 30);\n\tlet rDiv = width * (random(0.08, 0.1));\n\t\n\tlet cols = shuffle(createPalette(\"https://coolors.co/dbe9b8-f5deb3-f6a8aa-f5a2aa-9862a3-3256a7-4373ad-b5d6d6-a3d0c3\"));\n\tnoFill();\n\tstrokeWeight(0.1);\n\tlet num = random(1, 100)\n\t\n\tbeginShape();\n\tstroke(0)\n\tfor (let radian = 0.0; radian < TWO_PI; radian += 0.1) {\n\t\tlet pN = noise(xInit + (rBase) * cos(radian) * 0.05, yInit + (rBase) * sin(radian) * 0.05, noiseT);\n\t\tlet pR = (rBase - ((num / 10) * sin(noiseT * num)) % 30) + rDiv * noise(pN);\n\t\tlet pX = xInit + pR * cos(radian);\n\t\tlet pY = yInit + pR * sin(radian);\n\t\tcurveVertex(pX, pY);\n\t\tpush();\n\t\tstroke(cols[2])\n\t\tstrokeWeight(random(0.1, 10))\n\t\tpoint(pX, pY);\n\t\tpop();\n\n\t}\n\tendShape(CLOSE);\n\tnoiseT += 0.001;\n}\n//this is sayama(@hyappy717)'s code(https://openprocessing.org/sketch/1102169)\nfunction createPalette(url) {\n\tlet slashIndex = url.lastIndexOf(\"/\"); //\u4e00\u756a\u5f8c\u308d\u306e\"/\"\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n\tlet colStr = url.slice(slashIndex + 1);\n\t// \"3a4f41-b9314f-d5a18e-dec3be-e1dee3\"\n\n\tlet cols = colStr.split(\"-\");\n\t//[\"3a4f41\", \"b9314f\", \"d5a18e\", \"dec3be\", \"e1dee3\"]\n\n\tfor (let i = 0; i < cols.length; i++) cols[i] = \"#\" + cols[i]; //\u6587\u5b57\u5217\u306b#\u3092\u3064\u3051\u308b\n\t//[\"#3a4f41\", \"#b9314f\", \"#d5a18e\", \"#dec3be\", \"#e1dee3\"]\n\treturn cols;\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Senbaku, with tags noise"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Clay Heaton\n\n### Response:\n",
    "completion": "let d;\nlet r;\nlet a;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tbackground(100);\n\td = 200;\n\tr = d/2;\n\ta = 90;\n\tangleMode(RADIANS);\n}\n\nfunction draw() {\n\tbackground(255);\n\tstroke(0);\n\tnoFill();\n\tpush();\n\ttranslate(width/2, height/2);\n\tellipse(0, 0, d, d);\n\tnoStroke();\n\t\n\tfill(255, 0, 0);\n\tlet x = cos(radians(a))*r;\n  let y = sin(radians(a))*r;\n\tellipse(x, y, 10, 10);\n\tnoFill();\n\t\n\tpop();\n\ta += 1;\n\t\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Clay Heaton"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by kusakari\n\n### Response:\n",
    "completion": "let _obj = [];\nlet _bgWidth;\nlet _minWidth;\nlet _xy = [];\nlet _numObject;\nlet _shifAmp;\nlet _clearanceRatio;\nlet _palette = [];\n\nfunction setup() {\n  createCanvas(windowWidth, windowHeight, WEBGL);\n  setAttributes(\"alpha\", false);\n  _bgWidth = min(width, height);\n  _minWidth = _bgWidth * 0.95;\n\n  frameRate(0.5);\n  fill(255);\n  stroke(0);\n\n  background(255);\n  setObject();\n  rotate(PI/2 * int(random(2)));\n  \n  for (let i = 0; i < _obj.length; i++) {\n    if (i == 1) { rotate(PI); }\n    _obj[i].update(_xy[i][0], _xy[i][1], _xy[i][2]);\n    _obj[i].draw();\n  }\n}\n\nfunction setObject() {\n  setCol();\n\n  let num = 2;\n  _shiftAmp = _minWidth / random(10, 100);\n  _clearanceRatio = random();\n  strokeWeight(_shiftAmp * random());\n  for (let i = 0; i < num; i++) {\n    _obj[i] = new Obj(1);\n    _xy[i] = [];\n    _xy[i][0] = createVector(_minWidth / 2, _minWidth / 2);\n    _xy[i][1] = createVector(-_minWidth / 2, _minWidth / 2);\n    _xy[i][2] = createVector(_minWidth / 2, -_minWidth / 2);\n\n    _xy[i] = _obj[i].resizeObjectFixedShift(_xy[i][0], _xy[i][1], _xy[i][2], _shiftAmp);\n  }\n}\n\nfunction setCol() {\n  let numCol = 4;//4;\n  for (let i = 0; i < numCol; i++) {\n    _palette[i] = color(random(255), random(255), random(255));\n  }\n}\n\nclass Obj {\n  constructor(splitNumCurrent) {\n    this.splitNumCurrent = splitNumCurrent;\n    this.splitNumLimit = 12;\n    this.shiftAmp = _shiftAmp;//_minWidth / 50;\n    this.clearanceRatio = _clearanceRatio;\n    this.arySubObject = [];\n\n    let splitProbability = 1;\n    if ((splitNumCurrent < this.splitNumLimit && random() < splitProbability) || this.splitNumCurrent == 1) { this.splitObject(); }\n  }\n  splitObject() {\n    this.arySubObject = [\n      new Obj(this.splitNumCurrent + 1),\n      new Obj(this.splitNumCurrent + 1)];\n  }\n  update(xy1, xy2, xy3) {\n    this.xy1 = xy1;\n    this.xy2 = xy2;\n    this.xy3 = xy3;\n    this.subDisplay = [true, true];\n\n    if (this.arySubObject.length > 0) {\n      let splitRatio = random();\n\n      let sub1_xy1 = p5.Vector.lerp(xy2, xy3, splitRatio);\n      let sub1_xy2;\n      let sub1_xy3;\n      if (this.splitNumCurrent % 2 == 1) {\n        sub1_xy2 = xy3;\n        sub1_xy3 = xy1;\n      } else {\n        sub1_xy2 = xy1;\n        sub1_xy3 = xy2;\n      }\n      let aryXy_s1 = this.resizeObjectFixedShift(sub1_xy1, sub1_xy2, sub1_xy3, this.shiftAmp);\n      this.subDisplay[0] = aryXy_s1[3];\n      if (this.subDisplay[0] == true) {\n        this.arySubObject[0].update(aryXy_s1[0], aryXy_s1[1], aryXy_s1[2]);\n      }\n\n      let sub2_xy1 = p5.Vector.lerp(xy2, xy3, splitRatio);\n      let sub2_xy2;\n      let sub2_xy3;\n      if (this.splitNumCurrent % 2 == 1) {\n        sub2_xy2 = xy1;\n        sub2_xy3 = xy2;\n      } else {\n        sub2_xy2 = xy3;\n        sub2_xy3 = xy1;\n      }\n      let aryXy_s2 = this.resizeObjectFixedShift(sub2_xy1, sub2_xy2, sub2_xy3, this.shiftAmp);\n      this.subDisplay[1] = aryXy_s2[3];\n      if (this.subDisplay[1] == true) {\n        this.arySubObject[1].update(aryXy_s2[0], aryXy_s2[1], aryXy_s2[2]);\n      }\n    }\n    this.count++;\n  }\n  draw() {\n    let col = random(_palette);\n    let col2 = color(255);\n\n    noStroke();\n    fill(col);\n    this.drawOuterLineFillGradiennt(col, col2);\n\n    if (this.arySubObject.length != 0) {\n      if (this.subDisplay[0] == true) {\n        this.arySubObject[0].draw();\n      }\n      if (this.subDisplay[1] == true) {\n        this.arySubObject[1].draw();\n      }\n    }\n  }\n\n  calculateCross(xy1, xy2, xy3, xy4) {\n    //ax+by+c=0\n    let a1 = xy1.y - xy2.y;\n    let b1 = xy2.x - xy1.x;\n    let c1 = xy1.x * xy2.y - xy2.x * xy1.y;\n    let a2 = xy3.y - xy4.y;\n    let b2 = xy4.x - xy3.x;\n    let c2 = xy3.x * xy4.y - xy4.x * xy3.y;\n    //cross point of line xy1-2 and line xy3-4\n    let xcross = (b1*c2 - b2*c1) / (a1*b2 - a2*b1);\n    let ycross = (a2*c1 - a1*c2) / (a1*b2 - a2*b1);\n    let cross = createVector(xcross, ycross);\n\n    return cross;\n  }\n\n  crossSign(xy1, xy2, xy3) { //if xy1 is above line xy2-xy3 or not\n    //ax+by+c=0\n    let a = xy2.y - xy3.y;\n    let b = xy3.x - xy2.x;\n    let c = xy2.x * xy3.y - xy3.x * xy2.y;\n    let xy1PosSign = a * xy1.x + b * xy1.y + c;\n    \n    return xy1PosSign;\n  }\n\n  resizeObjectFixedShift(xy1, xy2, xy3, shiftAmp) {\n    let display = true;\n\n    let vertVec12 = p5.Vector.sub(xy2, xy1);\n    vertVec12.setHeading(vertVec12.heading() + PI / 2);\n    vertVec12.setMag(shiftAmp);\n    let vertVec23 = p5.Vector.sub(xy3, xy2);\n    vertVec23.setHeading(vertVec23.heading() + PI / 2);\n    vertVec23.setMag(shiftAmp);\n    let vertVec31 = p5.Vector.sub(xy1, xy3);\n    vertVec31.setHeading(vertVec31.heading() + PI / 2);\n    vertVec31.setMag(shiftAmp);\n\n    let xy1_shiftVert12 = p5.Vector.add(xy1, vertVec12);\n    let xy2_shiftVert12 = p5.Vector.add(xy2, vertVec12);\n    let xy2_shiftVert23 = p5.Vector.add(xy2, vertVec23);\n    let xy3_shiftVert23 = p5.Vector.add(xy3, vertVec23);\n    let xy3_shiftVert31 = p5.Vector.add(xy3, vertVec31);\n    let xy1_shiftVert31 = p5.Vector.add(xy1, vertVec31);\n\n    let xy1s = this.calculateCross(xy3_shiftVert31, xy1_shiftVert31, xy1_shiftVert12, xy2_shiftVert12);\n    let xy2s = this.calculateCross(xy1_shiftVert12, xy2_shiftVert12, xy2_shiftVert23, xy3_shiftVert23);\n    let xy3s = this.calculateCross(xy2_shiftVert23, xy3_shiftVert23, xy3_shiftVert31, xy1_shiftVert31);\n\n    let cross_xy1 = this.crossSign(xy1, xy2s, xy3s);\n    let cross_xy1s = this.crossSign(xy1s, xy2s, xy3s);\n    if (cross_xy1 * cross_xy1s <= 0) { display = false; }\n    let cross_xy2 = this.crossSign(xy2, xy3s, xy1s);\n    let cross_xy2s = this.crossSign(xy2s, xy3s, xy1s);\n    if (cross_xy2 * cross_xy2s <= 0) { display = false; }\n    let cross_xy3 = this.crossSign(xy3, xy1s, xy2s);\n    let cross_xy3s = this.crossSign(xy3s, xy1s, xy2s);\n    if (cross_xy3 * cross_xy3s <= 0) { display = false; }\n    \n    let cross_xy1_23 = this.crossSign(xy1, xy2, xy3);\n    let cross_xy1s_23 = this.crossSign(xy1s, xy2, xy3);\n    if (cross_xy1_23 * cross_xy1s_23 <= 0) { display = false; }\n    let cross_xy2_31 = this.crossSign(xy2, xy3, xy1);\n    let cross_xy2s_31 = this.crossSign(xy2s, xy3, xy1);\n    if (cross_xy2_31 * cross_xy2s_31 <= 0) { display = false; }\n    let cross_xy3_12 = this.crossSign(xy3, xy1, xy2);\n    let cross_xy3s_12 = this.crossSign(xy3s, xy1, xy2);\n    if (cross_xy3_12 * cross_xy3s_12 <= 0) { display = false; }\n\n    return [xy1s, xy2s, xy3s, display];\n  }\n\n  drawOuterLineFillGradiennt(colCent, colEdge) {\n    let mid_2_3 = p5.Vector.lerp(this.xy2, this.xy3, 0.5);\n    let mid_3_1 = p5.Vector.lerp(this.xy3, this.xy1, 0.5);\n    let centxy = this.calculateCross(this.xy1, mid_2_3, this.xy2, mid_3_1);\n\n    let aryCorner1 = this.calcOuterCorner(this.xy3, this.xy1, this.xy2);\n    let aryCorner2 = this.calcOuterCorner(this.xy1, this.xy2, this.xy3);\n    let aryCorner3 = this.calcOuterCorner(this.xy2, this.xy3, this.xy1);\n    beginShape();\n    fill(colCent);\n    vertex(centxy.x, centxy.y);\n    fill(colEdge);\n    for (let i = 0; i < aryCorner1.length; i++) {\n      vertex(aryCorner1[i].x, aryCorner1[i].y);\n    }\n    fill(colEdge);\n    for (let i = 0; i < aryCorner2.length; i++) {\n      vertex(aryCorner2[i].x, aryCorner2[i].y);\n    }\n    for (let i = 0; i < aryCorner3.length; i++) {\n      vertex(aryCorner3[i].x, aryCorner3[i].y);\n    }\n    vertex(aryCorner1[0].x, aryCorner1[0].y);\n    endShape(CLOSE);\n  }\n\n  calcOuterCorner(xy1, xy2, xy3) { //corner = xy2\n    let xy21 = p5.Vector.sub(xy1, xy2);\n    let xyCent21 = xy21.setMag(this.shiftAmp * this.clearanceRatio).rotate(PI/2);\n    let xy23 = p5.Vector.sub(xy3, xy2);\n    let xyCent23 = xy23.setMag(this.shiftAmp * this.clearanceRatio).rotate(-PI/2);\n    let angOuterXy2 = abs(xyCent21.angleBetween(xyCent23));\n\n    let aryCornerXy = [];\n    let numAngSplit = 32;\n    let stepAng = angOuterXy2 / numAngSplit;\n    for (let i = 0; i < numAngSplit + 1; i++) {\n      aryCornerXy.push(p5.Vector.add(xy2, xyCent21));\n      xyCent21.rotate(stepAng);\n    }\n\n    return aryCornerXy;\n  }\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by kusakari"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "let img = [];\nlet img_num = 10;\n\nfunction preload() {\n\tfor (let i = 0; i < img_num; i++) {\n\t\timg.push(loadImage(\"https://picsum.photos/800/800?random=\" + i * 100));\n\t}\n}\n\nlet graphics = [];\n\nfunction setup() {\n\tcreateCanvas(800, 800);\n\tfor (let i = 0; i < img.length; i++) {\n\t\tlet g = createGraphics(width, height);\n\t\tg.angleMode(DEGREES);\n\t\tgraphics.push(g);\n\t}\n}\n\nfunction draw() {\n\tlet imgs_copy = shuffle(img.concat());\n\n\tfor (let i = 0; i < graphics.length; i++) {\n\t\tgraphics[i].clear();\n\t\t// graphics[i].background(colors[i]);\n\t\tgraphics[i].image(imgs_copy[i], 0, 0);\n\t\tgraphics[i].filter(GRAY);\n\t\t// graphics[i].filter(THRESHOLD);\n\n\n\t}\n\n\tlet offset = width / 25;\n\tlet x = offset;\n\tlet y = offset;\n\tlet d = width - offset * 2;\n\n\tdrawingContext.shadowColor = color(0, 25 / 100 * 255);\n\tdrawingContext.shadowBlur = offset / 2;\n\t\n\tseparateGrid(x, y, d, 100, graphics);\n\tfor (let g of graphics) {\n\t\timage(g, 0, 0);\n\t}\n\tframeRate(1);\n}\n\nfunction separateGrid(x, y, d, minD, graphics) {\n\tlet sepNum = int(random(1, 4));\n\tlet w = d / sepNum;\n\tfor (let i = x; i < x + d - 1; i += w) {\n\t\tfor (let j = y; j < y + d - 1; j += w) {\n\t\t\tif (random(100) < 90 && w > minD) {\n\t\t\t\tseparateGrid(i, j, w, minD, graphics);\n\t\t\t} else {\n\t\t\t\tlet n = 0;\n\t\t\t\tlet shapeNum = int(random(4));\n\t\t\t\tlet rotateNum = int(random(4)) * 360 / 4;\n\n\t\t\t\tfor (let g of graphics) {\n\t\t\t\t\tlet m = map(n, 0, img.length - 1, 0, 1);\n\t\t\t\t\tg.push();\n\t\t\t\t\tg.translate(i + w / 2, j + w / 2);\n\t\t\t\t\tg.erase();\n\t\t\t\t\tswitch (shapeNum) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tg.scale(m);\n\t\t\t\t\t\t\tg.circle(0, 0, w);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tg.rectMode(CENTER);\n\t\t\t\t\t\t\tg.scale(m);\n\t\t\t\t\t\t\tg.rect(0, 0, w);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tg.scale(m);\n\t\t\t\t\t\t\tg.rotate(rotateNum);\n\t\t\t\t\t\t\tg.triangle(-w / 2, -w / 2, -w / 2, w / 2, w / 2, w / 2);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\tg.rotate(rotateNum);\n\t\t\t\t\t\t\tg.arc(-w / 2, -w / 2, w * 2 * m, w * 2 * m, 0, 90);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tg.noErase();\n\t\t\t\t\tg.pop();\n\t\t\t\t\tn++;\n\t\t\t\t}\n\t\t\t\t// g.rect(i, j, w, w);\n\t\t\t}\n\t\t}\n\t}\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by kusakari, with tags grid,random\n\n### Response:\n",
    "completion": "let _aryColor = [];\nlet _bgColor;\nlet _aryNoiseSeed = [];\nlet _tileNum;\nlet _tileNumZ;\nlet _r;\nlet _areaRatio;\nlet _aryPos = [];\nlet _aryObject = [];\nlet _noiseSeed;\n\nfunction setup() {\n  let canvasSize;\n  if (windowWidth <= windowHeight) {\n    canvasSize = windowWidth;\n  } else {\n    canvasSize = windowHeight;\n  }\n  createCanvas(canvasSize, canvasSize);\n  frameRate(30);\n  noStroke();\n  ellipseMode(RADIUS);\n\n  _aryColor = [\n    color(\"#3B7590\"),\n    color(\"#56A28A\"),\n    color(\"#BED0A7\"),\n    color(\"#F2D6B7\"),\n    color(\"#D69093\"),\n    color(\"#FAECCF\")];\n  _bgColor = random(_aryColor);\n  \n  _noiseSeed = random(10);\n\n  _tileNum = 20;\n  _tileNumZ = _tileNum * 1.8;\n  for (let iZ = 0; iZ < _tileNumZ; iZ++) {\n    _aryNoiseSeed[iZ] = [];\n    for (let iY = 0; iY < _tileNum; iY++) {\n      _aryNoiseSeed[iZ][iY] = [];\n      for (let iX = 0; iX < _tileNum; iX++) {\n        _aryNoiseSeed[iZ][iY][iX] = [0, color(0)];\n      }\n    }\n  }\n\n  _areaRatio = 0.8; //0 < x <= 1\n  let posX0 = width*(1-_areaRatio)/2;\n  let posY0 = height/2 + (width/2 - width*(1-_areaRatio)/2)/2 * (-(2+sqrt(5))/2 + 1);\n  _r = width * _areaRatio / _tileNum / 2;\n  for (let iZ = 0; iZ < _tileNumZ; iZ++) { //x:upper right, y:lower right, z:lower\n    _aryPos[iZ] = [];\n    for (let iY = 0; iY < _tileNum; iY++) {\n      _aryPos[iZ][iY] = [];\n      for (let iX = 0; iX < _tileNum; iX++) {\n        _aryPos[iZ][iY][iX] =[\n          posX0 + iX*_r + iY*_r + _r,\n          posY0 - iX*_r/2 + iY*_r/2 + iZ*_r/2*sqrt(5) + _r/2*sqrt(5)/2];\n      }\n    }\n  }\n\n  let objectNum = 1;\n  for (let i = 0; i < objectNum; i++) {\n    _aryObject[i] = new f;\n  }\n}\n\nfunction draw() {\n  background(_bgColor);\n\n  for (let i = 0; i < _aryObject.length; i++) {\n    _aryObject[i].update();\n    if (_aryObject[i].theta > -PI/2 + 6*PI) {\n      _aryObject[i] = new f;\n    }\n  }\n\n  for (let iZ = _tileNumZ-1; iZ > 0; iZ--) {\n    for (let iY = _tileNum-1; iY >= 0; iY--) {\n      for (let iX = _tileNum-1; iX >= 0; iX--) {\n        _aryNoiseSeed[iZ][iY][iX][0] = _aryNoiseSeed[iZ-1][iY][iX][0];\n        _aryNoiseSeed[iZ][iY][iX][1] = _aryNoiseSeed[iZ-1][iY][iX][1];\n      }\n    }\n  }\n  for (let iY = _tileNum-1; iY >= 0; iY--) {\n    for (let iX = _tileNum-1; iX >= 0; iX--) {\n      _aryNoiseSeed[0][iY][iX][0] = 0;\n      for (let i = 0; i < _aryObject.length; i++) {\n        _aryObject[i].apply(iX, iY, 0);\n      }\n    }\n  }\n\n  for (let iZ = _tileNumZ-1; iZ >= 0; iZ--) {\n    for (let iY = 0; iY < _tileNum; iY++) {\n      for (let iX = _tileNum-1; iX >= 0; iX--) {\n        let noiseVal = _aryNoiseSeed[iZ][iY][iX][0];\n        let myColor = _aryNoiseSeed[iZ][iY][iX][1];\n        tile(_aryPos[iZ][iY][iX][0], _aryPos[iZ][iY][iX][1], _r, noiseVal, myColor);\n      }\n    }\n  }\n}\n\nclass f {\n  constructor() {\n    this.r = random(0.1, 0.7)*_tileNum;\n    this.centX = 0.5*_tileNum;\n    this.theta = -PI/2;\n    this.centY = 0.5*_tileNum;\n    this.d_theta = 2*PI/10*random(0.2, 1);\n    this.layerNum = 8;\n    this.color = [];\n    for (let i = 0; i < this.layerNum; i++) {\n      colorMode(HSB, 360, 100, 100, 255);\n      this.color[i] = color(random(360), 100, 100, 255);\n      colorMode(RGB);\n    }\n  }\n  apply(iX, iY, iZ) {\n    for (let i = this.layerNum-1; i >= 0; i--) {\n      if(\n        abs(iX - this.centX) < this.r/this.layerNum*(i+1)* (sin(this.theta*1)+1.0)/2.0 &&\n        abs(iY - this.centY) < this.r/this.layerNum*(i+1) * (sin(this.theta*1.3)+1.0)/2.0\n        ) {\n        _aryNoiseSeed[iZ][iY][iX][0] = 0.9;\n        _aryNoiseSeed[iZ][iY][iX][1] = this.color[i];\n      }\n    }\n  }\n  update() {\n    this.theta += this.d_theta;\n  }\n}\n\nfunction tile(posX, posY, r, noiseVal, myColor) {\n  let centX = posX;\n  let centY = posY;\n  let internalR = r * noiseVal;\n  if (internalR > r*0.0) {\n    \n    //---ellipse---\n    fill(myColor);\n    push();\n      translate(centX, centY);\n      ellipse(0, 0, internalR, internalR);\n    pop();\n  }\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by kusakari, with tags grid,random"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "// reference: Akiyoshi Kataoka's Awesome Illusion\n//https://twitter.com/AkiyoshiKitaoka/status/1262743320167542787\n\nlet cells;\n\nfunction setup() {\n\tcreateCanvas(800, 800);\n\tcolorMode(HSB, 360, 100, 100, 100);\n\tangleMode(DEGREES);\n\tcells = 13}\n\nfunction draw() {\n\tbackground(0, 0, 90);\n\n\tlet d = width / cells;\n\tfor (let j = 0; j < cells; j++) {\n\t\tfor (let i = 0; i < cells; i++) {\n\n\t\t\tlet n = i + j * cells + 1;\n\t\t\tlet x = i * d;\n\t\t\tlet y = j * d;\n\t\t\tif (n % 2 == 0) {\n\t\t\t\tfill(0, 0, 100);\n\t\t\t} else {\n\t\t\t\tfill(0, 0, 20);\n\t\t\t}\n\t\t\tnoStroke();\n\t\t\trectMode(CORNER);\n\t\t\trect(x, y, d, d);\n\n\t\t\tif (i != 0) {\n\t\t\t\tpush();\n\t\t\t\ttranslate(x, y);\n\t\t\t\trotate(45);\n\t\t\t\trectMode(CENTER);\n\n\t\t\t\tlet dd = d / 4.5;\n\t\t\t\tif (n % 2 == 0) {\n\t\t\t\t\tfill(0, 0, 100);\n\t\t\t\t} else {\n\t\t\t\t\tfill(0, 0, 20);\n\t\t\t\t}\n\t\t\t\tif (j != 0) {\n\t\t\t\t\trect(-dd / 2, -dd / 2, dd, dd);\n\t\t\t\t\trect(dd / 2, dd / 2, dd, dd);\n\t\t\t\t\tif (n % 2 == 0) {\n\t\t\t\t\t\tfill(0, 0, 20);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfill(0, 0, 100);\n\t\t\t\t\t}\n\t\t\t\t\trect(-dd / 2, dd / 2, dd, dd);\n\t\t\t\t\trect(dd / 2, -dd / 2, dd, dd);\n\t\t\t\t}\n\t\t\t\tpop();\n\t\t\t}\n\t\t}\n\t}\n\tnoLoop();\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Senbaku\n\n### Response:\n",
    "completion": "//2020-06-07\n//noise field  https://www.youtube.com/watch?v=sor1nwNIP9A\n\n\nlet inc = 0.1;\nlet scl = 10;\nlet cols, rows;\nlet fr;\nlet particles = [];\nlet flowfield;\n\nlet zoff = 0;\n\nfunction setup() {\n\tcreateCanvas(1000, 600);\n\tcols = floor(width / scl);\n\trows = floor(height / scl);\n\tflowfield = new Array(cols * rows);\n\tfor (let i = 0; i < 200; i++) {\n\t\tparticles[i] = new Particle();\n\t}\n\tbackground(\"#348aa7\");\n}\n\nfunction draw() {\n\t\n\tlet c = color(\"#293241\");\n\tbackground(51,10);\n\tlet yoff = 0;\n\tlet doCntMax = 300;\n\tlet doScale = 0.01;\n\n\tfor (let y = 0; y < rows; y++) {\n\t\tlet xoff = 0;\n\t\tfor (let x = 0; x < cols; x++) {\n\t\t\tlet index = x + y * cols;\n\n\n\t\t\tlet xPoint = x;\n\t\t\tlet yPoint = y;\n\t\t\tlet angle = noise(xoff, yoff, zoff) * TWO_PI * 0.1;\n\t\t\t\tif(mouseIsPressed){\n\t\t\t\tangle = noise(xoff, yoff, zoff) * TWO_PI * 10;\n\t\t\t}\n\t\t\tlet v = p5.Vector.fromAngle(angle);\n\t\t\tv.setMag(1);\n\t\t\tflowfield[index] = v;\n\t\t\txoff += doScale * cos(TWO_PI * noise(xPoint, yPoint) * 50.0);\nyoff += doScale * sin(TWO_PI * noise(yPoint, xPoint) * 50.0);;\n\t\t}\n\t\tzoff += 0.0003;\n\t}\n\tfor (let i = 0; i < particles.length; i++) {\n\t\tparticles[i].follow(flowfield);\n\t\tparticles[i].update();\n\t\tparticles[i].edges();\n\t\tparticles[i].show();\n\t}\n}\n\nfunction Particle() {\n\tthis.pos = createVector(random(width), random(height));\n\tthis.vel = createVector(0, 0);\n\tthis.acc = createVector(0, 0);\n\tthis.maxspeed = 4;\n\tthis.prevPos = this.pos.copy();\n\n\tthis.update = function () {\n\t\tthis.vel.add(this.acc);\n\t\tthis.vel.limit(this.maxspeed);\n\t\tthis.pos.add(this.vel);\n\t\tthis.acc.mult(0);\n\n\n\t}\n\tthis.follow = function (vectors) {\n\t\tlet x = floor(this.pos.x / scl);\n\t\tlet y = floor(this.pos.y / scl);\n\t\tlet index = x + y * cols;\n\t\tlet force = vectors[index];\n\t\tthis.applyForce(force);\n\t\tthis.d = random(0.5, 3);\n\t}\n\n\tthis.applyForce = function (force) {\n\t\tthis.acc.add(force)\n\t}\n\tthis.show = function () {\n\n\t\tnoStroke();\n\t\n\t\tfill(255);\n\t\tthis.updatePrev();\n\t\tellipse(this.pos.x,this.pos.y,1);\n\n\t}\n\tthis.updatePrev = function () {\n\t\tthis.prevPos.x = this.pos.x;\n\t\tthis.prevPos.y = this.pos.y;\n\t}\n\tthis.edges = function () {\n\t\tif (this.pos.x > width) {\n\t\t\tthis.pos.x = 0;\n\t\t\tthis.updatePrev();\n\t\t}\n\n\t\tif (this.pos.x < 0) {\n\t\t\tthis.pos.x = width;\n\t\t\tthis.updatePrev();\n\t\t}\n\t\tif (this.pos.y > height) {\n\t\t\tthis.pos.y = 0;\n\t\t\tthis.updatePrev();\n\t\t}\n\t\tif (this.pos.y < 0) {\n\t\t\tthis.pos.y = height;\n\t\t\tthis.updatePrev();\n\t\t}\n\t}\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Senbaku"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by kusakari, with tags 3D,noise\n\n### Response:\n",
    "completion": "let _r;\nlet _limitCount;\nlet _aryTriangle = [];\nlet _aryCenter = [];\nlet _count;\nlet _aryInitRot = [];\n\nlet _ampR;\nlet _ampG;\nlet _ampB;\nlet _aryInitNoiseXYZ = [];\nlet _aryNoiseRangeXYZ = [];\nlet _noiseStepT;\nlet _sphereR;\n\nfunction setup() {\n  let canvasSize;\n  if (windowWidth <= windowHeight) {\n    canvasSize = windowWidth;\n  } else {\n    canvasSize = windowHeight;\n  }\n  createCanvas(canvasSize, canvasSize, WEBGL);\n  setAttributes('premultipliedAlpha', true);\n  frameRate(30);\n  noStroke();\n\n  _r = width/2.5;\n  _limitCount = 3;\n\n  let createTriangle = new BaseTriangle();\n\n  _ampR = random(255, 1020);\n  _ampG = random(255, 1020);\n  _ampB = random(255, 1020);\n  for (let i = 0; i < 3; i++) {\n    _aryInitNoiseXYZ[i] = random(100);\n    _aryInitRot[i] = random(360);\n  }\n  _aryNoiseRangeXYZ[0] = 1.0/1.5/4;\n  _aryNoiseRangeXYZ[1] = 1.0/1.5/4;\n  _aryNoiseRangeXYZ[2] = 1.0/1.5/4;\n  _noiseStepT = 0.005;\n\n  _sphereR = width/100;\n\n  _count = 0;\n}\n\nfunction draw() {\n  background(200);\n  directionalLight(105, 105, 105, -1, 1, -1);\n  specularMaterial(0);\n  push();\n  rotateX(_aryInitRot[0] + _count/300);\n  rotateY(_aryInitRot[1] + _count/100);\n  rotateZ(_aryInitRot[2] + _count/200);\n  let freq = 4;\n  let d = 8;\n  for (let i = 0; i < _aryTriangle.length; i++) {\n    let noiseVal = sin(freq * 2*PI * noise(\n      _aryInitNoiseXYZ[0] + _aryNoiseRangeXYZ[0] * _aryCenter[i][0] / _r,\n      _aryInitNoiseXYZ[1] + _aryNoiseRangeXYZ[1] * _aryCenter[i][1] / _r,\n      _aryInitNoiseXYZ[2] + _aryNoiseRangeXYZ[2] * _aryCenter[i][2] / _r + _noiseStepT * _count\n    ))**d /2 + 0.5;\n    push();\n    translate(_aryCenter[i][0] * noiseVal, _aryCenter[i][1] * noiseVal, _aryCenter[i][2] * noiseVal);\n    sphere(_sphereR);\n    pop();\n    stroke(0);\n    beginShape();\n    vertex(0, 0, 0);\n    vertex(_aryCenter[i][0] * noiseVal, _aryCenter[i][1] * noiseVal, _aryCenter[i][2] * noiseVal);\n    endShape();\n    noStroke();\n  }\n  pop();\n\n  _count ++;\n}\n\nclass BaseTriangle {\n  constructor() {\n    let triangles = [];\n    triangles[0] = [[_r, 0, 0], [0, 0, _r], [0, -_r, 0]];\n    triangles[1] = [[-_r, 0, 0], [0, 0, _r], [0, -_r, 0]];\n    triangles[2] = [[_r, 0, 0], [0, 0, -_r], [0, -_r, 0]];\n    triangles[3] = [[-_r, 0, 0], [0, 0, -_r], [0, -_r, 0]];\n    triangles[4] = [[_r, 0, 0], [0, 0, _r], [0, _r, 0]];\n    triangles[5] = [[-_r, 0, 0], [0, 0, _r], [0, _r, 0]];\n    triangles[6] = [[_r, 0, 0], [0, 0, -_r], [0, _r, 0]];\n    triangles[7] = [[-_r, 0, 0], [0, 0, -_r], [0, _r, 0]];\n    let countObj = 0;\n    for (let i = 0; i < triangles.length; i++) {\n      let newSubTriangle = new SubTriangle(triangles[i], countObj + 1);\n    }\n  }\n}\n\nclass SubTriangle {\n  constructor(triangle, countObj) { //triangle = [[x1, y1, z1], [x2, y2, z2], [x3, y3, z3]]\n    this.countObj = countObj;\n    if (this.countObj <= _limitCount) {\n      this.XYZ1 = triangle[0];\n      this.XYZ2 = triangle[1];\n      this.XYZ3 = triangle[2];\n      this.divide(this.XYZ1, this.XYZ2, this.XYZ3);\n      let newTriangle1 = [this.XYZ1, this.newMidXYZ_1_2, this.newMidXYZ_3_1];\n      let newTriangle2 = [this.newMidXYZ_1_2, this.XYZ2, this.newMidXYZ_2_3];\n      let newTriangle3 = [this.newMidXYZ_3_1, this.newMidXYZ_2_3, this.XYZ3];\n      let newTriangle4 = [this.newMidXYZ_1_2, this.newMidXYZ_2_3, this.newMidXYZ_3_1];\n      this.triangles = [newTriangle1, newTriangle2, newTriangle3, newTriangle4];\n      for (let i = 0; i < this.triangles.length; i++) {\n        let newSubTriangle = new SubTriangle(this.triangles[i], this.countObj + 1);\n      }\n    } else {\n      this.addCenter(triangle); //[[x1, y1, z1], [x2, y2, z2], [x3, y3, z3], [ave.x, ave.y, ave.z]]\n      _aryTriangle.push(triangle);\n    }\n  }\n  addCenter(triangle) {\n    let centX = 0;\n    let centY = 0;\n    let centZ = 0;\n    for (let i = 0; i < triangle.length; i++) {\n      centX += triangle[i][0];\n      centY += triangle[i][1];\n      centZ += triangle[i][2];\n    }\n    centX /= triangle.length;\n    centY /= triangle.length;\n    centZ /= triangle.length;\n    _aryCenter.push([centX, centY, centZ]);\n  }\n  divide(XYZ1, XYZ2, XYZ3) {\n    let midXYZ_1_2 = [\n      (XYZ1[0] + XYZ2[0])/2,\n      (XYZ1[1] + XYZ2[1])/2,\n      (XYZ1[2] + XYZ2[2])/2\n    ];\n    let midXYZ_2_3 = [\n      (XYZ2[0] + XYZ3[0])/2,\n      (XYZ2[1] + XYZ3[1])/2,\n      (XYZ2[2] + XYZ3[2])/2\n    ];\n    let midXYZ_3_1 = [\n      (XYZ3[0] + XYZ1[0])/2,\n      (XYZ3[1] + XYZ1[1])/2,\n      (XYZ3[2] + XYZ1[2])/2\n    ];\n    let distMid_1_2 = (midXYZ_1_2[0]**2 + midXYZ_1_2[1]**2 + midXYZ_1_2[2]**2)**0.5;\n    let distMid_2_3 = (midXYZ_2_3[0]**2 + midXYZ_2_3[1]**2 + midXYZ_2_3[2]**2)**0.5;\n    let distMid_3_1 = (midXYZ_3_1[0]**2 + midXYZ_3_1[1]**2 + midXYZ_3_1[2]**2)**0.5;\n    this.newMidXYZ_1_2 = [\n      midXYZ_1_2[0] / distMid_1_2 * _r,\n      midXYZ_1_2[1] / distMid_1_2 * _r,\n      midXYZ_1_2[2] / distMid_1_2 * _r\n    ];\n    this.newMidXYZ_2_3 = [\n      midXYZ_2_3[0] / distMid_2_3 * _r,\n      midXYZ_2_3[1] / distMid_2_3 * _r,\n      midXYZ_2_3[2] / distMid_2_3 * _r\n    ];\n    this.newMidXYZ_3_1 = [\n      midXYZ_3_1[0] / distMid_3_1 * _r,\n      midXYZ_3_1[1] / distMid_3_1 * _r,\n      midXYZ_3_1[2] / distMid_3_1 * _r\n    ];\n  }\n}\n\nfunction mouseReleased() {\n  _aryTriangle = [];\n  _aryCenter = [];\n  _aryInitRot = [];\n  _aryInitNoiseXYZ = [];\n  _aryNoiseRangeXYZ = [];\n\n  let createTriangle = new BaseTriangle();\n\n  _ampR = random(255, 1020);\n  _ampG = random(255, 1020);\n  _ampB = random(255, 1020);\n  for (let i = 0; i < 3; i++) {\n    _aryInitNoiseXYZ[i] = random(100);\n    _aryInitRot[i] = random(360);\n  }\n  _aryNoiseRangeXYZ[0] = 1.0/1.5/4;\n  _aryNoiseRangeXYZ[1] = 1.0/1.5/4;\n  _aryNoiseRangeXYZ[2] = 1.0/1.5/4;\n  _noiseStepT = 0.005;\n\n  _sphereR = width/100;\n\n  _count = 0;\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by kusakari, with tags 3D,noise"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Almina\n\n### Response:\n",
    "completion": "/**\n * color pallet\n */\n// let curl = \"https://coolors.co/555233-df921d-878937-cfc52A-dc2a41\";\nlet curl = \"https://coolors.co/1b998b-ed217c-2d3047-fffd82-ff9b71\";\n// let curl = \"https://coolors.co/171219-225560-edf060-f0803c-310d20\";\n// let curl = \"https://coolors.co/f0b67f-fe5f55-d6d1b1-c7efcf-eef5db\";\n\nlet pal;\nlet bgColor;\nlet layerGraphics;\n\nfunction setup() {\n  createCanvas(600, 600);\n  // colorMode(HSB, 360, 100, 100, 100);\n  angleMode(DEGREES);\n  background(255);\n  // noLoop();\n  frameRate(0.5);\n\t\n  pal = createPallete(curl);\n  let cid = int(random(pal.length));\n  bgColor = pal[cid];\n  pal.splice(cid, 1);\n  pal = shuffle(pal);\n\t\n\tbackground(bgColor);\n  // effect();  // noise effect\n}\n\nfunction draw() {\n\t// randomSeed(seed);\n\tbackground(bgColor);\n\tpal = shuffle(pal);\n\t\n\t// background graphic\n\tlet row = 10;\n\tlet col = 10;\n\tlet siz = (width-200) / row * 0.8;\n\trectMode(CENTER);\n\tfor (let i = 0; i < row; i++) {\n\t\tfor (let j = 0; j < col; j++) {\n\t\t\tlet x = map(i, 0, row-1, 100, width-100);\n\t\t\tlet y = map(j, 0, col-1, 100, height-100);\n\t\t\tif (random(100)>50) { noStroke();  fill(pal[int(random(2))]); }\n\t\t\telse { noFill();  stroke(pal[int(random(2))]);  strokeWeight(5); }\n\t\t\tif (random(100)>50) { rect(x, y, siz, siz); }\n\t\t\telse { circle(x, y, siz); }\n\t\t}\n\t}\n\trectMode(CORNER);\n\tfilter(INVERT);\n\t\n\t// masking\n\tgenClipLayer();\n\timage(layerGraphics, 0, 0);\n\tgenInvertLayer();\n\timage(layerGraphics, 0, 0);\n\t\n  drawWindow();\n}\n\nfunction genClipLayer() {\n\t// mask layer\n  layerGraphics = createGraphics(width, height);\n  layerGraphics.colorMode(HSB, 360, 100, 100, 100);\n  layerGraphics.angleMode(DEGREES);\n  layerGraphics.background(bgColor);\n\t\n\tlayerGraphics.erase(255, 0);\n\tlayerGraphics.circle(200-20, 200-20, 200);\n\tlayerGraphics.circle(400+20, 400+20, 200);\n\tlayerGraphics.rectMode(CENTER);\n\tlayerGraphics.rect(400+20, 200-20, 180, 180);\n\tlayerGraphics.rect(200-20, 400+20, 180, 180);\n\tlayerGraphics.rectMode(CORNER);\n}\n\nfunction genInvertLayer() {\n\t// mask layer\n  layerGraphics = createGraphics(width, height);\n  layerGraphics.colorMode(HSB, 360, 100, 100, 100);\n  layerGraphics.angleMode(DEGREES);\n  layerGraphics.background(bgColor);\n\t\n\tlet w = width/30;\n\tlet frame = get(w, w, width-w*2, height-w*2);\n\tlayerGraphics.image(frame, w, w);\n\tlayerGraphics.filter(INVERT);\n\t\n\tlayerGraphics.erase(255, 0);\n\tlet cells = genCells(80);\n\tlayerGraphics.fill(255);\n\tfor (let i = 0; i < cells.length; i++) {\n\t\tlayerGraphics.circle(cells[i].x, cells[i].y, cells[i].d);\n\t}\n}\n\nfunction genCells(num) {\n\tlet cells = [];\n\t// let num = 150;\n\tfor (let i = 0; i < num; i++) {\n\t\tlet x = random(100, 500);\n\t\tlet y = random(100, 500);\n\t\tlet d = random(50, 200);\n\t\tfor (let j = 0; j < i; j++) {\n\t\t\tif (dist(x, y, cells[j].x, cells[j].y) < (d+cells[j].d)/2) {\n\t\t\t\td = dist(x, y, cells[j].x, cells[j].y) - cells[j].d/2;\n\t\t\t}\n\t\t\tif (x-d<50) { d = x-50; }\n\t\t\tif (x+d>550) { d = 550-x; }\n\t\t\tif (y-d<50) { d = y-50; }\n\t\t\tif (y+d>550) { d = 550-y; }\n\t\t}\n\t\tcells[i] = new Cell(x, y, d);\n\t}\n\treturn cells;\n}\n\nclass Cell{\n\tconstructor(_x, _y, _d){\n\t\tthis.x = _x;\n\t\tthis.y = _y;\n\t\tthis.d = _d;\n\t}\n}\n\nfunction keyPressed() {\n  if (keyCode == ENTER) {\n    save('screenshot.png');\n  }\n}\n\nfunction effect() {\n  strokeWeight(1);\n  for (let i = 0; i < width * height * 5 / 100; i++) {\n    stroke(0, 0, 0, 10);\n    let px = random(width);\n    let py = random(height);\n    point(px, py);\n  }\n}\n\nfunction drawWindow() {\n  w = width / 30;\n  noStroke();  fill(255);\n\trectMode(CENTER);\n  rect(width/2, w/2, width, w);\n  rect(width/2, height-w/2, width, w);\n\trect(w/2, height/2, w, height);\n\trect(width-w/2, height/2, w, height);\n\trectMode(CORNER);\n}\n\nfunction createPallete(_url) {\n  let slash_index = _url.lastIndexOf('/');\n  let pallate_str = _url.slice(slash_index + 1);\n  let arr = pallate_str.split('-');\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = color('#' + arr[i]);\n  }\n  return arr;\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Almina"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by kusakari, with tags noise\n\n### Response:\n",
    "completion": "let _minWidth;\nlet _obj;\nlet _xy1;\nlet _xy2;\nlet _xy3;\nlet _xy4;\nlet _bgCol;\nlet _numCol;\nlet _aryShape = [];\nlet _numShape;\n\nfunction setup() {\n  createCanvas(windowWidth, windowHeight);\n  if (width / 7 * 6 < height) {\n    _minWidth = width * 1;\n  } else {\n    _minWidth = height / 6 * 7 * 1;\n  }\n  colorMode(HSB, 360, 100, 100, 255);\n  noStroke();\n  _xy1 = createVector(-_minWidth / 2, -_minWidth / 7 * 6 / 2);\n  _xy2 = createVector(+_minWidth / 2, -_minWidth / 7 * 6 / 2);\n  _xy3 = createVector(+_minWidth / 2, +_minWidth / 7 * 6 / 2);\n  _xy4 = createVector(-_minWidth / 2, +_minWidth / 7 * 6 / 2);\n\n  setObject();\n\t\n\tbackground(_bgCol);\n  translate(width / 2, height / 2);\n  _obj.update(_xy1, _xy2, _xy3, _xy4);\n  _obj.draw();\n}\n\nfunction setColor() {\n  _numCol = 3; //except black and white\n  let palette = [];\n  palette = [\"#06AED5\", \"#F9C80E\", \"#FF4D80\", \"#21D19F\"];\n  shuffle(palette, true);\n  palette.unshift(\"#000000\");\n\n  return palette;\n}\n\nfunction setShape() {\n  _numShape = 2;\n  for (let i = 0; i < _numShape; i ++) {\n    let step = _minWidth / _numShape;\n    let centxy = createVector(-_minWidth/8 + _minWidth/4 * i, 0);\n    let r = _minWidth / 2 * 3 / 4;\n    let ang = random(2*PI);\n    let xy1 = p5.Vector.add(centxy, createVector(r * cos(ang + PI/3*2 * 1), r * sin(ang + PI/3*2 * 1)));\n    let xy2 = p5.Vector.add(centxy, createVector(r * cos(ang + PI/3*2 * 2), r * sin(ang + PI/3*2 * 2)));\n    let xy3 = p5.Vector.add(centxy, createVector(r * cos(ang + PI/3*2 * 3), r * sin(ang + PI/3*2 * 3)));\n    _aryShape[i] = [xy1, xy2, xy3];\n  }\n}\n\nfunction setObject() {\n  _palette = setColor();\n  _bgCol = 0;\n  setShape();\n  _obj = new Obj(1);\n}\n\nclass Obj {\n  constructor(splitNumCurrent) {\n    this.splitNumCurrent = splitNumCurrent;\n    this.splitNumLimit = 19;\n    this.shiftAmp = _minWidth / 1600;\n    this.clearanceRatio = 0.9;\n    this.arySubObject = [];\n\n    this.addCol();\n\n    let splitProbability = 1;\n    if ((splitNumCurrent < this.splitNumLimit && random() < splitProbability) || this.splitNumCurrent == 1) { this.splitObject(); }\n  }\n\t\n  splitObject() {\n    let rnd = random();\n    if (rnd < 1/2) {\n      this.splitDirection = \"vertical\";\n    } else {\n      this.splitDirection = \"horizontal\";\n    }\n    this.noiseSeed = [random(1000)];\n    this.noiseSpeed = 0.0015;\n    this.freq = 6;\n    this.minNoiseVal = 0.2;\n    this.maxNoiseVal = 0.8;\n    this.gapNoiseVal = this.maxNoiseVal - this.minNoiseVal;\n    this.count = 0;\n    this.arySubObject = [\n      new Obj(this.splitNumCurrent + 1),\n      new Obj(this.splitNumCurrent + 1)];\n  }\n\t\n  update(xy1, xy2, xy3, xy4) {\n    this.xy1 = xy1;\n    this.xy2 = xy2;\n    this.xy3 = xy3;\n    this.xy4 = xy4;\n\n    this.subDisplay = [true, true];\n\n    if (this.arySubObject.length > 0) {\n      let noiseVal =[\n        (sin(2*PI * this.freq * noise(this.noiseSeed[0] + this.noiseSpeed * this.count)) + 1) * this.gapNoiseVal / 2 + this.minNoiseVal];\n\n      if (this.splitDirection == \"vertical\") {\n        let sub1_xy1 = xy1;\n        let sub1_xy2 = p5.Vector.lerp(xy1, xy2, noiseVal[0]);\n        let sub1_xy3 = p5.Vector.lerp(xy4, xy3, noiseVal[0]);\n        let sub1_xy4 = xy4;\n\n        let aryXy_s1 = this.resizeObjectFixedShift(sub1_xy1, sub1_xy2, sub1_xy3, sub1_xy4, this.shiftAmp);\n        this.subDisplay[0] = aryXy_s1[4];\n        if (this.subDisplay[0] == true) {\n          this.arySubObject[0].update(aryXy_s1[0], aryXy_s1[1], aryXy_s1[2], aryXy_s1[3]);\n        }\n\n        let sub2_xy1 = sub1_xy2;\n        let sub2_xy2 = xy2;\n        let sub2_xy3 = xy3;\n        let sub2_xy4 = sub1_xy3;\n\n        let aryXy_s2 = this.resizeObjectFixedShift(sub2_xy1, sub2_xy2, sub2_xy3, sub2_xy4, this.shiftAmp);\n        this.subDisplay[1] = aryXy_s2[4];\n        if (this.subDisplay[1] == true) {\n          this.arySubObject[1].update(aryXy_s2[0], aryXy_s2[1], aryXy_s2[2], aryXy_s2[3]);\n        }\n\n      } else if (this.splitDirection == \"horizontal\") {\n        let sub1_xy1 = xy1;\n        let sub1_xy2 = xy2;\n        let sub1_xy3 = p5.Vector.lerp(xy2, xy3, noiseVal[0]);\n        let sub1_xy4 = p5.Vector.lerp(xy1, xy4, noiseVal[0]);\n\n        let aryXy_s1 = this.resizeObjectFixedShift(sub1_xy1, sub1_xy2, sub1_xy3, sub1_xy4, this.shiftAmp);\n        this.subDisplay[0] = aryXy_s1[4];\n        if (this.subDisplay[0] == true) {\n          this.arySubObject[0].update(aryXy_s1[0], aryXy_s1[1], aryXy_s1[2], aryXy_s1[3]);\n        }\n\n        let sub2_xy1 = sub1_xy4;\n        let sub2_xy2 = sub1_xy3;\n        let sub2_xy3 = xy3;\n        let sub2_xy4 = xy4;\n\n        let aryXy_s2 = this.resizeObjectFixedShift(sub2_xy1, sub2_xy2, sub2_xy3, sub2_xy4, this.shiftAmp);\n        this.subDisplay[1] = aryXy_s2[4];\n        if (this.subDisplay[1] == true) {\n          this.arySubObject[1].update(aryXy_s2[0], aryXy_s2[1], aryXy_s2[2], aryXy_s2[3]);\n        }\n      }\n    }\n    this.count++;\n  }\n\t\n  draw() {\n    let drawCheck1 = this.drawCheck(_aryShape[0][0], _aryShape[0][1], _aryShape[0][2]);\n    let drawCheck2 = this.drawCheck(_aryShape[1][0], _aryShape[1][1], _aryShape[1][2]);\n    fill(color(_palette[0]));\n    if (drawCheck1 == 2 && drawCheck2 == 0) {\n      if (this.splitNumCurrent % 2 == 0) { fill(color(_palette[1])); }\n      this.drawOuterLine();\n    } else if(drawCheck1 == 0 && drawCheck2 == 2) {\n      if (this.splitNumCurrent % 2 == 0) { fill(color(_palette[2])); }\n      this.drawOuterLine();\n    } else if(drawCheck1 == 2 && drawCheck2 == 2) {\n      if (this.splitNumCurrent % 2 == 0) { fill(lerpColor(color(_palette[1]), color(_palette[2]), 0.5)); }\n      this.drawOuterLine();\n    }\n\n    if (this.arySubObject.length != 0) {\n      if (this.subDisplay[0] == true) {\n        this.arySubObject[0].draw();\n      }\n      if (this.subDisplay[1] == true) {\n        this.arySubObject[1].draw();\n      }\n    }\n  }\n\n  drawCheck(xy_a, xy_b, xy_c) {\n    let inXy1 = this.checkInTriangle(this.xy1, xy_a, xy_b, xy_c);\n    let inXy2 = this.checkInTriangle(this.xy2, xy_a, xy_b, xy_c);\n    let inXy3 = this.checkInTriangle(this.xy3, xy_a, xy_b, xy_c);\n    let inXy4 = this.checkInTriangle(this.xy4, xy_a, xy_b, xy_c);\n\n    let drawCheck = 0; //nothing=0, partial=1, full=2\n    if (inXy1 == true && inXy2 == true && inXy3 == true && inXy4 == true) {\n      drawCheck = 2;\n    } else if (inXy1 == true || inXy2 == true || inXy3 == true || inXy4 == true) {\n      drawCheck = 1;\n    }\n\n    return drawCheck;\n  }\n\n  checkInTriangle(xy_p, xy_a, xy_b, xy_c) { //p in triangle a-b-c or not\n    let vec_ab = p5.Vector.sub(xy_b, xy_a);\n    let vec_bp = p5.Vector.sub(xy_p, xy_b);\n    let cross_ab_bp = p5.Vector.cross(vec_ab, vec_bp);\n\n    let vec_bc = p5.Vector.sub(xy_c, xy_b);\n    let vec_cp = p5.Vector.sub(xy_p, xy_c);\n    let cross_bc_cp = p5.Vector.cross(vec_bc, vec_cp);\n\n    let vec_ca = p5.Vector.sub(xy_a, xy_c);\n    let vec_ap = p5.Vector.sub(xy_p, xy_a);\n    let cross_ca_ap = p5.Vector.cross(vec_ca, vec_ap);\n\n    let inTriagle = false;\n    if ((cross_ab_bp.z < 0 && cross_bc_cp.z < 0 && cross_ca_ap.z < 0) ||\n      (cross_ab_bp.z > 0 && cross_bc_cp.z > 0 && cross_ca_ap.z > 0)) {\n      inTriagle = true;\n    }\n\n    return inTriagle;\n  }\n\n  calculateCross(xy1, xy2, xy3, xy4) { //cross point of line xy1-xy2 and line xy3-xy4\n    //ax+by+c=0\n    let a1 = xy1.y - xy2.y;\n    let b1 = xy2.x - xy1.x;\n    let c1 = xy1.x * xy2.y - xy2.x * xy1.y;\n    let a2 = xy3.y - xy4.y;\n    let b2 = xy4.x - xy3.x;\n    let c2 = xy3.x * xy4.y - xy4.x * xy3.y;\n    //cross point of line xy1-2 and line xy3-4\n    let xcross = (b1*c2 - b2*c1) / (a1*b2 - a2*b1);\n    let ycross = (a2*c1 - a1*c2) / (a1*b2 - a2*b1);\n    let cross = createVector(xcross, ycross);\n\n    return cross;\n  }\n\n  crossSign(xy1, xy2, xy3) { //if xy1 is above line xy2-xy3 or not\n    //ax+by+c=0\n    let a = xy2.y - xy3.y;\n    let b = xy3.x - xy2.x;\n    let c = xy2.x * xy3.y - xy3.x * xy2.y;\n    let xy1PosSign = a * xy1.x + b * xy1.y + c;\n    \n    return xy1PosSign;\n  }\n\n  resizeObjectFixedShift(xy1, xy2, xy3, xy4, shiftAmp) {\n    let display = true;\n\n    let vertVec12 = p5.Vector.sub(xy2, xy1);\n    vertVec12.setHeading(vertVec12.heading() + PI / 2);\n    vertVec12.setMag(shiftAmp);\n    let vertVec23 = p5.Vector.sub(xy3, xy2);\n    vertVec23.setHeading(vertVec23.heading() + PI / 2);\n    vertVec23.setMag(shiftAmp);\n    let vertVec34 = p5.Vector.sub(xy4, xy3);\n    vertVec34.setHeading(vertVec34.heading() + PI / 2);\n    vertVec34.setMag(shiftAmp);\n    let vertVec41 = p5.Vector.sub(xy1, xy4);\n    vertVec41.setHeading(vertVec41.heading() + PI / 2);\n    vertVec41.setMag(shiftAmp);\n\n    let xy1_shiftVert12 = p5.Vector.add(xy1, vertVec12);\n    let xy2_shiftVert12 = p5.Vector.add(xy2, vertVec12);\n    let xy2_shiftVert23 = p5.Vector.add(xy2, vertVec23);\n    let xy3_shiftVert23 = p5.Vector.add(xy3, vertVec23);\n    let xy3_shiftVert34 = p5.Vector.add(xy3, vertVec34);\n    let xy4_shiftVert34 = p5.Vector.add(xy4, vertVec34);\n    let xy4_shiftVert41 = p5.Vector.add(xy4, vertVec41);\n    let xy1_shiftVert41 = p5.Vector.add(xy1, vertVec41);\n\n    let xy1s = this.calculateCross(xy4_shiftVert41, xy1_shiftVert41, xy1_shiftVert12, xy2_shiftVert12);\n    let xy2s = this.calculateCross(xy1_shiftVert12, xy2_shiftVert12, xy2_shiftVert23, xy3_shiftVert23);\n    let xy3s = this.calculateCross(xy2_shiftVert23, xy3_shiftVert23, xy3_shiftVert34, xy4_shiftVert34);\n    let xy4s = this.calculateCross(xy3_shiftVert34, xy4_shiftVert34, xy4_shiftVert41, xy1_shiftVert41);\n\n    if (xy1s.x >= xy2s.x || xy1s.y >= xy4s.y) { display = false; }\n\n    return [xy1s, xy2s, xy3s, xy4s, display];\n  }\n\n  drawOuterLine() {\n    let aryCorner1 = this.calcOuterCorner(this.xy4, this.xy1, this.xy2);\n    let aryCorner2 = this.calcOuterCorner(this.xy1, this.xy2, this.xy3);\n    let aryCorner3 = this.calcOuterCorner(this.xy2, this.xy3, this.xy4);\n    let aryCorner4 = this.calcOuterCorner(this.xy3, this.xy4, this.xy1);\n    beginShape();\n    for (let i = 0; i < aryCorner1.length; i++) {\n      vertex(aryCorner1[i].x, aryCorner1[i].y);\n    }\n    for (let i = 0; i < aryCorner2.length; i++) {\n      vertex(aryCorner2[i].x, aryCorner2[i].y);\n    }\n    for (let i = 0; i < aryCorner3.length; i++) {\n      vertex(aryCorner3[i].x, aryCorner3[i].y);\n    }\n    for (let i = 0; i < aryCorner4.length; i++) {\n      vertex(aryCorner4[i].x, aryCorner4[i].y);\n    }\n    endShape(CLOSE);\n  }\n\n  calcOuterCorner(xy1, xy2, xy3) { //corner = xy2\n    let xy21 = p5.Vector.sub(xy1, xy2);\n    let xyCent21 = xy21.setMag(this.shiftAmp * this.clearanceRatio).rotate(PI/2);\n    let xy23 = p5.Vector.sub(xy3, xy2);\n    let xyCent23 = xy23.setMag(this.shiftAmp * this.clearanceRatio).rotate(-PI/2);\n    let angOuterXy2 = abs(xyCent21.angleBetween(xyCent23));\n    let aryCornerXy = [];\n    let numAngSplit = 32;\n    let stepAng = angOuterXy2 / numAngSplit;\n    for (let i = 0; i < numAngSplit + 1; i++) {\n      aryCornerXy.push(p5.Vector.add(xy2, xyCent21));\n      xyCent21.rotate(stepAng);\n    }\n\n    return aryCornerXy;\n  }\n\n  addCol() {\n    if (random() < 0.80) { this.col = [100, random(20, 100)]; } //S, B\n    else { this.col = [0, 100]; }\n  }\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by kusakari, with tags noise"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Okazz\n\n### Response:\n",
    "completion": "let palette = [\"#ff0000\", \"#0000ff\", \"#00ffff\", \"#ff00ff\", \"#ffff00\"]\n\nfunction setup() {\n\tcreateCanvas(800, 800);\n\tnoLoop();\n\tshuffle(palette, true)\n}\n\nfunction draw() {\n\tbackground(255);\n\tlet cc = 6;\n\tfor(let i=0; i<width; i+=2){\n\t\tfor(let j=0; j<cc; j++){\n\t\tstrokeWeight(random(2));\n\t\tmyLine(i, j * height/cc, i, j * height/cc + height/cc);\n\t\t}\n\t}\n}\n\nfunction myLine(x1, y1, x2, y2) {\n\tlet d = dist(x1, y1, x2, y2);\n\tlet c = d*2;\n\tlet nScl = 0.003;\n\tlet n1 = noise(x1*nScl*10, y1*nScl*10);\n\tlet n2 = noise(x2*nScl, y2*nScl);\n\tlet num1 = constrain(int(n1 * palette.length * 2) - 1, 0, palette.length-1);\n\tlet num2 = constrain(int(n2 * palette.length * 2) - 1, 0, palette.length-1);\n\tlet col1 = palette[num1];\n\tlet col2 = palette[num2];\n\tstroke(col1);\n\tline(x1, y1, x2, y2);\n\tfor (let i = 0; i < c; i++) {\n\t\tlet rnd = pow(random(), 20);\n\t\tlet xx = lerp(x1, x2, rnd);\n\t\tlet yy = lerp(y1, y2, rnd);\n\t\tstroke(col2);\n\t\tline(xx, yy, xx, yy);\n\t}\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Okazz"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by \\u306f\\u3045\\u541b\n\n### Response:\n",
    "completion": "function setup() {\n  createCanvas(1920, 1080);\n  //randomSeed(42)\n  //noiseSeed(42)\n  //scale(0.4,0.4)\n  rect(0,0,1920,1080)\n  \n  CTEX=createGraphics(width, height / 2)\n  drawCelestial(CTEX);\n  image(CTEX,0,0)\n\n  BTEX=createGraphics(width, height / 2)\n  drawBackground(BTEX);\n  image(BTEX,0,0)    \n\n  DTEX=createGraphics(width, height / 2);\n  drawPond(DTEX)\n  image(DTEX,0,height/2)\n\n  TTEX=createGraphics(width, height);\n  drawTerrestrial(TTEX)\n  image(TTEX,0,0)  \n}\n\n\nfunction drawCelestial(target){\n  with(target){\n    colorMode(HSB)\n    noStroke();\n  }\n  \n  drawSky(target)\n  drawStar(target)\n  drawMoon(target)\n  \n  function drawSky(target){\n    with(target){\n      push();\n      \n      for(j = 0; j < 10; j++){\n        blendMode(ADD)  \n        for(i = 0;i < 150; i++){\n          var h = 150 + random(80);\n          var s = 80 - random(80)\n          var b = random(20)\n          fill(h, s, b, .12)\n          var x = random(width) * 2 - width / 2;\n          var y = random(height * 2)-height / 2 + j * 50\n          circle(x, y, random(width / 2 + j * 10))\n        }\n        \n        blendMode(BLEND)\n        for(i = 0; i < 50; i++){\n          fill(240, 100, 20, .05)\n          var x = random(width) * 2 - width / 2;\n          var y = random(height * 2) - height / 2\n          circle(x, y, random(width / 2))\n        }\n      }\n      \n      pop();\n      filter(BLUR,3)\n    }\n  }\n  \n  function drawStar(target){\n    with(target){\n      push();\n      noStroke()\n      for(i=0;i<150;i++){\n        var x = random(width)\n        var y = random(height)\n        blendMode(ADD)\n        fill(0,10,100,.1)\n        circle(x,y,random(20))\n\n        blendMode(BLEND)\n        fill(0,10,100)\n        ellipse(x,y,random(5)+5,random(5)+5)\n      }\n      pop();\n    }\n  }\n  \n  function drawMoon(target){\n    with(target){\n      push();\n      noStroke()\n      var x = random(width / 2) + width / 4;\n      var y = height / 1.5;\n      blendMode(ADD)\n      fill(60,50,100,.005)\n      for(r=0;r<TAU;r+=.05){\n        var lx = x+cos(r)*(random(50)+220)\n        var ly = y+sin(r)*(random(50)+220)\n        circle(lx,ly,random(50)+150)\n      }\n      blendMode(BLEND)\n      fill(60,10,100)\n      circle(x,y, 500)\n      drawingContext.clip()\n      for(j=0;j<10;j++){\n        for(i=0;i<10;i++){\n          fill(60,10,20,.03)\n          var cx = random(500)-250\n          var cy = random(500)-250\n          circle(x + cx,y+cy,200)\n        }\n        fill(60,20,100,.03)\n        for(i=0;i<10;i++){\n          var cx = random(500)-250\n          var cy = random(500)-250\n          circle(x + cx,y+cy,200)\n        }\n      }\n      pop();\n    }\n  }\n}\n\nfunction drawTerrestrial(target){\n  with(target){\n    colorMode(HSB)\n    noStroke();\n  }\n  \n  with(target){\n    push();\n\n    treeF=0;\n    for(j=1;j<7;j*=1.05){\n      Y= height /2 + height/2 / (2**(j-1))-10;\n      for(F=-1;F<2;F+=2){\n        for(x=0;F>0?x<width/2*F:x>width/2*F; x+=(10-j)**2*F/4){\n          X=x+width/2\n          N=noise(X/400,Y/400)**2\n          if(N>.25){\n            treeF++;\n            if(treeF%5==0 && N%.2>.1){\n              blendMode(BLEND)\n              M=random(100)*N\n              fill(90,50,10,.2)\n              ellipse(X,Y,9-j,M)\n              h=160+random(20)\n              for(l=0;l<M;l+=.5){\n                fill(h,90-j*10-cos(l/M*PI/2)*60,5+cos(l/M*PI/2)*10,.2)\n                push()\n                translate(X+(noise(l)-.5)*50*cos(l/M*PI/2),Y+l*7/j)\n                rotate(random(TAU))\n                ellipse(0,0,W=noise(X,Y,l/10)*200/(j/2)*cos(l/M*PI/2),W/4)\n                pop()\n              }\n            }\n            if(treeF%5==0 && N%.2>.05){\n              for(i=0;i<200;i++){\n                fill(90+random(90),random(50+j*5)+50,random(99-j*10),.3-(j/20))\n                push()\n                L=random(10-j)*3\n                translate(X+cos(R=PI+random(PI))*(D=(7-j)/3*L/2)+random(j*4)-j*2,Y+sin(R)*D)\n                rotate(R)\n                ellipse(0,0,L,(7-j)/3)\n                pop()\n              }\n            }\n\n          }\n        }\n      }\n    }\n    filter(BLUR,2)\n    treeF=0;\n    for(j=1;j<6;j*=1.05){\n      J=7-j\n      Y= height /2 + height/2 / (2**(J-1))-10;\n      for(F=-1;F<2;F+=2){\n        for(x=0;F>0?x<width/2*F:x>width/2*F; x+=(10-j)**2*F/4){\n          X=x+width/2\n          N=noise(X/400,Y/400)**2\n          if(N>.3){\n            treeF++;\n            if(treeF%5==0 && N%.2>.1){\n              blendMode(BLEND)\n              M=random(100)*N\n              fill(90,50,10,.8)\n              ellipse(X,Y,9-J,M*3)\n              h=160+random(20)\n              fruit = random(.1)+.9\n              for(l=0;l<M;l+=.05){                \n                push()\n                translate(X+(noise(l)-.5)*50*cos(l/M*PI/2),Y-l*7/J*2)\n                if(l<M/2 && random(1)>fruit){\n                  fill(random(360),50,90,.8-J/10)\n                  circle(random(30)-15,random(10),random(10-J))\n                }\n\n                rotate(random(TAU))\n                fill(h,90-J*10,random(50)-J*2,.2)\n                ellipse(0,0,W=noise(X,Y,l/2)**2*200/(J/2)*cos(l/M*PI/2),W/20)\n                pop()\n              }\n            }\n          }\n        }\n      }\n    }\n    pop();\n  }\n}\n\nfunction drawBackground(target){\n  with(target){\n    colorMode(HSB)\n    noStroke();\n  }\n\n  with(target){\n    push();\n    for(j=0;j<3;j++){\n      fill(190,90-j*10,5+j*5)\n      beginShape()\n      vertex(0,height)\n      for(x=-100;x<width+100;x++){\n        vertex(x,height - ((noise(x/(300+j*100),j*9))**(j+1)-.05)*(600-j*100))\n      }\n      vertex(width, height)\n      endShape()\n      drawingContext.clip()\n\n      blendMode(ADD)\n      for(i=0;i<width;i+=10){\n        fill(150+random(80),10,30+random(10),.02)\n        circle(i,random(height),400+j*50)\n      }\n      blendMode(BLEND)\n      for(i=0;i<width;i+=50){\n        fill(190+random(40),10,5,.1)\n        circle(i,random(height),500)\n      }\n    }\n    pop();\n  }\n}\n\nfunction drawPond(target){\n  with(target){\n    colorMode(HSB)\n    noStroke();\n    background(190,50,10)\n  }\n  \n  drawWater(target);\n  \n  function drawWater(target){\n    with(target){\n      push();\n      for(j=1;j<7;j*=1.05){\n        Y= height - (height - height / (2**(j-1)));\n        blendMode(ADD)  \n        for(i=0;i<150;i++){\n          var h = 150+random(80);\n          var s = 80 - random(80)\n          var b = random(20)\n          fill(h, s, b, .3)\n          var x = random(width) * 2 - width / 2;\n          var y = Y - random(height)\n          ellipse(x, y, W = random(width/j/3), W / 4)\n        }\n        blendMode(BLEND)\n        for(i=0;i<50;i++){\n          fill(240, 100, 20, .1)\n          var x = random(width) * 2 - width / 2;\n          var y = Y - random(height)\n          ellipse(x, y, W= random(width/j/3), W / 4)\n        }\n      }\n      pop();\n      filter(BLUR,5)\n    }\n  }\n}\n",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by \\u306f\\u3045\\u541b"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by kusakari, with tags 3D,noise\n\n### Response:\n",
    "completion": "let _aryXYZ = [];\nlet _tileNum;\nlet _aryArg = [];\nlet _noiseStepX;\nlet _noiseStepY;\nlet _noiseStepZ;\nlet _noiseStepT;\nlet _r;\nlet _count;\nlet _aryLight = [];\nlet _lightNum;\n\nfunction setup() {\n  let canvasSize;\n  if (windowWidth <= windowHeight) {\n    canvasSize = windowWidth;\n  } else {\n    canvasSize = windowHeight;\n  }\n  createCanvas(canvasSize, canvasSize, WEBGL);\n  frameRate(30);\n  noStroke();\n  colorMode(HSB, 360, 100, 100, 255);\n  specularMaterial(100);\n  \n  _noiseStepX = 0.1;\n  _noiseStepY = 0.1;\n  _noiseStepZ = 0.1;\n  _noiseStepT = 0.015;\n  _tileNum = 10;\n  let initArgX = random(100);\n  let initArgY = random(100);\n  let initArgZ = random(100);\n  let maxWidth = width;\n  _r = maxWidth / _tileNum/2;\n  for (let i = 0; i < _tileNum; i++) {\n    _aryXYZ[i] = [];\n    _aryArg[i] = [];\n    for (let j = 0; j < _tileNum; j++) {\n      _aryXYZ[i][j] = [];\n      _aryArg[i][j] = [];\n      for (let k = 0; k < _tileNum; k++) {\n        _aryXYZ[i][j][k] = [\n          maxWidth/(_tileNum-1)*i - maxWidth/2,\n          maxWidth/(_tileNum-1)*j - maxWidth/2,\n          maxWidth/(_tileNum-1)*k - maxWidth/2\n        ];\n        _aryArg[i][j][k] = [\n          initArgX - _noiseStepX*i,\n          initArgY - _noiseStepY*j,\n          initArgZ - _noiseStepZ*k\n        ];\n      }\n    }\n  }\n\n  _lightNum = 4;\n  let initH = random(360);\n  for (let i = 0; i < _lightNum; i++) { //H, raduis, initAngle, AngleRate, X-Z-tilt\n    _aryLight[i] = [(initH + 360/_lightNum*i) % 360, width/2*random(), 2*PI*random(), random(0.01, 0.1), 2*PI*random()];\n  }\n\n  _count = random(1000);\n}\n\nfunction draw() {\n  background(0);\n\n  for (let i = 0; i < _lightNum; i++) {\n    pointLight(\n      _aryLight[i][0], 100, 100,\n      _aryLight[i][1] * cos(_aryLight[i][2] + frameCount * _aryLight[i][3]) * cos(_aryLight[i][4]),\n      _aryLight[i][1] * sin(_aryLight[i][2] + frameCount * _aryLight[i][3]),\n      _aryLight[i][1] * cos(_aryLight[i][2] + frameCount * _aryLight[i][3]) * sin(_aryLight[i][4])\n    );\n  }\n\n  for (let i = 0; i < _tileNum; i++) {\n    for (let j = 0; j < _tileNum; j++) {\n      for (let k = 0; k < _tileNum; k++) {\n        _aryArg[i][j][k][0] += _noiseStepT*0,\n        _aryArg[i][j][k][1] += _noiseStepT*0,\n        _aryArg[i][j][k][2] += _noiseStepT\n      }\n    }\n  }\n  \n  push();\n  rotateX(_count/200);\n  rotateY(_count/200);\n  rotateZ(_count/150);\n  for (let i = 0; i < _tileNum; i++) {\n    for (let j = 0; j < _tileNum; j++) {\n      for (let k = 0; k < _tileNum; k++) {\n        let noiseVal = 0.5 + sin(4*PI*noise(_aryArg[i][j][k][0], _aryArg[i][j][k][1], _aryArg[i][j][k][2]))/2;\n        if (noiseVal > -0.9) {\n          push();\n          translate(_aryXYZ[i][j][k][0], _aryXYZ[i][j][k][1], _aryXYZ[i][j][k][2]);\n          rotateX(12*PI * noise(_aryArg[i][j][k][0], _aryArg[i][j][k][1], _aryArg[i][j][k][2]));\n          rotateY(6*PI * noise(_aryArg[i][j][k][0], _aryArg[i][j][k][1], _aryArg[i][j][k][2]));\n          rotateZ(3*PI * noise(_aryArg[i][j][k][0], _aryArg[i][j][k][1], _aryArg[i][j][k][2]));\n          sphere(_r/2*noiseVal);\n          pop();\n        }\n      }\n    }\n  }\n  pop();\n\n  _count++;\n}\n\nfunction mouseReleased() {\n  _aryXYZ = [];\n  _aryArg = [];\n  _aryLight = [];\n\n  let initArgX = random(100);\n  let initArgY = random(100);\n  let initArgZ = random(100);\n  let maxWidth = width;\n  _r = maxWidth / _tileNum/2;\n  for (let i = 0; i < _tileNum; i++) {\n    _aryXYZ[i] = [];\n    _aryArg[i] = [];\n    for (let j = 0; j < _tileNum; j++) {\n      _aryXYZ[i][j] = [];\n      _aryArg[i][j] = [];\n      for (let k = 0; k < _tileNum; k++) {\n        _aryXYZ[i][j][k] = [\n          maxWidth/(_tileNum-1)*i - maxWidth/2,\n          maxWidth/(_tileNum-1)*j - maxWidth/2,\n          maxWidth/(_tileNum-1)*k - maxWidth/2\n        ];\n        _aryArg[i][j][k] = [\n          initArgX - _noiseStepX*i,\n          initArgY - _noiseStepY*j,\n          initArgZ - _noiseStepZ*k\n        ];\n      }\n    }\n  }\n\n  _lightNum = 4;\n  let initH = random(360);\n  for (let i = 0; i < _lightNum; i++) { //H, raduis, initAngle, AngleRate, X-Z-tilt\n    _aryLight[i] = [(initH + 360/_lightNum*i) % 360, width/2*random(), 2*PI*random(), random(0.01, 0.1), 2*PI*random()];\n  }\n\n  _count = random(1000);\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by kusakari, with tags 3D,noise"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by John W Romig, with tags p5js,abstract expressionism\n\n### Response:\n",
    "completion": "// circulos \n\n// color palette\n\nvar colors = [\"#ff0000\", \"#feb30f\", \"#0aa4f7\", \"#000000\", \"#ffffff\", \"#f398c3\", \"#cf3895\", \"#a0d28d\", \"#06b4b0\", \"#fef45f\", \"#fed000\", \"#0c163f\"];\n\n// set weights for each color \n\nvar weights = [1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2];\n\n// number of drawing agents \n\nvar nAgents = 110;\nvar wipeScreenAt = 150;\nlet agent = [];\n\n// set spinning direction (plus or minus)\n\nvar direction = -1;\n\n\n\nvar par = 0;\n\nlet borderX1 = -100;\nlet borderX2 = -100;\nlet borderY1 = -100;\nlet borderY2 =-100;\n\nfunction setup() {\n\tcreateCanvas(1200,1200);\n\t// hide the mouse pointer, To bring it back. move your mouse out of the drawing area.\n  noCursor();\n\tcolorMode(HSB, 360, 100, 100, 100);\n\t//rectMode(CENTER);\n\tstrokeCap(SQUARE);\n\tframeRate(8);\n\n\tbackground(0,0,100);\n\n\tfor (let i = 0; i < nAgents; i++) {\n\t\tagent.push(new Agent());\n\t}\n\t\n\n}\n\nfunction draw() {\n\t\n\tif(frameCount%wipeScreenAt == 0) \n\t{\n\t\tclear();\n\t\tagent = [];\n\t\tfor (let i = 0; i < nAgents; i++) \n\t\t{\n\t\t agent.push(new Agent());\n\t  }\n\t\t\n\t}\n\t\n\n\tfor (let i = 0; i < agent.length; i++) {\n\t\t  agent[i].update();\n\t}\t\n\t\n\n\n}\n\n// paintining agent \n\n\nclass Agent {\n\tconstructor(x,y) {\n\t\t\n\t\tthis.p = createVector(random(borderX1,width-borderX2),random(borderY1,height-borderY2));\n\t\t\n\t\tthis.pOld = createVector(this.p.x, this.p.y);\n\n\t\tthis.step = 0.25;\n\t\t\n\t\tthis.scale = random(5,20);\n\n\t\t\n\t\tthis.period = random(10,100);\n\t\t\n\t\tthis.amplitude = random(200,500);\n\t\t\n\t\tthis.color = generateColor();\n\t\t\n\t\tthis.x = 0;\n\t\t\n\t\tif (random(0,1) > 0.8)\n\t\t{\n\t\t\tthis.circle = true;\n\t\t}else\n\t\t{\n\t\t\tthis.circle = false;\n\t\t}\n\t\t\n\t\tthis.direction = 1;\n\t\t\n\t\tthis.draw = true;\n\t\t\t\n\t\tthis.strokeWidth = 10;\n\t}\n\t\n\tgetPartner() {\n\t\treturn this.partner;\n\t}\n\n\tgetP() {\n\t\treturn this.p;\n\t}\n\t\n\tgetColor(){\n\t\treturn this.color;\n\t}\n\n\n\tupdate() {\n\t\t\n\t\t\n\t\tthis.p.x += this.direction * vector_field(this.p.x, this.p.y,this.scale).x * this.step;\n\t\tthis.p.y += this.direction * vector_field(this.p.x, this.p.y,this.scale).y * this.step;\n\n\t\n\t\tthis.strokeWidth = sin(this.x/this.period)*this.amplitude;\n\t\t\n\t\tstrokeWeight(this.strokeWidth);\n\t\tstroke(this.color);\n\t\t\n\t\tlet x1 = this.pOld.x;\n\t\tlet y1 = this.pOld.y;\n\t\t\n\t\tlet x2 = this.p.x;\n\t\tlet y2 = this.p.y;\n\t\t\n\t\tlet m = (y2 - y1)/(x2 - x1);\n\t\t\n\t\tif(this.draw)\n\t\t{\n\t\t  fill(this.color);\t\n\t\t}else\n\t\t{\n\t\t\tnoFill();\n\t\t}\n\n\t\t\n\t\t//this.direction *= -1;\n\t\t\n\t\tif(this.circle)\n\t\t{\n\t\t\tellipse(this.p.x,this.p.y,10,10);\n\t\t}\n\t\t\n\t\tline(this.pOld.x, this.pOld.y, this.p.x, this.p.y);\n\t\n\t\tthis.pOld.set(this.p);\n\t\t\n\t\tthis.x += 1;\n\t}\n\n}\n\n// vector field function \n// the painting agents follow the flow defined \n// by this function \n\n\nfunction vector_field(x, y,myScale) {\n\n\tx = map(x, 0, width, -myScale, myScale);\n\ty = map(y, 0, height, -myScale, myScale);\n\n\tlet k1 = 5;\n\tlet k2 = 3;\n  let k3 = 1;\n\t\n\t//let u = sin(k1 * y) + cos(k2 * y) + map(noise(x,y),0,1,-1,1);\n\t//let v = sin(k2 * x) - cos(k1 * x) + map(noise(x,y),0,1,-1,1);\n\n\tlet u = sin(k1 * y) + cos(k2 * y);\n\tlet v = sin(k2 * x) - cos(k1 * x);\n\t\n\treturn createVector(u,v);\n}\n\n\n\nfunction generateColor() {\n\tlet temp = myRandom(colors, weights);\n\n\tmyColor = color(hue(temp) + randomGaussian()*10,\n\t\t              saturation(temp) + randomGaussian()*10,\n\t\t              brightness(temp) + randomGaussian()*5, \n\t\t\t\t\t\t\t\t\trandom(10,90));\n\treturn myColor;\n}\n\n// function to select \n\nfunction myRandom(colors, weights) {\n\tlet sum = 0;\n\n\tfor (let i = 0; i < colors.length; i++) {\n\t\tsum += weights[i];\n\t}\n\n\tlet rr = random(0, sum);\n\n\tfor (let j = 0; j < weights.length; j++) {\n\n\t\tif (weights[j] >= rr) {\n\t\t\treturn colors[j];\n\t\t}\n\t\trr -= weights[j];\n\t}\n}\nfunction keyPressed(){\n  if(key == 's' || 'S');\n  //if (millis() - lapse > 400){\n    save(\"img_\" + month() + '-' + day() + '_' + hour() + '-' + minute() + '-' + second() + \".jpg\");\n    //lapse = millis();\n  //} \n}\n\n\n//function windowResized() {\n\t\t//resizeCanvas(windowWidth, windowHeight);\n//}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by John W Romig, with tags p5js,abstract expressionism"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Yokia, with tags p5js,processing,openprocessing,code,creativecode,creativecodeart,art,generativeart,shape,codingeveryday,line,dailycoding,3d,webgl,samualyan\n\n### Response:\n",
    "completion": "// by SamuelYAN\n// more works //\n// https://twitter.com/SamuelAnn0924\n// https://www.instagram.com/samuel_yan_1990/\n\nvar seed = Math.random() * 2;\nvar t;\nvar num, vNum;\nvar radius, mySize, margin;\nvar sizes = [];\n\nlet colors = [];\nlet colors0 = \"281914-1a1a1a-202020-242e30\".split(\"-\").map((a) => \"#\" + a);\nlet colors2 = \"7382ce-9fb7f4-12177d-9bb5e9-7486af\".split(\"-\").map((a) => \"#\" + a);\nlet colors3 = \"82d362-5c5190-6c6dd1-3d6966-5967ca\".split(\"-\").map((a) => \"#\" + a);\nlet colors4 = \"8c75ff-c553d2-2dfd60-2788f5-23054f\".split(\"-\").map((a) => \"#\" + a);\nlet colors5 = \"f21252-8834f1-c4dd92-184fd3-f9fee2\".split(\"-\").map((a) => \"#\" + a);\nlet colors6 = \"2E294E-541388-F1E9DA-FFD400-D90368\".split(\"-\").map((a) => \"#\" + a);\nlet colors7 = \"fefefe-fffffb-fafdff-fef9fb-f7fcfe\".split(\"-\").map((a) => \"#\" + a);\nlet colors8 = \"8c75ff-c553d2-2dfd60-2788f5-23054f-f21252-8834f1-c4dd92-184fd3-f9fee2-2E294E-541388-F1E9DA-FFD400-D90368-e9baaa-ffa07a-164555-ffe1d0-acd9e7-4596c7-6d8370-e45240-21d3a4-3303f9-cd2220-173df6-244ca8-a00360-b31016\".split(\"-\").map((a) => \"#\" + a);\nlet colors11 = \"025159-3E848C-7AB8BF-C4EEF2-A67458\".split(\"-\").map((a) => \"#\" + a);\nlet colors12 = \"10454F-506266-818274-A3AB78-BDE038\".split(\"-\").map((a) => \"#\" + a);\nlet colors13 = \"D96690-F28DB2-F2C9E0-89C2D9-88E8F2\".split(\"-\").map((a) => \"#\" + a);\nvar color_setup1, color_setup2;\nlet color_bg;\nlet v_planet = [];\n\nfunction setup() {\n\trandomSeed(seed);\n\tframeRate(150);\n\t// pixelDensity(5);\n\tmySize = min(windowWidth, windowHeight);\n\tmargin = mySize / 100;\n\tcreateCanvas(mySize, mySize, WEBGL);\n\tcolor_setup1 = colors7;\n\tcolor_setup2 = random([colors4, colors5, colors6, colors11, colors2, colors12, colors3, colors13]);\n\tcolor_bg = \"#202020\";\n\tbackground(color_bg);\n\t// num = 2;\n\tnum = int(random(100, 20));\n\tradius = mySize * 1.5;\n\tfor (let a = 0; a < TAU; a += TAU / num) {\n\t\tsizes.push(random(0.1, 0.5))\n\t}\n\tt = 0;\n}\n\nfunction draw() {\n\trandomSeed(seed);\n\t// background(color_bg);\n\n\tfor (let i = 0; i < num; i++) {\n\t\tlet a = (TAU / num) * i;\n\t\tlet x = radius * sin(a + t) / random(5, 2) / 2.0;\n\t\tlet y = radius * cos(a + t) / random(2, 5) / 2.0;\n\t\tv_planet[i] = createVector(x, y);\n\t}\n\tpush();\n\n\tfor (let q = 0; q < 1 / 5; q += 4 * random(0.01, 0.02)) {\n\t\tfor (let j = 0; j < 1; j++) {\n\n\t\t\trotateX(t / 100 + q);\n\t\t\trotateY(t / 100 + q);\n\t\t\trotateZ(random(TAU) + t + q);\n\t\t\tstrokeWeight(1 * random(0.2, 0.6));\n\t\t\tfill(color_bg);\n\n\t\t\tfor (let i = 0; i < num; i += 2) {\n\t\t\t\tlet d = random(radius / 2, radius / 4);\n\t\t\t\tlet x_plus = 1.25 * random(-d, d) / 5;\n\t\t\t\tlet y_plus = 1.25 * random(-d, d) / 5;\n\t\t\t\tlet z_plus = 1.25 * random(-d, d) / 2;\n\t\t\t\tpush();\n\t\t\t\ttranslate(v_planet[i].x, v_planet[i].y, z_plus);\n\t\t\t\trotateX(sin(-t) / 20);\n\t\t\t\trotateY(cos(t) / 20);\n\t\t\t\trotateZ(sin(5 * t + q));\n\t\t\t\tstroke(random(color_setup2));\n\t\t\t\tlet zz1 = random(-z_plus, 0) / 1;\n\t\t\t\tlet zz2 = random(-0, z_plus) / 4;\n\t\t\t\tline(x_plus, y_plus, zz1, x_plus, y_plus, zz2);\n\t\t\t\tstroke(str(random(colors7))+\"40\");\n\t\t\t\tlet offset = 0.5;\n\t\t\t\tline(x_plus+offset, y_plus+offset,zz1, x_plus+offset, y_plus+offset, zz2-1);\n\t\t\t\tpop();\n\t\t\t}\n\n\t\t}\n\t}\n\tpop();\n\n\tt += 2 * random(0.001, 0.0005);\n\t\n\tif(frameCount == 2000){\n\t\tnoLoop();\n\t}\n}\n\n\n\nfunction keyTyped() {\n\tif (key === \"s\" || key === \"S\") {\n\t\tsaveCanvas(\"0710_Emotional lines_10_2022\", \"png\");\n\t}\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Yokia, with tags p5js,processing,openprocessing,code,creativecode,creativecodeart,art,generativeart,shape,codingeveryday,line,dailycoding,3d,webgl,samualyan"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by CodingChef\n\n### Response:\n",
    "completion": "let marge = 40;\n\nfunction setup() {\n\tcreateCanvas(600, 800);\n\tcolorMode(HSB, 360, 100, 100, 100);\n\tbackground(55, 10, 90, 100);\n\t\n\t// create paper texture\n\tfor (let i = 0; i < 30000; i++){\n\t\tlet x1 = random() * width;\n\t\tlet y1 = random() * height;\n\t\tlet theta = random() * 2 * PI;\n\t\tlet segmentLength = random() * 5 + 2;\n\t\tlet x2 = cos(theta) * segmentLength + x1;\n\t\tlet y2 = sin(theta) * segmentLength + y1;\n\t\tline(x1, y1, x2, y2);\n\t\tstroke(55, 10 - random() * 5, 90 - random() * 8, random() * 10 + 35);\n\t}\n\t\n\tmyrect(marge, marge, 400);\n\tmyrect(marge, 2 * marge + (height - 4 * marge) / 3, 3200);\n\tmyrect(marge, height - marge - (height - 4 * marge) / 3, 6400);\n}\n\nfunction myrect(pgx, pgy, circleCount){\n\tlet pg = createGraphics(width - 2 * marge, (height - 4 * marge) / 3);\n\tpg.blendMode(BLEND);\n\tpg.colorMode(HSB, 360, 100, 100, 100);\n\tpg.background(0, 0, 0, 0);\n\tpg.noFill();\n\t\n\tpg.stroke(0, 100, 0, 100);\n\tpg.strokeWeight(2);\n\tpg.rect(0, 0, pg.width, pg.height);\n\t\n\tpg.strokeWeight(1);\n\tpg.stroke(0, 100, 0, 20);\n\tfor (let i = 0; i < circleCount; i++){\n\t\tlet x = map(random(0, 1), 0, 1, -pg.width, 2 * pg.width);\n\t\tlet y = map(random(0, 1), 0, 1, -pg.height, 2 * pg.height);\n\t\tlet r = map(random(0, 1), 0, 1, 200, 400);\n\t\tpg.ellipse(x, y, r);\n\t}\n\timage(pg, pgx, pgy);\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by CodingChef"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Senbaku, with tags noise,curveVertex\n\n### Response:\n",
    "completion": "let t = 0.0;\nlet vel = 0.002;\nlet num;\n//example, [0]= background,[1]= stroke, [2~6] = fill\n\nconst palettes = [\n\t[\"#e9dbce\", \"#fceade\", \"#ea526f\", \"#e2c290\", \"#6b2d5c\", \"#25ced1\"],\n\t[\"#223843\", \"#e9dbce\", \"#eff1f3\", \"#dbd3d8\", \"#d8b4a0\", \"#d77a61\"],\n\t[\"#e29578\", \"#ffffff\", \"#006d77\", \"#83c5be\", \"#ffddd2\", \"#edf6f9\"],\n\t[\"#e9dbce\", \"#ffffff\", \"#cc3528\", \"#028090\", \"#00a896\", \"#f8c522\"],\n\t[\"#e9dbce\", \"#f8f7c1\", \"#f46902\", \"#da506a\", \"#fae402\", \"#92accc\"],\n\t[\"#e42268\", \"#fb8075\", \"#761871\", \"#5b7d9c\", \"#a38cb4\", \"#476590\"],\n\t['#f9b4ab', '#fdebd3', '#264e70', '#679186', '#bbd4ce'],\n\t['#1f306e', '#553772', '#8f3b76', '#c7417b', '#f5487f'],\n\t['#e0f0ea', '#95adbe', '#574f7d', '#503a65', '#3c2a4d'],\n\t['#413e4a', '#73626e', '#b38184', '#f0b49e', '#f7e4be'],\n\t['#ff4e50', '#fc913a', '#f9d423', '#ede574', '#e1f5c4'],\n\t['#99b898', '#fecea8', '#ff847c', '#e84a5f', '#2a363b'],\n\t['#69d2e7', '#a7dbd8', '#e0e4cc', '#f38630', '#fa6900'],\n\t['#fe4365', '#fc9d9a', '#f9cdad', '#c8c8a9', '#83af9b'],\n\t['#ecd078', '#d95b43', '#c02942', '#542437', '#53777a'],\n\t['#556270', '#4ecdc4', '#c7f464', '#ff6b6b', '#c44d58'],\n\t['#774f38', '#e08e79', '#f1d4af', '#ece5ce', '#c5e0dc'],\n\t['#e8ddcb', '#cdb380', '#036564', '#033649', '#031634'],\n\t['#490a3d', '#bd1550', '#e97f02', '#f8ca00', '#8a9b0f'],\n\t['#594f4f', '#547980', '#45ada8', '#9de0ad', '#e5fcc2'],\n\t['#00a0b0', '#6a4a3c', '#cc333f', '#eb6841', '#edc951'],\n\t['#5bc0eb', '#fde74c', '#9bc53d', '#e55934', '#fa7921'],\n\t['#ed6a5a', '#f4f1bb', '#9bc1bc', '#5ca4a9', '#e6ebe0'],\n\t['#ef476f', '#ffd166', '#06d6a0', '#118ab2', '#073b4c'],\n\t['#22223b', '#4a4e69', '#9a8c98', '#c9ada7', '#f2e9e4'],\n\t['#114b5f', '#1a936f', '#88d498', '#c6dabf', '#f3e9d2'],\n\t['#ff9f1c', '#ffbf69', '#ffffff', '#cbf3f0', '#2ec4b6'],\n\t['#3d5a80', '#98c1d9', '#e0fbfc', '#ee6c4d', '#293241'],\n\t['#06aed5', '#086788', '#f0c808', '#fff1d0', '#dd1c1a'],\n\t['#540d6e', '#ee4266', '#ffd23f', '#3bceac', '#0ead69'],\n\t['#c9cba3', '#ffe1a8', '#e26d5c', '#723d46', '#472d30'],\n\n];\nlet palette_selected\n\nfunction setup() {\n\tcreateCanvas(600, 600);\n\tnum = random(10);\n\t//noFill();\n\tstrokeWeight(1)\n\tpalette_selected = random(palettes);\n}\n\nfunction mouseClicked() {\n\tshuffle(palette_selected, true);\n}\n\nfunction draw() {\n\trandomSeed(num)\n\tbackground(palette_selected[0]);\n\ttile();\n\tpush();\n\tfill(255)\n\tnoStroke();\n\tfor (let i = 0; i < 200; i++) {\n\t\tlet x = random(width);\n\t\tlet y = random(height)\n\t\tlet r = random(1, 7)\n\t\tellipse(x, y, r);\n\t}\n\tpop();\n\n\n}\n\nfunction tile() {\n\n\tlet count = 10; //\u4e00\u884c\u306e\u6570\n\tlet w = width / count;\n\tlet h = height / count;\n\n\tfor (var j = 0; j < count; j++) {\n\t\tfor (var i = 0; i < count; i++) {\n\t\t\twind(i * w, j * h, w);\n\t\t}\n\t}\n\tt += vel;\n}\n\nfunction wind(x, y, w) {\n\tvar hs = w / 2;\n\tnoStroke();\n\n\n\tpush();\n\ttranslate(x + hs, y + hs);\n\tlet angle = noise((x + 20 * y + 20) * t / 1000);\n\trotate(angle);\n\n\tpush();\n\n\tbeginShape();\n\tlet colNum = int(random(1, palette_selected.length));\n\tcol = color(palette_selected[colNum]);\n\tfill(col);\n\tcurveVertex(0, hs * 1.5);\n\tcurveVertex(random(10) * 1.5, 0)\n\tcurveVertex(0, -hs * 1.5);\n\tcurveVertex(random(-10) * 1.5, 0)\n\tcurveVertex(0, hs * 1.5);\n\tcurveVertex(0, hs * 1.5);\n\tendShape()\n\tpop();\n\n\tpush();\n\tlet colNum2 = int(random(1, palette_selected.length));\n\tcol2 = color(palette_selected[colNum2]);\n\tfill(col2);\n\tbeginShape();\n\tcurveVertex(0, hs);\n\tcurveVertex(random(10), 0)\n\tcurveVertex(0, -hs);\n\tcurveVertex(random(-10), 0)\n\tcurveVertex(0, hs);\n\tcurveVertex(0, hs);\n\tendShape()\n\tpop();\n\tpop();\n\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Senbaku, with tags noise,curveVertex"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Okazz\n\n### Response:\n",
    "completion": "let noiseFilter;\nlet colors = ['#459f80', '#d4cf4f', '#5f9adb', '#303592', '#8f337a', '#d450a1', '#e0284e', '#ab463f', '#004f2d', '#ffda22', '#85cb33', '#db2b39'];\n\nfunction setup() {\n\tcreateCanvas(900, 900);\n\tnoiseFilter = createImage(width, height);\n\tnoiseFilter.loadPixels();\n\tlet pix = noiseFilter.width * noiseFilter.height * 4;\n\tfor (let i = 0; i < pix; i += 4) {\n\t\tnoiseFilter.pixels[i] = random(255);\n\t\tnoiseFilter.pixels[i + 1] = random(255);\n\t\tnoiseFilter.pixels[i + 2] = random(255);\n\t\tnoiseFilter.pixels[i + 3] = 15;\n\t}\n\tnoiseFilter.updatePixels();\n\ttile();\n\timage(noiseFilter, 0, 0);\n}\n\nfunction draw() {\n}\n\nfunction tile(){\n\tlet c = 20;\n\tlet w = width / c;\n\tfor(let i=0; i<c; i++){\n\t\tfor(let j=0; j<c; j++){\n\t\t\tlet x = i * w;\n\t\t\tlet y = j * w;\n\t\t\tnoStroke();\n\t\t\tfill(random(colors));\n\t\t\trect(x, y, w, w);\n\t\t\tform(x + w/2, y + w/2, w);\n\t\t}\n\t}\n}\n\nfunction form(x, y, w){\n\tlet n = int(w);\n\tlet rnd = int(random(3));\n\tpush();\n\ttranslate(x, y);\n\trotate(int(random(4)) * TAU / 4);\n\trotate(0);\n\tnoFill();\n\tstrokeWeight(w/100);\n\tfor(let i=0; i<n; i++){\n\t\tlet alph = map(i, 0, n, 50, 0);\n\t\tlet off = map(i, 0, n, 0, w * 0.5);\n\t\tstroke(0, alph);\n\t\tif(rnd == 1){\n\t\t\tbeginShape();\n\t\t\tvertex((w/2) - off, -(w/2));\n\t\t\tvertex((w/2) - off, (w/2) - off);\n\t\t\tvertex(-(w/2), (w/2) - off);\n\t\t\tendShape();\n\t\t}else if(rnd == 2){\n\t\t\tline(-(w/2), (w/2)-off, (w/2), (w/2)-off);\n\t\t}\n\t}\n\tpop();\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Okazz"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Eric Ly\n\n### Response:\n",
    "completion": "let vs = `\n   precision highp float;\n   precision highp int;\n\n   attribute vec3 aPosition;\n   attribute vec2 aTexCoord;\n\n   varying vec2 vTexCoord;\n\n   uniform mat4 uProjectionMatrix;\n   uniform mat4 uModelViewMatrix;\n\n    void main() {\n      vec4 positionVec4 = vec4(aPosition, 1.0);\n      gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n      vTexCoord = aTexCoord;\n   }\n`;\n\nlet fs = `\n   precision highp float;\n   precision highp int;\n\n   varying vec2 vTexCoord;\n\n   uniform sampler2D u_tex;\n   uniform float u_time;\n\n   float pi = 3.14159265358979;\n\n   float rand(vec2 co) {\n     float a = fract(dot(co, vec2(2.067390879775102, 12.451168662908249))) - 0.5;\n     float s = a * (6.182785114200511 + a * a * (-38.026512460676566 + a * a * 53.392573080032137));\n     float t = fract(s * 43758.5453);\n     return t;\n   }\n\n   void main() {\n      vec2 uv0 = 2.0*vTexCoord - 1.0;\n      vec2 uv = vTexCoord;\n      uv.x += 0.3 * cos(uv.y*pi*3.0 + u_time);\n      uv.y += 0.3 * sin(uv.x*pi*3.0 + u_time);\n\n      uv.x += 0.1 - 0.05 / length(vec2(0.2, 0.0) - uv0);\n      uv.y += 0.1 - 0.05 / length(vec2(0.0, 0.2) - uv0);\n\n      float radius = 0.015;\n      uv.x = uv.x + rand(uv)*radius*0.8 ;\n      uv.y = uv.y + rand(uv.yx)*radius*0.8 ;\n      vec4 tex = texture2D(u_tex, uv);\n\n      float bin = 0.07;\n      vec4 tex_c;\n      tex_c = texture2D(u_tex, uv+vec2(bin, 0.0));\n      tex.r += (tex_c.r > 0.7) ? tex_c.r * 0.4 : 0.0;\n      tex_c = texture2D(u_tex, uv+vec2(0.0, bin));\n      tex.g += (tex_c.g > 0.7) ? tex_c.g * 0.4 : 0.0;\n      tex_c = texture2D(u_tex, uv+vec2(-bin, 0.0));\n      tex.b += (tex_c.b > 0.7) ? tex_c.b * 0.4 : 0.0;\n\n      float tra = ((tex.r+tex.g+tex.b) < 0.1) ? 0.0 : 0.75 ;\n      gl_FragColor = tex * vec4(1.0, 1.0, 1.0, tra);\n    }\n`;\n\nconst w = 720;\nlet theShader ;\nlet pg0 = new Array(4);\nlet pg1 = new Array(4);\n\nfunction setup() {\n   setAttributes(\"alpha\", false);\n   setAttributes(\"antialias\", true);\n   setAttributes(\"powerPreference\", \"high-performance\");\n\n   createCanvas(w, w, WEBGL);\n\n   rectMode(CENTER);\n   imageMode(CENTER);\n   textureMode(NORMAL);\n   colorMode(HSB);\n   noStroke();\n\n   theShader = createShader(vs, fs);\n   for(let i=0;i<4;i++){\n      pg0[i] = createGraphics(w*1.75, w*1.75);\n      pg1[i]  = createGraphics(w*1.75, w*1.75);\n   }\n\n   noLoop();\n}\n\nfunction draw(){\n   background(200, 80, 30);\n\n   fill(0, 0, 0, 0);\n\n   for(let i=0;i<4;i++){\n      rotate(PI/2*i);\n\n      set_pg1(pg1[i]);\n      shader(theShader);\n      theShader.setUniform(`u_tex`, pg1[i]);\n      push();\n      rotate(PI/4);\n      rect(0, -w*0.5, w*0.75, w*1.5);\n      pop();\n\n      set_pg0(pg0[i]);\n\n      shader(theShader);\n      theShader.setUniform(`u_tex`, pg0[i]);\n      theShader.setUniform(`u_time`, random(300) + i);\n\n      rect(0, -w*0.1, w*1.0, w*1.0);\n   }\n\n}\n\n\nfunction set_pg1(in_pg){\n   in_pg.colorMode(HSB);\n   const pgw = in_pg.width/2;\n   const pgr = in_pg.width/20;\n   let px, py;\n   in_pg.background(0);\n   in_pg.noStroke();\n\n   let wnum = 10;\n\n   for(let i=0;i<wnum;i++){\n      let hnum = int(random(1, 10));\n      for(let j=0;j<hnum;j++){\n         let fc = color( randomGaussian(160, 90),\n                         randomGaussian(80, 50),\n                         randomGaussian(100, 40));\n         in_pg.fill(fc);\n\n         px = pgw-pgr + randomGaussian(0, pgw/3);\n         py = pgw-pgr + randomGaussian(0, pgw/3) ;\n         in_pg.ellipse(px, py, pgr, pgr);\n      }\n   }\n}\n\nfunction set_pg0(in_pg){\n   in_pg.colorMode(HSB);\n   const pgw = in_pg.width/2;\n   const pgr = in_pg.width/16;\n   let px, py;\n   in_pg.background(0);\n   in_pg.noStroke();\n\n   let wnum = 10;\n\n   for(let i=0;i<wnum;i++){\n      let hnum = int(random(1, 10));\n      for(let j=0;j<hnum;j++){\n         let fc = color( randomGaussian(260, 60),\n                         randomGaussian(80, 50),\n                         randomGaussian(100, 20));\n         in_pg.fill(fc);\n         px = randomGaussian(pgw, pgw) ;\n         py = pgw/5 + randomGaussian(0, pgw/5);\n         in_pg.rect(px, py, pgr, pgr);\n         in_pg.rect(-px, py, pgr, pgr);\n      }\n   }\n}\n\n//save PNG\nfunction mousePressed() {\n   save(\"img_\" + month() + day() + hour() + minute() + second() + \".png\");\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Eric Ly"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by kusakari, with tags grid,circle\n\n### Response:\n",
    "completion": "let _aryObject = [];\nlet _tileNumT;\nlet _tileNumR;\nlet _ellipseRatio;\nlet _count;\nlet _stepR;\nlet _stepT;\nlet _rRate;\n\nfunction setup() {\n  let canvasSize;\n  if (windowWidth <= windowHeight) {\n    canvasSize = windowWidth;\n  } else {\n    canvasSize = windowHeight;\n  }\n  createCanvas(canvasSize, canvasSize);\n  frameRate(30);\n  colorMode(HSB, 360, 100, 100, 255);\n\tblendMode(BLEND);\n  strokeJoin(ROUND);\n  _freqCount = 4;\n  _rRate = 0.99;\n  _ellipseRatio = 4;\n  _count = 0;\n  _tileNumT = int(random(3, 16))+1;\n  _tileNumR = int(random(15, 32))+1;\n  \n  let shapeMode = 1;\n  let initT = int(random(_tileNumT));\n  let layerNum = 16;\n  for (k = 1; k <= layerNum; k++) {\n    let baseColor = 360 + random(720);\n    _aryObject.push(new f(\n      1, initT,\n      color((baseColor) % 360, 100, 100, 100),\n      shapeMode,\n      width/2/_tileNumR\n    ));\n  }\n}\n\nfunction draw() {\n  background(0);\n  \n  for (let i = 0; i < _aryObject.length; i++) {\n    _aryObject[i].update();\n    _aryObject[i].drawMe();\n  }\n\n  _count ++;\n}\n\nclass f {\n  constructor(iR, iT, myColor, shapeMode, sw) {\n    this.target_iR = iR;\n    this.target_iT = iT;\n    this.myColor = myColor;\n    this.shapeMode = shapeMode; //0 rect, 1 ellipse\n\t\tthis.sw = sw *_ellipseRatio; \n    this.aryPoint = [];\n  }\n\n  setTarget() {\n    _stepR = int(random(_tileNumR/2))+1;\n    _stepT = 1; //int(random(_tileNumT/30))+1;\n    this.iR = this.target_iR;\n    this.target_iT = this.target_iT % _tileNumT;\n    this.iT = this.target_iT;\n    \n    this.aryPoint.unshift([this.iR, this.iT]);\n\n    let dir;\n    if (this.iR <= _stepR) {\n      dir = random([\"down\", \"left\", \"right\"]);\n    } else if (this.iR >= _tileNumR-_stepR) {\n      dir = random([\"up\", \"left\", \"right\"]);\n    } else {\n      dir = random([\"up\", \"down\", \"left\", \"right\"]);\n    }\n\n    if (dir == \"up\") { this.target_iR = this.iR - _stepR; }\n    else if (dir == \"down\") { this.target_iR = this.iR + _stepR; }\n    else if (dir == \"left\") { this.target_iT = this.iT - _stepT; }\n    else if (dir == \"right\") { this.target_iT = this.iT + _stepT; }\n\n    this.dR = (this.target_iR - this.iR) / (_freqCount+0.5);\n    this.dT = (this.target_iT - this.iT) / (_freqCount+0.5);\n  }\n  \n  update() {\n    if (_count % _freqCount == 0) {\n      this.setTarget();\n    }\n\t\t\n    if (this.target_iR == this.iR) { //dir = right or left\n      this.aryPoint.unshift([this.iR, this.aryPoint[0][1] + (this.target_iT - this.iT)/2]);\n    } else if (this.target_iT == this.iT) {\n      this.aryPoint.unshift([this.aryPoint[0][0] + (this.target_iR - this.iR)/2, this.iT]);\n    }\n    this.iR = this.aryPoint[0][0];\n    this.iT = this.aryPoint[0][1];\n\n    while (this.aryPoint.length >= 100) {\n      this.aryPoint.pop();\n    }\n\n    for (let i = 0; i < this.aryPoint.length; i++) {\n      this.aryPoint[i][0] *= _rRate;\n    }\n  }\n\n  drawMe() {\n    push();\n    translate(width/2, height/2);\n\n    noStroke();\n    fill(this.myColor);\n    for (let i = 0; i < this.aryPoint.length; i++) {\n      ellipse(\n        width / 2 / _tileNumR * this.aryPoint[i][0] * cos(2*PI / _tileNumT * this.aryPoint[i][1]),\n        width / 2 / _tileNumR * this.aryPoint[i][0] * sin(2*PI / _tileNumT * this.aryPoint[i][1]),\n        this.sw/i**0.5, this.sw/i**0.5);\n    }\n\n    noFill();\n    strokeWeight(width/400);\n    stroke(this.myColor);\n    beginShape();\n    for (let i = 0; i < this.aryPoint.length; i++) {\n      vertex(\n        width / 2 / _tileNumR * this.aryPoint[i][0] * cos(2*PI / _tileNumT * this.aryPoint[i][1]),\n        width / 2 / _tileNumR * this.aryPoint[i][0] * sin(2*PI / _tileNumT * this.aryPoint[i][1]));\n    }\n    endShape();\n\n    pop();\n  }\n}\n\nfunction mouseReleased() {\n  _count = 0;\n  _tileNumT = int(random(3, 16))+1;\n  _tileNumR = int(random(15, 32))+1;\n  \n  let shapeMode = 1;\n  let initT = int(random(_tileNumT));\n  let layerNum = 16;\n  _aryObject = [];\n  for (k = 1; k <= layerNum; k++) {\n    let baseColor = 360 + random(720);\n    _aryObject.push(new f(\n      1, initT,\n      color((baseColor) % 360, 100, 100, 100),\n      shapeMode,\n      width/2/_tileNumR\n    ));\n  }\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by kusakari, with tags grid,circle"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by SamuelYAN, with tags p5js,processing,openprocessing,code,creativecode,creativecodeart,art,artwork,artworks,generativeart,shape,codingeveryday,everyday,line,noise,cloudy,sun,samuelyan\n\n### Response:\n",
    "completion": "// by SamuelYAN\n// more works //\n// https://twitter.com/SamuelAnn0924\n// https://www.instagram.com/samuel_yan_1990/\n\n\nvar seed = Math.random() * 9821;\nvar mySize;\nvar circle_r, circle_rMax, angle_r;\nvar space;\nvar m;\nlet xspacing;\nlet w;\nlet maxwaves;\nlet theta;\nlet amplitude = new Array(maxwaves);\nlet dx = new Array(maxwaves);\nlet yvalues;\nlet grad;\n\n// color\nlet colors0 = \"281914-1a1a1a-202020-242e30\".split(\"-\").map((a) => \"#\" + a);\nlet colors1 = \"fef9fb-fafdff-ffffff-fcfbf4-f9f8f6\".split(\"-\").map((a) => \"#\" + a);\nlet colors2 = \"8c75ff-c553d2-2dfd60-2788f5-23054f-f21252-8834f1-c4dd92-184fd3-f9fee2-2E294E-541388-F1E9DA-FFD400-D90368-e9baaa-ffa07a-164555-ffe1d0-acd9e7-4596c7-6d8370-e45240-21d3a4-3303f9-cd2220-173df6-244ca8-a00360-b31016\".split(\"-\").map((a) => \"#\" + a);\nlet colors = [];\nvar color_1, color_2, colorbg, color_c;\n\nfunction setup() {\n\trandomSeed(seed);\n\tframeRate(25);\n\tmySize = min(windowWidth, windowHeight);\n\t// mySize = 1200;\n\t// pixelDensity(5);\n\ttranslate((width - mySize) / 2, (height - mySize) / 2);\n\tcreateCanvas(mySize, mySize / 35 * 27);\n\tcolors[0] = random(colors0);\n\tcolors[1] = random(colors2);\n\tcolors[2] = random(colors2);\n\tcolors[3] = random(colors2);\n\tcolors[4] = random(colors1);\n\tcolor_2 = colors0;\n\tcolorbg = random(colors0);\n\tbackground(colorbg);\n\n\tcircle_rMax = (mySize / 4) * 2;\n\tcircle_r = 0;\n\tangle_r = 0;\n\tw = width * 2;\n\tm = random(10, 5);\n\txspacing = random(5, 2);\n\tmaxwaves = random(4, 8);\n\ttheta = 0.0;\n\n\t// noStroke();\t\n\t//   fill(color_c);\n\tfor (let i = 0; i < maxwaves; i++) {\n\t\tamplitude[i] = random(10, 30);\n\t\tlet period = random(100, 500);\n\t\tdx[i] = (TWO_PI / period) * xspacing;\n\t}\n\n\tyvalues = new Array(floor(w / xspacing));\n\tlet filter1 = new makeFilter();\n}\n\nfunction draw() {\n\trandomSeed(seed);\n\tpush();\n\tnoFill();\n\ttranslate(width / 2, height / 2);\n\trotate(angle_r);\n\tdrawingContext.setLineDash([]);\n\n\tfor (let i = 0; i < xspacing; i += random(2, 1)) {\n\t\tdrawingContext.shadowColor = random(colors);\n\t\tdrawingContext.shadowOffsetX = random(-1, 1);\n\t\tdrawingContext.shadowOffsetY = random(-1, 1);\n\t\tdrawingContext.shadowBlur = 0;\n\t\tpush();\n\t\ttranslate(i, i * m + m);\n\t\tstroke(random(colors));\n\t\tcalcWave();\n\t\trenderWave();\n\t\tpop();\n\t}\n\tif (circle_r < circle_rMax) {\n\t\t// push();\n\t\t// \tstrokeWeight(random(0.5, 2));\n\t\t// \tstroke(random(colors));\n\t\t// \t// drawingContext.shadowColor = random(colors0);\n\t\t// \t// drawingContext.shadowOffsetX = -0.5;\n\t\t// \t// drawingContext.shadowOffsetY = -0.5;\n\t\t// \t// drawingContext.shadowBlur = 0;\n\t\t// \tdrawingContext.shadowColor = random(colors1);\n\t\t// \tdrawingContext.shadowOffsetX = 0.5;\n\t\t// \tdrawingContext.shadowOffsetY = 0.5;\n\t\t// \tdrawingContext.shadowBlur = 0;\n\t\t// \trectMode(CENTER);\n\t\t// \tsquare(0, 0, circle_r);\n\t\tangle_r += TAU / 360 / 10;\n\t\tcircle_r += random(0.25, 1);\n\t\t// \tpop();\n\t}\n\tpop();\n\tm -= random(0.1, 0.3);\n\n\tif (circle_r >= circle_rMax) {\n\t\t\n\t\tblendMode(DIFFERENCE);\n\t\tgrad = drawingContext.createRadialGradient(0, 0, 0, 0, 0, circle_r);\n\t\tgrad.addColorStop(0, random(colors));\n\t\tgrad.addColorStop(1, random(colors));\n\t\tdrawingContext.fillStyle = grad;\n\t\tpush();\n\t\ttranslate(width / 2, height / 2);\n\t\trectMode(CENTER);\n\t\trotate(random(TAU));\n\t\t// circle(width/2, height/2, circle_r);\n\t\tsquare(0,0, circle_r*0.75);\n\t\tpop();\n\t\tstrokeWeight(random(0.1, 0.2));\n\t\tstroke(str(random(colors)) + \"80\");\n\t\tnoFill();\n\t\tdrawingContext.setLineDash([1, 1, 1, 1]);\n\t\tdrawOverPattern();\n\t\timage(overAllTexture, 0, 0);\n\t\t\n\t\tnoLoop();\n\t}\n}\n\nfunction calcWave() {\n\ttheta += random(0.005, 0.001);\n\n\tfor (let i = 0; i < yvalues.length; i++) {\n\t\tyvalues[i] = 0;\n\t}\n\n\tfor (let j = 0; j < maxwaves; j++) {\n\t\tlet x = theta;\n\t\tfor (let i = 0; i < yvalues.length; i++) {\n\t\t\tif (j % 2 == 0) yvalues[i] += sin(x) * amplitude[j];\n\t\t\telse yvalues[i] += cos(x) * amplitude[j];\n\t\t\tx += dx[j];\n\t\t}\n\t}\n}\n\nfunction renderWave() {\n\tnoFill();\n\n\tstrokeWeight(random(1, 2));\n\tfor (let x = 0; x < yvalues.length; x++) {\n\t\tpush();\n\t\ttranslate(-width * 1 + x * xspacing, random(-height, height * 1.5), );\n\t\trotate(theta * TAU);\n\t\tif (x % 3 == 1) {\n\t\t\trectMode(CENTER);\n\t\t\trect(0, 0, yvalues[x] / 2, random(yvalues[x] / 2, yvalues[x] / 4));\n\t\t} else if (x % 3 == 2) {\n\t\t\tellipse(0, 0, yvalues[x] / 2, random(yvalues[x] / 2, yvalues[x] / 4));\n\t\t} else {\n\t\t\tcircle(0, 0, random(yvalues[x] / 2, yvalues[x] / 4));\n\t\t}\n\t\tpop();\n\t}\n}\n\nfunction drawOverPattern() {\n\tpush();\n\ttranslate(width / 2, height / 2);\n\trotate(-PI / 2);\n\n\tlet s = mySize / 2 * sqrt(3) - 2;\n\tlet n = 4;\n\n\tfor (let theta = 0; theta < TWO_PI; theta += TWO_PI / 6) { // noprotect\n\t\tdivideOP(0, 0, s * cos(theta), s * sin(theta), s * cos(theta + TWO_PI / 6), s * sin(theta + TWO_PI / 6), n);\n\t}\n\tpop();\n}\n\nfunction prop(x1, y1, x2, y2, k) {\n\tlet x3 = (1 - k) * x1 + k * x2;\n\tlet y3 = (1 - k) * y1 + k * y2;\n\treturn [x3, y3];\n}\n\nfunction divideOP(x1, y1, x2, y2, x3, y3, n) {\n\tif (n > 1) {\n\t\tlet [xA, yA] = prop(x1, y1, x2, y2, 1 / 3);\n\t\tlet [xB, yB] = prop(x1, y1, x2, y2, 2 / 3);\n\t\tlet [xC, yC] = prop(x2, y2, x3, y3, 1 / 3);\n\t\tlet [xD, yD] = prop(x2, y2, x3, y3, 2 / 3);\n\t\tlet [xE, yE] = prop(x3, y3, x1, y1, 1 / 3);\n\t\tlet [xF, yF] = prop(x3, y3, x1, y1, 2 / 3);\n\t\tlet [xG, yG] = prop(xF, yF, xC, yC, 1 / 2);\n\t\tdivideOP(x1, y1, xA, yA, xF, yF, n - 1);\n\t\tdivideOP(xA, yA, xB, yB, xG, yG, n - 1);\n\t\tdivideOP(xB, yB, x2, y2, xC, yC, n - 1);\n\t\tdivideOP(xG, yG, xF, yF, xA, yA, n - 1);\n\t\tdivideOP(xC, yC, xG, yG, xB, yB, n - 1);\n\t\tdivideOP(xF, yF, xG, yG, xE, yE, n - 1);\n\t\tdivideOP(xG, yG, xC, yC, xD, yD, n - 1);\n\t\tdivideOP(xD, yD, xE, yE, xG, yG, n - 1);\n\t\tdivideOP(xE, yE, xD, yD, x3, y3, n - 1);\n\t} else {\n\t\tmakeTriangle([x1, y1], [x2, y2], [x3, y3]);\n\t}\n}\n\nfunction makeTriangle(v1, v2, v3) {\n\tlet points = shuffle([v1, v2, v3]);\n\tlet [x1, y1] = points[0];\n\tlet [x2, y2] = points[1];\n\tlet [x3, y3] = points[2];\n\tlet iStep = 1 / (pow(2, floor(random(4, 2))));\n\tfor (let i = 0; i < 1; i += iStep) { // noprotect\n\t\tlet [x4, y4] = prop(x1, y1, x2, y2, 1 - i);\n\t\tlet [x5, y5] = prop(x1, y1, x3, y3, 1 - i);\n\t\ttriangle(x1, y1, x4, y4, x5, y5);\n\t}\n}\n\nfunction makeFilter() {\n\trandomSeed(seed);\n\t// noise\u306e\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u3064\u304f\u308b\n\tcolorMode(HSB, 360, 100, 100, 100);\n\tdrawingContext.shadowColor = color(0, 0, 5, 5);\n\toverAllTexture = createGraphics(windowWidth, windowHeight);\n\toverAllTexture.loadPixels();\n\tfor (var i = 0; i < width; i++) {\n\t\tfor (var j = 0; j < height; j++) {\n\t\t\toverAllTexture.set(\n\t\t\t\ti,\n\t\t\t\tj,\n\t\t\t\tcolor(10, 90, 70, noise(i / 3, j / 3, (i * j) / 50) * random(1, 15))\n\t\t\t);\n\t\t}\n\t}\n\toverAllTexture.updatePixels();\n}\n\nfunction keyTyped() {\n\tif (key === \"s\" || key === \"S\") {\n\t\tsaveCanvas(\"0427_NoisePlanet_Plant_2022\", \"png\");\n\t}\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by SamuelYAN, with tags p5js,processing,openprocessing,code,creativecode,creativecodeart,art,artwork,artworks,generativeart,shape,codingeveryday,everyday,line,noise,cloudy,sun,samuelyan"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Okazz\n\n### Response:\n",
    "completion": "let colors = ['#f75c03', '#d90368', '#820263', '#f5aa14', '#04a777'];\nlet shapes = [];\n\nfunction setup() {\n\tcreateCanvas(1080, 1080);\n\trectMode(CENTER);\n\tbackground(0);\n\tlet seg = 40;\n\tlet w = width / seg;\n\tfor (let i = 0; i < seg; i++) {\n\t\tfor (let j = 0; j < seg; j++) {\n\t\t\tlet x = i * w + (w / 2);\n\t\t\tlet y = j * w + (w / 2);\n\t\t\tshapes.push({x:x, y:y, w:w*int(random(2, 4))});\n\t\t}\n\t}\n\tshuffle(shapes, true);\n\n\tfor(let s of shapes){\n\t\tpmp(s.x, s.y, s.w);\n\t}\n}\n\nfunction draw() {\n\t\n}\n\nfunction pmp(x, y, w){\n\tlet crn = w * 0.1;\n\tpush();\n\ttranslate(x, y);\n\trotate(noise(x*0.0002, y*0.0002)*TAU*10);\n\tnoStroke();\n\tlet off = 0;\n\tfill(255);\n\tfor(let i=0;i<3;i++){\n\trect(0, 0, (w * 0.4)-off, (w*0.9)-off, crn);\n\trect(0, 0, (w * 0.7)-off, (w * 0.75)-off, crn);\n\trect(0, 0, w-off, (w * 0.6)-off, crn);\n\tif(i==0)fill(0);\n\telse fill(random(colors));\n\toff += 2;\n\t}\n\ttranslate(random(-1, 1)*w*0.1, 0);\n\tlet lew = random(0.2, 0.35)*w;\n\tlet rew = random(0.2, 0.35)*w;\n\tmyEllipse(w*random(0.2, 0.25), -w*0.04,lew, lew+random(-1, 1)*w*0.05, random(TAU));\n\tmyEllipse(-w*random(0.2, 0.25), -w*0.04, rew, rew+random(-1, 1)*w*0.05, random(TAU));\n\tstrokeWeight(w*0.03);\n\tstroke(0);\n\tline(-w*0.25, w*0.2, w*0.25, w*0.2);\n\tline(0, w*0.15, 0, w*0.25);\n\tline(-w*0.15, w*0.15, -w*0.15, w*0.25);\n\tline(w*0.15, w*0.15, w*0.15, w*0.25);\n\tpop();\n}\n\nfunction myEllipse(x, y, w, h, a){\n\tpush();\n\ttranslate(x, y);\n\trotate(a);\n\tfill(0);\n\tellipse(0, 0, w, h);\n\tfor(let i=0; i<5; i++){\n\t\tlet ww = map(i, 0, 5, w*0.9, 0);\n\t\tlet hh = map(i, 0, 5, h*0.9, 0);\n\t\tellipse(0, 0,  ww, hh);\n\t\tfill(random(colors));\n\t}\n\tpop();\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Okazz"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Ash He, with tags data structure,stack,set,table,graph,particles,network,grayscale,diagram\n\n### Response:\n",
    "completion": "// Title: Data Structures\n// Author: FAL\n// Date: 12. Nov. 2017\n// Made with p5.js v0.5.16 \n// Generated by TypeScript v2.5.3\n\n// CAUTION: Spaghetti code! (Redundant codes & inconsistent use of Array and Set)\n\n\n\"use strict\";\n//\n// ------------ Circular area -----------------------------\n//  Depends on: Physics body\n//\nclass CircularArea {\n    constructor(position, radius) {\n        this.centerPosition = position;\n        this.radius = radius;\n    }\n    overlap(body) {\n        const distance = body.position.dist(this.centerPosition);\n        const bodyRadius = 0.5 * body.bodySize;\n        if (distance + bodyRadius <= this.radius)\n            return 1;\n        if (distance >= this.radius + bodyRadius)\n            return -1;\n        return 0;\n    }\n    setBodyOnCircumference(body, offsetDistance) {\n        const directionAngle = atan2(body.y - this.centerPosition.y, body.x - this.centerPosition.x);\n        const distance = this.radius + offsetDistance;\n        body.position.set(this.centerPosition.x + distance * cos(directionAngle), this.centerPosition.y + distance * sin(directionAngle));\n    }\n    keepIn(body, restitution = 1) {\n        if (this.overlap(body) === 1)\n            return;\n        this.setBodyOnCircumference(body, -0.5 * body.bodySize);\n        const normalUnitVector = p5.Vector.sub(this.centerPosition, body.position).normalize();\n        body.kinematicQuantity.bounce(normalUnitVector, restitution);\n    }\n    keepOut(body, restitution = 1) {\n        if (this.overlap(body) === -1)\n            return;\n        this.setBodyOnCircumference(body, +0.5 * body.bodySize);\n        const normalUnitVector = p5.Vector.sub(body.position, this.centerPosition).normalize();\n        body.kinematicQuantity.bounce(normalUnitVector, restitution);\n    }\n}\n//\n// ------------ Collection utility (functions for Array, Set) -----------------------\n//\nfunction getRandom(array) {\n    return array[Math.floor(Math.random() * array.length)];\n}\nfunction popRandom(array) {\n    return array.splice(Math.floor(Math.random() * array.length), 1)[0];\n}\nfunction roundRobin(set, callback) {\n    const array = Array.from(set);\n    const arrayLength = array.length;\n    for (let i = 0, len = arrayLength - 1; i < len; i += 1) {\n        for (let k = i + 1, kLen = arrayLength; k < kLen; k += 1) {\n            callback(array[i], array[k]);\n        }\n    }\n}\n//\n// ------------ Data structure visualizer -----------------------------\n//\nclass DataStructureVisualizer {\n    setBodyVelocity(body, targetX, targetY, durationFrameCount) {\n        const t = durationFrameCount;\n        body.setVelocity((targetX - body.x) / t, (targetY - body.y) / t - 0.5 * this.gravityConstant * t);\n    }\n    constructor(x, y, name) {\n        this.isRemoved = false;\n        this.gravityConstant = 500 * unitSpeed / IDEAL_FRAME_RATE;\n        this.position = createVector(x, y);\n        this.name = name;\n    }\n    draw() {\n        translate(this.position.x, this.position.y);\n        this.drawAnimation();\n        this.drawName();\n        translate(-this.position.x, -this.position.y);\n    }\n    drawName() {\n        noStroke();\n        fill(0);\n        text(this.name, 0, 120 * unitLength);\n    }\n}\n// ------------ Stack -----------\nclass StackVisualizer extends DataStructureVisualizer {\n    constructor(x, y) {\n        super(x, y, 'Stack');\n        this.elementStack = SpriteArray.create();\n        this.pushingElementArray = SpriteArray.create();\n        this.poppingElementArray = SpriteArray.create();\n        this.nextElementTargetPosition = createVector();\n        this.elementIntervalLength = 20 * unitLength;\n        this.stackLimitLength = 10;\n        this.pushDurationFrameCount = 0.5 * IDEAL_FRAME_RATE;\n    }\n    step() {\n        this.pushingElementArray.step();\n        this.poppingElementArray.step();\n        this.updatePushingElements();\n        this.updatePoppingElements();\n        if (frameCount % Math.floor(0.25 * IDEAL_FRAME_RATE) === 0) {\n            if (this.isPushable()) {\n                if (Math.random() < (1 - this.elementStack.length / this.stackLimitLength)) {\n                    this.push();\n                }\n            }\n            if (this.isPoppable()) {\n                this.pop();\n            }\n        }\n    }\n    drawAnimation() {\n        translate(0, 60 * unitLength);\n        this.elementStack.draw();\n        this.pushingElementArray.draw();\n        this.poppingElementArray.draw();\n        translate(0, -60 * unitLength);\n    }\n    push() {\n        const pushingElement = new VisualDataElement();\n        const x = random(-100, -20) * unitLength;\n        const y = random(-200, -100) * unitLength;\n        const targetX = 0;\n        const targetY = this.nextElementTargetPosition.y;\n        const t = this.pushDurationFrameCount;\n        pushingElement.body.setPosition(x, y);\n        this.setBodyVelocity(pushingElement.body, targetX, targetY, t);\n        pushingElement.body.bodySize = 14 * unitLength;\n        pushingElement.beginAppear(0.5 * IDEAL_FRAME_RATE);\n        this.pushingElementArray.push(pushingElement);\n        this.nextElementTargetPosition.sub(0, this.elementIntervalLength);\n    }\n    pop() {\n        const poppingElement = this.elementStack.pop();\n        if (!poppingElement)\n            return;\n        const speed = random(100, 200) * unitSpeed;\n        const directionAngle = -QUARTER_PI + random(-0.5 * QUARTER_PI, 0.5 * QUARTER_PI);\n        poppingElement.body.setVelocity(speed * cos(directionAngle), speed * sin(directionAngle));\n        poppingElement.beginDisappear(0.5 * IDEAL_FRAME_RATE);\n        this.poppingElementArray.push(poppingElement);\n        this.nextElementTargetPosition.add(0, this.elementIntervalLength);\n    }\n    isPushable() {\n        return (this.pushingElementArray.length + this.elementStack.length) < this.stackLimitLength;\n    }\n    isPoppable() {\n        return this.elementStack.length > 0 && this.pushingElementArray.length === 0;\n    }\n    updatePushingElements() {\n        if (this.pushingElementArray.length === 0)\n            return;\n        const targetElementPositionY = this.elementStack.length > 0 ?\n            this.elementStack[this.elementStack.length - 1].body.y - this.elementIntervalLength : 0;\n        for (let i = this.pushingElementArray.length - 1; i >= 0; i -= 1) {\n            const pushingElement = this.pushingElementArray[i];\n            pushingElement.body.accelerate(0, this.gravityConstant);\n            if (pushingElement.properFrameCount >= this.pushDurationFrameCount) {\n                pushingElement.body.setPosition(0, targetElementPositionY);\n                this.pushingElementArray.splice(i, 1);\n                this.elementStack.push(pushingElement);\n            }\n        }\n    }\n    updatePoppingElements() {\n        if (this.poppingElementArray.length === 0)\n            return;\n        for (let i = this.poppingElementArray.length - 1; i >= 0; i -= 1) {\n            this.poppingElementArray[i].body.accelerate(0, this.gravityConstant);\n        }\n    }\n}\n// ------------ Table -----------\nclass TableVisualizer extends DataStructureVisualizer {\n    constructor(x, y) {\n        super(x, y, 'Table');\n        this.elementArray = SpriteArray.create();\n        this.tupleArray = SpriteArray.create();\n        this.deletingTupleArray = SpriteArray.create();\n        this.tupleArrayLimitLength = 6;\n        this.tupleIntervalLength = 32 * unitLength;\n        this.insertDurationFrameCount = 0.5 * IDEAL_FRAME_RATE;\n        this.tupleFieldCount = 5;\n        this.elementIntervalLength = 24 * unitLength;\n        this.elementSize = 12 * unitLength;\n        this.tupleCreatingPositionX = 0 * unitLength;\n        this.tupleCreatingOffsetPositionXArray = [];\n        for (let i = 0; i < this.tupleFieldCount; i += 1) {\n            const x = (-0.5 * (this.tupleFieldCount - 1) + i) * this.elementIntervalLength;\n            this.tupleCreatingOffsetPositionXArray.push(x);\n        }\n        this.tupleCreatingPositionY = 80 * unitLength;\n        this.tupleTopRelativePositionY = -170 * unitLength;\n        this.tupleFrameShapeColor = new NoFillShapeColor(color(160));\n        this.tupleFrameDrawBodyShape = (body) => {\n            rectMode(CENTER);\n            for (let i = 0; i < this.tupleFieldCount; i += 1) {\n                const offsetX = this.tupleCreatingOffsetPositionXArray[i];\n                rect(body.x + offsetX, body.y, this.elementIntervalLength, this.elementIntervalLength);\n            }\n            rectMode(CORNER);\n        };\n        const header = new VisualDataElement();\n        header.body.setPosition(0, this.tupleCreatingPositionY + this.tupleTopRelativePositionY - 0.7 * this.tupleIntervalLength);\n        header.shapeColor = new ShapeColor(color(160), color(160, 32));\n        header.drawBodyShape = (body) => {\n            rectMode(CENTER);\n            for (let i = 0; i < this.tupleFieldCount; i += 1) {\n                const offsetX = this.tupleCreatingOffsetPositionXArray[i];\n                rect(body.x + offsetX, body.y, this.elementIntervalLength, 0.3 * this.elementIntervalLength);\n            }\n            rectMode(CORNER);\n        };\n        this.headerElement = header;\n    }\n    step() {\n        this.elementArray.step();\n        this.tupleArray.step();\n        this.deletingTupleArray.step();\n        this.updateElements();\n        this.updateTuples();\n        if (frameCount % Math.floor(0.25 * IDEAL_FRAME_RATE) === 0) {\n            if (this.isInsertable()) {\n                if (Math.random() < (1 - this.tupleArray.length / this.tupleArrayLimitLength)) {\n                    this.insert();\n                }\n            }\n            if (this.isDeletable()) {\n                this.delete();\n            }\n        }\n    }\n    drawAnimation() {\n        this.headerElement.draw();\n        this.elementArray.draw();\n        this.tupleArray.draw();\n        this.deletingTupleArray.draw();\n    }\n    updateElements() {\n        for (let i = this.elementArray.length - 1; i >= 0; i -= 1) {\n            const eachElement = this.elementArray[i];\n            const spriteArray = eachElement.getAllLeafElements();\n            for (const eachSprite of spriteArray) {\n                eachSprite.body.accelerate(0, this.gravityConstant);\n            }\n            if (eachElement.properFrameCount >= this.insertDurationFrameCount) {\n                for (let i = 0; i < this.tupleFieldCount; i += 1) {\n                    spriteArray[i].body.setPosition(this.tupleCreatingOffsetPositionXArray[i], this.tupleCreatingPositionY);\n                    spriteArray[i].body.setVelocity(0, 0);\n                }\n                const frameSprite = new VisualDataElement();\n                frameSprite.body.setPosition(this.tupleCreatingPositionX, this.tupleCreatingPositionY);\n                frameSprite.shapeColor = this.tupleFrameShapeColor;\n                frameSprite.drawBodyShape = this.tupleFrameDrawBodyShape;\n                eachElement.add(frameSprite);\n                eachElement.isMovable = true;\n                this.tupleArray.push(this.elementArray.splice(i, 1)[0]);\n            }\n        }\n    }\n    updateTuples() {\n        for (let i = this.tupleArray.length - 1; i >= 0; i -= 1) {\n            const tuplePosition = this.tupleArray[i].kinematicQuantity.position;\n            const tupleVelocity = this.tupleArray[i].kinematicQuantity.velocity;\n            const targetY = (i === 0) ? this.tupleTopRelativePositionY :\n                this.tupleArray[i - 1].kinematicQuantity.position.y + this.tupleIntervalLength;\n            tupleVelocity.y = 0.1 * (targetY - tuplePosition.y);\n        }\n    }\n    insert() {\n        const compositeElement = new CompositeVisualDataElement();\n        const targetY = this.tupleCreatingPositionY;\n        const t = this.insertDurationFrameCount;\n        for (let i = 0; i < this.tupleFieldCount; i += 1) {\n            const newElement = new VisualDataElement();\n            const x = random(-100, 100) * unitLength;\n            const y = random(-150, 0) * unitLength;\n            const targetX = this.tupleCreatingPositionX + this.tupleCreatingOffsetPositionXArray[i];\n            newElement.body.setPosition(x, y);\n            this.setBodyVelocity(newElement.body, targetX, targetY, t);\n            newElement.body.bodySize = this.elementSize;\n            compositeElement.add(newElement);\n        }\n        compositeElement.beginAppear(0.5 * IDEAL_FRAME_RATE);\n        this.elementArray.push(compositeElement);\n    }\n    delete() {\n        let index = null;\n        for (let i = 0, len = this.tupleArray.length; i < len; i += 1) {\n            if (this.tupleArray[i].kinematicQuantity.velocity.y < -10 * unitSpeed)\n                continue;\n            if (Math.random() < 0.2) {\n                index = i;\n                break;\n            }\n        }\n        if (index === null)\n            return;\n        const deletingTuple = this.tupleArray[index];\n        deletingTuple.beginDisappear(0.25 * IDEAL_FRAME_RATE);\n        deletingTuple.kinematicQuantity.velocity.set(100 * unitSpeed, 0);\n        this.deletingTupleArray.push(this.tupleArray.splice(index, 1)[0]);\n    }\n    isInsertable() {\n        return (this.tupleArray.length + this.elementArray.length) < this.tupleArrayLimitLength;\n    }\n    isDeletable() {\n        return this.tupleArray.length > 0 && this.elementArray.length === 0;\n    }\n}\n// ------------ Set -----------\nclass SetVisualizer extends DataStructureVisualizer {\n    constructor(x, y) {\n        super(x, y, 'Set');\n        // Arrays\n        this.elementArray = SpriteArray.create();\n        this.addingElementArray = SpriteArray.create();\n        this.deletingElementArray = SpriteArray.create();\n        // VisualSetElement\n        const displaySize = 130 * unitLength;\n        const offsetDistance = 20 * unitLength;\n        const setPositionY = -10 * unitLength;\n        this.elementSetA = new VisualSetElement(-offsetDistance, setPositionY + offsetDistance, displaySize);\n        this.elementSetB = new VisualSetElement(+offsetDistance, setPositionY - offsetDistance, displaySize);\n        // Constants\n        this.elementLimitCount = 16;\n        this.addDurationFrameCount = 0.5 * IDEAL_FRAME_RATE;\n        // Target positions\n        this.targetPositionArray = [];\n        const targetOffsetPosition = 0.2 * displaySize;\n        this.targetPositionArray.push(createVector(this.elementSetA.position.x - targetOffsetPosition, this.elementSetA.position.y + targetOffsetPosition));\n        this.targetPositionArray.push(createVector(this.elementSetB.position.x + targetOffsetPosition, this.elementSetB.position.y - targetOffsetPosition));\n        this.targetPositionArray.push(p5.Vector.add(this.elementSetA.position, this.elementSetB.position).mult(0.5));\n    }\n    step() {\n        this.elementArray.step();\n        this.addingElementArray.step();\n        this.deletingElementArray.step();\n        this.updateAddingElements();\n        this.updateDeletingElements();\n        this.elementSetA.constrainElementsPosition(this.elementArray);\n        this.elementSetB.constrainElementsPosition(this.elementArray);\n        if (frameCount % Math.floor(0.25 * IDEAL_FRAME_RATE) === 0) {\n            if (Math.random() < 1 - this.elementArray.length / this.elementLimitCount) {\n                this.add();\n            }\n            else {\n                if (Math.random() < 0.5)\n                    this.delete();\n            }\n        }\n    }\n    drawAnimation() {\n        this.elementSetA.draw();\n        this.elementSetB.draw();\n        this.elementArray.draw();\n        this.addingElementArray.draw();\n        this.deletingElementArray.draw();\n    }\n    updateAddingElements() {\n        for (let i = this.addingElementArray.length - 1; i >= 0; i -= 1) {\n            const element = this.addingElementArray[i];\n            element.body.accelerate(0, this.gravityConstant);\n            if (element.properFrameCount >= this.addDurationFrameCount) {\n                element.body.velocity.set(p5.Vector.random2D().mult(50 * unitSpeed));\n                if (this.elementSetA.overlap(element) >= 0)\n                    this.elementSetA.add(element);\n                if (this.elementSetB.overlap(element) >= 0)\n                    this.elementSetB.add(element);\n                this.elementArray.push(this.addingElementArray.splice(i, 1)[0]);\n            }\n        }\n    }\n    updateDeletingElements() {\n        for (let i = this.deletingElementArray.length - 1; i >= 0; i -= 1) {\n            const element = this.deletingElementArray[i];\n            element.body.accelerate(0, this.gravityConstant);\n        }\n    }\n    add() {\n        const newElement = new VisualDataElement();\n        const targetPosition = getRandom(this.targetPositionArray);\n        newElement.body.bodySize = 12 * unitLength;\n        newElement.body.position.set(random(-100, 0), random(-170, -100));\n        this.setBodyVelocity(newElement.body, targetPosition.x, targetPosition.y, this.addDurationFrameCount);\n        newElement.beginAppear(0.5 * IDEAL_FRAME_RATE);\n        this.addingElementArray.push(newElement);\n    }\n    delete() {\n        const deletingElement = popRandom(this.elementArray);\n        const speed = 200 * unitSpeed;\n        const directionAngle = random(PI + QUARTER_PI, PI + HALF_PI + QUARTER_PI);\n        deletingElement.body.velocity.add(speed * cos(directionAngle), speed * sin(directionAngle));\n        deletingElement.beginDisappear(0.5 * IDEAL_FRAME_RATE);\n        this.elementSetA.delete(deletingElement);\n        this.elementSetB.delete(deletingElement);\n        this.deletingElementArray.push(deletingElement);\n    }\n}\nclass VisualSetElement {\n    constructor(x, y, displaySize) {\n        this.isRemoved = false;\n        this.position = createVector(x, y);\n        this.dataElementSet = new Set();\n        this.diameter = displaySize;\n        this.radius = 0.5 * this.diameter;\n        this.shapeColor = new ShapeColor(color(128), color(128, 32));\n        this.area = new CircularArea(this.position, this.radius);\n    }\n    step() {\n    }\n    draw() {\n        this.shapeColor.apply();\n        ellipse(this.position.x, this.position.y, this.diameter, this.diameter);\n    }\n    add(element) {\n        this.dataElementSet.add(element);\n    }\n    delete(element) {\n        this.dataElementSet.delete(element);\n    }\n    overlap(element) {\n        return this.area.overlap(element.body);\n    }\n    constrainElementsPosition(array) {\n        for (const element of array) {\n            if (this.dataElementSet.has(element)) {\n                this.area.keepIn(element.body);\n            }\n            else {\n                this.area.keepOut(element.body);\n            }\n        }\n    }\n}\n// ------------ Graph -----------\nclass GraphVisualizer extends DataStructureVisualizer {\n    constructor(x, y) {\n        super(x, y, 'Graph');\n        // Graph and Arrays\n        this.graph = new VisualGraph();\n        this.addingElementArray = SpriteArray.create();\n        this.deletingElementArray = SpriteArray.create();\n        // Constants\n        this.elementLimitCount = 8;\n        this.addDurationFrameCount = 0.5 * IDEAL_FRAME_RATE;\n        this.targetPosition = createVector(0, -10 * unitLength);\n    }\n    step() {\n        this.graph.step();\n        this.addingElementArray.step();\n        this.deletingElementArray.step();\n        this.updateAddingElements();\n        this.updateDeletingElements();\n        if (frameCount % Math.floor(0.25 * IDEAL_FRAME_RATE) === 0) {\n            if (Math.random() < 1 - this.graph.nodeSet.size / this.elementLimitCount) {\n                this.add();\n            }\n            else {\n                if (Math.random() < 0.3)\n                    this.delete();\n            }\n        }\n    }\n    drawAnimation() {\n        this.graph.draw();\n        this.addingElementArray.draw();\n        this.deletingElementArray.draw();\n    }\n    updateAddingElements() {\n        for (let i = this.addingElementArray.length - 1; i >= 0; i -= 1) {\n            this.addingElementArray[i].body.accelerate(0, this.gravityConstant);\n            if (this.addingElementArray[i].properFrameCount >= this.addDurationFrameCount) {\n                this.completeAdd(i);\n            }\n        }\n    }\n    completeAdd(elementIndex) {\n        const element = this.addingElementArray[elementIndex];\n        element.body.velocity.set(random(-1, 1), random(-1, 1));\n        element.body.setFriction(0.1);\n        const adjacentElement = this.graph.nodeSet.getRandomSubset(3);\n        this.graph.nodeSet.add(this.addingElementArray.splice(elementIndex, 1)[0]);\n        for (const eachAdjacentElement of adjacentElement) {\n            this.graph.edgeSet.add(new VisualEdge(element, eachAdjacentElement));\n        }\n    }\n    updateDeletingElements() {\n        for (let i = this.deletingElementArray.length - 1; i >= 0; i -= 1) {\n            const element = this.deletingElementArray[i];\n            element.body.accelerate(0, this.gravityConstant);\n        }\n    }\n    add() {\n        const newElement = new VisualDataElement();\n        newElement.body.bodySize = 12 * unitLength;\n        newElement.body.position.set(random(-100, 0), random(-170, -100));\n        this.setBodyVelocity(newElement.body, this.targetPosition.x, this.targetPosition.y, this.addDurationFrameCount);\n        newElement.beginAppear(0.5 * IDEAL_FRAME_RATE);\n        this.addingElementArray.push(newElement);\n    }\n    delete(element) {\n        let deletingElement;\n        if (element) {\n            this.graph.deleteNode(element);\n            deletingElement = element;\n        }\n        else {\n            deletingElement = this.graph.popRandom();\n        }\n        const speed = 200 * unitSpeed;\n        const directionAngle = random(PI + QUARTER_PI, PI + HALF_PI + QUARTER_PI);\n        deletingElement.body.velocity.add(speed * cos(directionAngle), speed * sin(directionAngle));\n        deletingElement.body.setFriction(0);\n        deletingElement.beginDisappear(0.5 * IDEAL_FRAME_RATE);\n        this.deletingElementArray.push(deletingElement);\n        // delete other isolated elements\n        for (const eachElement of this.graph.nodeSet) {\n            if (this.graph.nodeSet.size <= 3)\n                break;\n            if (this.graph.getIncidentEdgeSet(eachElement).size === 0)\n                this.delete(eachElement);\n        }\n    }\n}\nclass VisualGraph {\n    constructor() {\n        this.nodeSet = new SpriteSet();\n        this.edgeSet = new SpriteSet();\n        this.area = new CircularArea(createVector(0, -10 * unitLength), 100 * unitLength);\n    }\n    getIncidentEdgeSet(element) {\n        const array = new SpriteSet();\n        for (const edge of this.edgeSet) {\n            if (edge.isIncidentTo(element))\n                array.add(edge);\n        }\n        return array;\n    }\n    deleteNode(element) {\n        this.deleteIncidentEdges(element);\n        this.nodeSet.delete(element);\n    }\n    deleteIncidentEdges(element) {\n        const edgeSet = this.getIncidentEdgeSet(element);\n        for (const eachEdge of edgeSet) {\n            eachEdge.isRemoved = true;\n            this.edgeSet.delete(eachEdge);\n        }\n    }\n    step() {\n        this.edgeSet.step();\n        roundRobin(this.nodeSet, this.applyCoulombForce);\n        this.nodeSet.step();\n        for (const element of this.nodeSet) {\n            this.area.keepIn(element.body, 0);\n        }\n    }\n    draw() {\n        this.edgeSet.draw();\n        this.nodeSet.draw();\n    }\n    popRandom() {\n        const element = this.nodeSet.popRandom();\n        const edgeSet = this.getIncidentEdgeSet(element);\n        for (const eachEdge of edgeSet) {\n            eachEdge.isRemoved = true;\n            this.edgeSet.delete(eachEdge);\n        }\n        return element;\n    }\n    applyCoulombForce(element, otherElement) {\n        element.body.attract(otherElement.body, -0.2);\n    }\n}\n//\n// ------------ Frame counter -----------------------------\n//\nclass FrameCounter {\n    constructor(on, duration) {\n        this.isOn = on;\n        this.count = 0;\n        this.durationFrameCount = duration || null;\n    }\n    on(duration) {\n        this.isOn = true;\n        this.durationFrameCount = duration || null;\n    }\n    off() {\n        this.isOn = false;\n    }\n    reset() {\n        this.count = 0;\n    }\n    step() {\n        if (!this.isOn)\n            return;\n        this.count += 1;\n        if (this.isCompleted())\n            this.isOn = false;\n    }\n    getProgressRatio() {\n        if (this.durationFrameCount)\n            return constrain(this.count / this.durationFrameCount, 0, 1);\n        else\n            return 0;\n    }\n    isCompleted() {\n        if (this.durationFrameCount)\n            return this.count > this.durationFrameCount;\n        else\n            return false;\n    }\n    mod(divisor) {\n        return this.count % divisor;\n    }\n}\n//\n// ------------ Kinematic quantity -----------------------------\n//\nclass KinematicQuantity {\n    constructor() {\n        this.position = createVector();\n        this.velocity = createVector();\n    }\n    step() {\n        this.position.add(this.velocity);\n    }\n    bounce(normalUnitVector, restitution = 1) {\n        this.velocity.add(p5.Vector.mult(normalUnitVector, (1 + restitution) * p5.Vector.dot(this.velocity, p5.Vector.mult(normalUnitVector, -1))));\n    }\n}\n//\n// ------------ Physics body -----------------------------\n//  Depends on: Kinematic quantity\n//\nclass PhysicsBody {\n    constructor() {\n        this.kinematicQuantity = new KinematicQuantity();\n        this.bodySize = 1;\n        this.collisionRadius = 0.5 * this.bodySize;\n        this.hasFriction = false;\n        this.decelerationFactor = 1;\n    }\n    get position() {\n        return this.kinematicQuantity.position;\n    }\n    get x() {\n        return this.kinematicQuantity.position.x;\n    }\n    get y() {\n        return this.kinematicQuantity.position.y;\n    }\n    get velocity() {\n        return this.kinematicQuantity.velocity;\n    }\n    get vx() {\n        return this.kinematicQuantity.velocity.x;\n    }\n    get vy() {\n        return this.kinematicQuantity.velocity.y;\n    }\n    setPosition(x, y) {\n        this.kinematicQuantity.position.set(x, y);\n    }\n    setVelocity(vx, vy) {\n        this.kinematicQuantity.velocity.set(vx, vy);\n    }\n    setFriction(constant) {\n        if (constant === 0) {\n            this.hasFriction = false;\n            return;\n        }\n        this.hasFriction = true;\n        this.decelerationFactor = 1 - constant;\n    }\n    step() {\n        this.kinematicQuantity.step();\n        if (this.hasFriction) {\n            this.kinematicQuantity.velocity.mult(this.decelerationFactor);\n        }\n    }\n    accelerate(x, y) {\n        this.kinematicQuantity.velocity.add(x, y);\n    }\n    collide(other) {\n        return true;\n    }\n    attract(other, factor) {\n        const relativePosition = createVector(other.position.x - this.position.x, other.position.y - this.position.y);\n        const magnitude = factor / Math.min(1, relativePosition.magSq());\n        const direction = relativePosition.normalize();\n        const acceleration = direction.mult(magnitude);\n        this.velocity.add(acceleration);\n        other.velocity.sub(acceleration);\n    }\n}\n//\n// --------- ShapeColor (Composite of fill & stroke) -------------\n//\nclass AbstractShapeColor {\n    static createAlphaColorArray(c) {\n        const array = [];\n        for (let alphaValue = 0; alphaValue <= 255; alphaValue += 1) {\n            array.push(color(red(c), green(c), blue(c), alpha(c) * alphaValue / 255));\n        }\n        return array;\n    }\n}\nclass ShapeColor extends AbstractShapeColor {\n    constructor(strokeColor, fillColor) {\n        super();\n        this.strokeColorArray = AbstractShapeColor.createAlphaColorArray(strokeColor);\n        this.fillColorArray = AbstractShapeColor.createAlphaColorArray(fillColor);\n    }\n    apply(alphaValue = 255) {\n        const index = Math.floor(constrain(alphaValue, 0, 255));\n        stroke(this.strokeColorArray[index]);\n        fill(this.fillColorArray[index]);\n    }\n}\nclass NoStrokeShapeColor extends AbstractShapeColor {\n    constructor(fillColor) {\n        super();\n        this.fillColorArray = AbstractShapeColor.createAlphaColorArray(fillColor);\n    }\n    apply(alphaValue = 255) {\n        noStroke();\n        const index = Math.floor(constrain(alphaValue, 0, 255));\n        fill(this.fillColorArray[index]);\n    }\n}\nclass NoFillShapeColor extends AbstractShapeColor {\n    constructor(strokeColor) {\n        super();\n        this.strokeColorArray = AbstractShapeColor.createAlphaColorArray(strokeColor);\n    }\n    apply(alphaValue = 255) {\n        const index = Math.floor(constrain(alphaValue, 0, 255));\n        stroke(this.strokeColorArray[index]);\n        noFill();\n    }\n}\nclass NullShapeColor extends AbstractShapeColor {\n    apply() { }\n}\n//\n// ------------ Global variables ------------------------------\n//\np5.disableFriendlyErrors = true;\nconst IDEAL_FRAME_RATE = 60;\nconst UNIT_ANGLE_VELOCITY = (2 * Math.PI) / IDEAL_FRAME_RATE;\nlet unitLength;\nlet unitSpeed;\nconst visualizerSet = new Set();\n//\n// ------------ Setup & Draw etc. ---------------------------------------\n//\nfunction setup() {\n    const canvasSideLength = Math.min(windowWidth, windowHeight);\n    createCanvas(canvasSideLength, canvasSideLength);\n    frameRate(IDEAL_FRAME_RATE);\n    unitLength = Math.min(width, height) / 640;\n    unitSpeed = unitLength / IDEAL_FRAME_RATE;\n    strokeWeight(Math.max(1, 1 * unitLength));\n    textAlign(CENTER);\n    textSize(20 * unitLength);\n    visualizerSet.add(new StackVisualizer(0.25 * width, 0.25 * height));\n    visualizerSet.add(new SetVisualizer(0.75 * width, 0.25 * height));\n    visualizerSet.add(new TableVisualizer(0.25 * width, 0.75 * height));\n    visualizerSet.add(new GraphVisualizer(0.75 * width, 0.75 * height));\n}\nfunction draw() {\n    background(240);\n    for (const visualizer of visualizerSet) {\n        visualizer.step();\n        visualizer.draw();\n    }\n}\nfunction keyPressed() {\n    if (keyCode === 80)\n        noLoop(); // 80: 'P'\n}\nfunction keyReleased() {\n    if (keyCode === 80)\n        loop(); // 80: 'P'\n}\n//\n// ------------ Sprite -------------------------------------\n//  Depends on: Collection utility\n//\nclass SpriteArray extends Array {\n    constructor() {\n        super();\n    }\n    static create() {\n        return Object.create(SpriteArray.prototype);\n    }\n    step() {\n        for (let i = this.length - 1; i >= 0; i -= 1) {\n            this[i].step();\n            if (this[i].isRemoved)\n                this.splice(i, 1);\n        }\n    }\n    draw() {\n        for (let i = this.length - 1; i >= 0; i -= 1) {\n            this[i].draw();\n        }\n    }\n}\nclass SpriteSet extends Set {\n    constructor() {\n        super(...arguments);\n        this.stepSprite = (sprite) => {\n            sprite.step();\n            if (sprite.isRemoved)\n                this.delete(sprite);\n        };\n        this.drawSprite = (sprite) => {\n            sprite.draw();\n        };\n    }\n    getRandom() {\n        return getRandom(Array.from(this));\n    }\n    popRandom() {\n        const sprite = this.getRandom();\n        this.delete(sprite);\n        return sprite;\n    }\n    getRandomSubset(size) {\n        const newSet = new SpriteSet();\n        const temporalArray = Array.from(this);\n        const len = Math.min(size, this.size);\n        for (let i = 0; i < len; i += 1) {\n            newSet.add(popRandom(temporalArray));\n        }\n        return newSet;\n    }\n    step() {\n        this.forEach(this.stepSprite);\n    }\n    draw() {\n        this.forEach(this.drawSprite);\n    }\n}\n//\n// ------------ Visual data element ---------------------------------------\n//\nclass AbstractVisualDataElement {\n    constructor() {\n        this.properFrameCount = 0;\n        this.appearingFrameCounter = new FrameCounter(false);\n        this.disappearingFrameCounter = new FrameCounter(false);\n    }\n    step() {\n        this.stepElement(this);\n        this.appearingFrameCounter.step();\n        this.disappearingFrameCounter.step();\n        if (this.disappearingFrameCounter.isCompleted())\n            this.isRemoved = true;\n        this.properFrameCount += 1;\n    }\n    draw() {\n        this.drawElement(this);\n    }\n    getAlpha(element) {\n        if (element.appearingFrameCounter.isOn) {\n            return (-sq(element.getAppearingRatio() - 1) + 1) * 255;\n        }\n        else if (element.disappearingFrameCounter.isOn) {\n            return (1 - sq(element.getDisappearingRatio())) * 255;\n        }\n        else {\n            return 255;\n        }\n    }\n    beginAppear(duration) {\n        this.appearingFrameCounter.on(duration);\n    }\n    beginDisappear(duration) {\n        this.disappearingFrameCounter.on(duration);\n    }\n    getAppearingRatio() {\n        return this.appearingFrameCounter.getProgressRatio();\n    }\n    getDisappearingRatio() {\n        return this.disappearingFrameCounter.getProgressRatio();\n    }\n}\nclass VisualDataElement extends AbstractVisualDataElement {\n    constructor() {\n        super();\n        this.body = new PhysicsBody();\n        this.drawBodyShape = VisualDataElement.defaultDrawBodyShape;\n        this.shapeColor = new NoStrokeShapeColor(color(32));\n    }\n    stepElement(element) {\n        element.body.step();\n    }\n    drawElement(element, parentElementAlpha = 255) {\n        const alphaValue = this.getAlpha(this) * parentElementAlpha / 255;\n        element.shapeColor.apply(alphaValue);\n        element.drawBodyShape(element.body);\n    }\n}\nVisualDataElement.defaultDrawBodyShape = (body) => {\n    ellipse(body.x, body.y, body.bodySize, body.bodySize);\n};\nclass CompositeVisualDataElement extends AbstractVisualDataElement {\n    constructor() {\n        super();\n        this.isMovable = false;\n        this.kinematicQuantity = new PhysicsBody();\n        this.centerPosition = createVector();\n        this.childElementArray = SpriteArray.create();\n    }\n    add(element) {\n        this.childElementArray.push(element);\n    }\n    stepElement(element) {\n        element.childElementArray.step();\n        this.kinematicQuantity.step();\n    }\n    drawElement(element, parentElementAlpha = 255) {\n        if (this.isMovable) {\n            translate(this.kinematicQuantity.position.x, this.kinematicQuantity.position.y);\n        }\n        const alphaValue = this.getAlpha(this) * parentElementAlpha / 255;\n        for (const eachElement of element.childElementArray) {\n            eachElement.drawElement(eachElement, alphaValue);\n        }\n        if (this.isMovable) {\n            translate(-this.kinematicQuantity.position.x, -this.kinematicQuantity.position.y);\n        }\n    }\n    getAllLeafElements() {\n        const spriteArray = SpriteArray.create();\n        for (const eachElement of this.childElementArray) {\n            if (eachElement instanceof VisualDataElement) {\n                spriteArray.push(eachElement);\n            }\n            else if (eachElement instanceof CompositeVisualDataElement) {\n                Array.prototype.push.apply(spriteArray, eachElement.getAllLeafElements());\n            }\n        }\n        return spriteArray;\n    }\n    updateCenterPosition() {\n        const spriteArray = this.getAllLeafElements();\n        let minX = spriteArray[0].body.x;\n        let maxX = spriteArray[0].body.x;\n        let minY = spriteArray[0].body.y;\n        let maxY = spriteArray[0].body.y;\n        for (let i = 1, len = spriteArray.length; i < len; i += 1) {\n            const currentX = spriteArray[i].body.x;\n            const currentY = spriteArray[i].body.y;\n            if (currentX < minX)\n                minX = currentX;\n            if (currentX > maxX)\n                maxX = currentX;\n            if (currentY < minY)\n                minY = currentY;\n            if (currentY > maxY)\n                maxY = currentY;\n        }\n        this.centerPosition.set(0.5 * (minX + maxX), 0.5 * (minY + maxY));\n    }\n}\nclass VisualEdge {\n    constructor(nodeA, nodeB) {\n        this.nodeA = nodeA;\n        this.nodeB = nodeB;\n        this.isRemoved = false;\n        this.strokeColor = color(64);\n        this.equilibriumLength = 70 * unitLength;\n        this.springConstant = 0.005;\n    }\n    isIncidentTo(element) {\n        return element === this.nodeA || element === this.nodeB;\n    }\n    step() {\n        const bodyA = this.nodeA.body;\n        const bodyB = this.nodeB.body;\n        const direction = p5.Vector.sub(bodyB.position, bodyA.position).normalize();\n        const stretch = bodyA.position.dist(bodyB.position) - this.equilibriumLength;\n        const kx = this.springConstant * stretch;\n        bodyB.accelerate(-kx * direction.x, -kx * direction.y);\n        bodyA.accelerate(+kx * direction.x, +kx * direction.y);\n    }\n    draw() {\n        stroke(this.strokeColor);\n        line(this.nodeA.body.x, this.nodeA.body.y, this.nodeB.body.x, this.nodeB.body.y);\n    }\n}\n",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Ash He, with tags data structure,stack,set,table,graph,particles,network,grayscale,diagram"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Senbaku\n\n### Response:\n",
    "completion": "const palettes = [\n\t[\"#e9dbce\", \"#fceade\", \"#ea526f\", \"#e2c290\", \"#6b2d5c\", \"#25ced1\"],\n\t[\"#223843\", \"#e9dbce\", \"#eff1f3\", \"#dbd3d8\", \"#d8b4a0\", \"#d77a61\"],\n\t[\"#e29578\", \"#ffffff\", \"#006d77\", \"#83c5be\", \"#ffddd2\", \"#edf6f9\"],\n\t[\"#e9dbce\", \"#ffffff\", \"#cc3528\", \"#028090\", \"#00a896\", \"#f8c522\"],\n\t[\"#e9dbce\", \"#f8f7c1\", \"#f46902\", \"#da506a\", \"#fae402\", \"#92accc\"],\n\t[\"#e42268\", \"#fb8075\", \"#761871\", \"#5b7d9c\", \"#a38cb4\", \"#476590\"],\n\t['#f9b4ab', '#fdebd3', '#264e70', '#679186', '#bbd4ce'],\n\t['#1f306e', '#553772', '#8f3b76', '#c7417b', '#f5487f'],\n\t['#e0f0ea', '#95adbe', '#574f7d', '#503a65', '#3c2a4d'],\n\t['#413e4a', '#73626e', '#b38184', '#f0b49e', '#f7e4be'],\n\t['#ff4e50', '#fc913a', '#f9d423', '#ede574', '#e1f5c4'],\n\t['#99b898', '#fecea8', '#ff847c', '#e84a5f', '#2a363b'],\n\t['#69d2e7', '#a7dbd8', '#e0e4cc', '#f38630', '#fa6900'],\n\t['#fe4365', '#fc9d9a', '#f9cdad', '#c8c8a9', '#83af9b'],\n\t['#ecd078', '#d95b43', '#c02942', '#542437', '#53777a'],\n\t['#556270', '#4ecdc4', '#c7f464', '#ff6b6b', '#c44d58'],\n\t['#774f38', '#e08e79', '#f1d4af', '#ece5ce', '#c5e0dc'],\n\t['#e8ddcb', '#cdb380', '#036564', '#033649', '#031634'],\n\t['#490a3d', '#bd1550', '#e97f02', '#f8ca00', '#8a9b0f'],\n\t['#594f4f', '#547980', '#45ada8', '#9de0ad', '#e5fcc2'],\n\t['#00a0b0', '#6a4a3c', '#cc333f', '#eb6841', '#edc951'],\n\t['#5bc0eb', '#fde74c', '#9bc53d', '#e55934', '#fa7921'],\n\t['#ed6a5a', '#f4f1bb', '#9bc1bc', '#5ca4a9', '#e6ebe0'],\n\t['#ef476f', '#ffd166', '#06d6a0', '#118ab2', '#073b4c'],\n\t['#22223b', '#4a4e69', '#9a8c98', '#c9ada7', '#f2e9e4'],\n\t['#114b5f', '#1a936f', '#88d498', '#c6dabf', '#f3e9d2'],\n\t['#ff9f1c', '#ffbf69', '#ffffff', '#cbf3f0', '#2ec4b6'],\n\t['#3d5a80', '#98c1d9', '#e0fbfc', '#ee6c4d', '#293241'],\n\t['#06aed5', '#086788', '#f0c808', '#fff1d0', '#dd1c1a'],\n\t['#540d6e', '#ee4266', '#ffd23f', '#3bceac', '#0ead69'],\n\t['#c9cba3', '#ffe1a8', '#e26d5c', '#723d46', '#472d30'],\n\n];\n\nlet num;\nlet palette_selected\nvar w = 500;\nvar u = w / 8;\nvar showGrid = true\nvar stroke_weight;\n\nfunction setup() {\n\tcreateCanvas(w, w);\n\t//per design guidelines, stroke_weight is always 1.5x the grid.\n\tstroke_weight = 1.5;\n\n\t// OPC.minimize();\t\n\tOPC.slider('colors', 1, 0, palettes.length - 1, 1);\n\tOPC.slider(\"line1_x1\", 1, 0, 8, 1)\n\tOPC.slider(\"line1_y1\", 3, 0, 8, 1)\n\tOPC.slider(\"line1_x2\", 2, 0, 8, 1)\n\tOPC.slider(\"line1_y2\", 5, 0, 8, 1)\n\n\tOPC.slider(\"line2_x1\", 1, 0, 8, 1)\n\tOPC.slider(\"line2_y1\", 6, 0, 8, 1)\n\tOPC.slider(\"line2_x2\", 4, 0, 8, 1)\n\tOPC.slider(\"line2_y2\", 2, 0, 8, 1)\n\n\tOPC.slider(\"line3_x1\", 4, 0, 8, 1)\n\tOPC.slider(\"line3_y1\", 1, 0, 8, 1)\n\tOPC.slider(\"line3_x2\", 7, 0, 8, 1)\n\tOPC.slider(\"line3_y2\", 1, 0, 8, 1)\n\tOPC.slider(\"line3_x3\", 7, 0, 8, 1)\n\tOPC.slider(\"line3_y3\", 5, 0, 8, 1)\n\tOPC.slider(\"line3_x4\", 4, 0, 8, 1)\n\tOPC.slider(\"line3_y4\", 5, 0, 8, 1)\n\n\tnum = random(10);\n\tpg = createGraphics(width, height);\n\tpg.noStroke();\n\tfor (let i = 0; i < 300000; i++) {\n\t\tlet x = random(width);\n\t\tlet y = random(height);\n\t\tlet n = noise(x * 0.01, y * 0.01) * width * 0.002;\n\t\tpg.fill(255, 30);\n\t\tpg.rect(x, y, n, n);\n\t}\n\n}\nfunction draw() {\n\tpalette_selected = palettes[colors];\n\tbackground(palette_selected[0]);\n\tstroke(palette_selected[1]);\n\tif (showGrid) drawGrid();\n\tstrokeCap(SQUARE);\n\tstrokeWeight(stroke_weight * u);\n\t//\tstroke(palette_selected[1]);\n\tstroke(palette_selected[1]);\n\tbezier(line3_x1 * u, line3_y1 * u, line3_x2 * u, line3_y2 * u, line3_x3 * u, line3_y3 * u, line3_x4 * u, line3_y4 * u);\n\n\tstroke(palette_selected[2]);\n\tline(line2_x1 * u, line2_y1 * u, line2_x2 * u, line2_y2 * u);\n\n\tstroke(palette_selected[3]);\n\tline(line1_x1 * u, line1_y1 * u, line1_x2 * u, line1_y2 * u);\n\timage(pg, 0, 0);\n}\nfunction touchEnded() {\n\tshuffle(palette_selected, true);\n}\n\nfunction drawGrid() {\n\tstrokeWeight(1);\n\tnoFill();\n\tstroke(palette_selected[4]);\n\tfor (var col = 0; col < 9; col++) {\n\t\tline(col * u, 0, col * u, 8 * u);\n\t}\n\n\tfor (var row = 0; row < 9; row++) {\n\t\tline(0, row * u, 8 * u, row * u);\n\t}\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Senbaku"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by SamuelYAN, with tags p5js,processing,openprocessing,code,creativecode,creativecodeart,art,artwork,artworks,generativeart,shape,line,particle,particles,codingeveryday,everyday,genuary,genuary2022,samuelyan,SamuelYAN\n\n### Response:\n",
    "completion": "// by SamuelYAN\n// more works //\n   // https://twitter.com/SamuelAnn0924\n   // https://www.instagram.com/samuel_yan_1990/\n\nlet mySize;\nlet seed = Math.random() * 1000;\nlet tile_count = 50;\nlet margin = -50;\nlet speed = 5;\n\nlet colors1 = \"e3d7a3-f5989d-ea618e-fce4d6-caac71\".split(\"-\").map((a) => \"#\" + a );//+ \"bf\");\nlet colors2 = \"6cbbd4-5863b1-5282a1-fee8f7-c1f29b\".split(\"-\").map((a) => \"#\" + a );//+ \"bf\");\nlet colors3 = \"1b1b1b-292929-f3f3f3-222222-ff0000\".split(\"-\").map((a) => \"#\" + a );//+ \"bf\");\nlet colors4 = \"70c1b3-aaf0d3-50514f-ffe066-247ba0\".split(\"-\").map((a) => \"#\" + a );//+ \"bf\");\nlet colors5 = \"3c1642-386375-086375-b2ff9e-1dd3b0\".split(\"-\").map((a) => \"#\" + a );//+ \"bf\");\nlet colorbg = \"2c363f\".split(\"-\").map((a) => \"#\" + a);\nlet colorbg2 = \"2c363f40\".split(\"-\").map((a) => \"#\" + a);\n\nlet squares;\n\nfunction setup() {\n\tpixelDensity(5);\n  mySize = min(windowWidth, windowHeight);\n  createCanvas(windowWidth, windowHeight);\n  randomSeed(seed);\n  background(colorbg);\n  mySetup();\n}\n\nfunction draw() {\n  randomSeed(seed);\n  background(colorbg2);\n  for (let s of squares) {\n    s.run();\n  }\n}\n\nfunction easeOut(o) {\n  return random(o)*cos(o)*sin(o)*sq(o);\n}\n\nfunction mySetup() {\n  randomSeed(seed);\n  mySize -= margin * 4;\n  addSquares();\n}\n\nfunction addSquares() {\n  squares = [];\n  let w = width / tile_count;\n  let h = height / tile_count;\n  for (let i = 0; i < tile_count; i++) {\n    for (let j = 0; j < tile_count; j++) {\n      let x = i * w;\n      let y = j * h;\n      squares.push(new makeSquare(x, y, w));\n    }\n  }\n}\n\nclass makeSquare {\n  constructor(x, y, r) {\n    this.x = x;\n    this.y = y;\n    this.r = r;\n    this.col1 = random(random([colors1,colors2,colors3,colors4,colors5]));\n    //this.col2 = random(colors2);\n    this.settime();\n    this.dir = random(1) < 0.5 ? -1 : 1;\n    this.speed = 4;\n    this.ang = (random(1) * TAU);\n    this.rot = 2;\n    this.strWei = random(0.25, 0.75);\n    this.intNum = int(random(4));\n    this.moveX = 0;\n    this.moveY = 0;\n  }\n\n  display() {\n    push();\n    translate(random(0,2*this.x), random(0,2*this.y));\n    rotate(this.ang);\n    if (this.intNum == 0) {\n      noFill();\n      stroke(this.col1);\n      strokeWeight(this.strWei);\n    } else if (this.intNum == 1) {\n      noStroke();\n      fill(this.col1);\n      // strokeWeight(this.strWei);\n    } else if (this.intNum == 2) {\n      noFill();\n      stroke(this.col1);\n\t\t\tstrokeWeight(random(1));\n    } else if (this.intNum == 3) {\n      noStroke();\n      fill(this.col1);\n    }\n\n    rotate(this.rot +this.ang);\n    rectMode(CENTER);\n    circle(0,0,this.moveX*sq(this.rot));\n    circle(0,0,this.moveY*sq(this.rot));\n    pop();\n  }\n\n  settime() {\n    this.t = -int(random(map(speed, 1, 5, 3000, 200)));\n    this.t1 = map(speed, 1, 5, 500, 100);\n  }\n\n  update() {\n    if (this.t >= 0 && this.t < this.t1) {\n      let easePar = norm(this.t, 0, this.t1 - 1);\n      this.rot = lerp(0, TAU * this.dir, easeOut(easePar));\n      this.moveX = lerp(0, random(2) * this.dir, easeOut(easePar));\n      this.moveY = lerp(0, random(2) * this.dir, easeOut(easePar));\n    }\n    if (this.t1 < this.t) {\n      this.settime();\n    }\n    this.t++;\n\t\tthis.ang += TAU/random(300,360)/random([-1,1]);\n  }\n\n  run() {\n    this.display();\n    this.update();\n  }\n}\n\nfunction keyTyped() {\n  if (key === \"s\" || key === \"S\") {\n    //noLoop();\n    saveCanvas(\"GENUARY 2022_0103_Space_v2\", \"png\");\n  }\n}\n",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by SamuelYAN, with tags p5js,processing,openprocessing,code,creativecode,creativecodeart,art,artwork,artworks,generativeart,shape,line,particle,particles,codingeveryday,everyday,genuary,genuary2022,samuelyan,SamuelYAN"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "let url = \"https://coolors.co/app/6699cc-fff275-ff8c42-ff3c38-a23e48\";\nlet pallete = [];\nlet graphics, bc,sc;\n\nlet model;\nlet previous_pen = 'down';\nlet pen;\nlet strokePath;\nlet n = 0;\n\nfunction setup() {\n  createCanvas(800, 800);\n  colorMode(HSB, 360, 100, 100, 100);\n  model = ml5.sketchRNN('cat', modelReady);\n  init();\n}\n\nfunction init(){\n  pallete = createPallete(url);\n  let bn = int(random(pallete.length));\n  bc = pallete[bn]\n  pallete.splice(bn, 1);\n  let sn = int(random(pallete.length));\n  sc = pallete[sn]\n  pallete.splice(sn, 1);\n\n  graphics = createGraphics(width, height);\n  graphics.colorMode(HSB, 360, 100, 100, 100);\n  drawNoiseBackground(50000, graphics);\n}\n\nfunction startDrawing() {\n  background(bc);\n  image(graphics,0,0);  \n  let x = width / 2;\n  let y = height / 2;\n  pen = createVector(x, y);\n  model.reset();\n  model.generate(gotStroke);\n}\n\nfunction draw() {\n  if (strokePath) {\n    if (previous_pen == 'down') {\n      stroke(sc);\n      strokeCap(ROUND);\n      strokeJoin(ROUND);\n      strokeWeight(3.0);\n      line(pen.x, pen.y, pen.x + strokePath.dx, pen.y + strokePath.dy);\n    }\n    pen.x += strokePath.dx;\n    pen.y += strokePath.dy;\n    previous_pen = strokePath.pen;\n\n    if (strokePath.pen !== 'end') {\n      strokePath = null;\n      model.generate(gotStroke);\n    } else {\n      n += 1 / 50;\n      if (n > 1) {\n        init();\n        startDrawing();\n        n = 0;\n      }\n    }\n  }\n}\n\nfunction gotStroke(err, s) {\n  strokePath = s;\n}\n\nfunction modelReady() {\n  startDrawing();\n}\n\nfunction createPallete(_url) {\n  let slash_index = _url.lastIndexOf('/');\n  let pallate_str = _url.slice(slash_index + 1);\n  let arr = pallate_str.split('-');\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = '#' + arr[i];\n  }\n  return arr;\n}\n\nfunction drawNoiseBackground(_n, _graphics) {\n  let c = color(0, 0, 100, 5);\n  for (let i = 0; i < _n; i++) {\n    let x = random(1) * width;\n    let y = random(1) * height;\n    let w = random(1, 3);\n    let h = random(1, 3);\n    _graphics.noStroke();\n    _graphics.fill(c);\n    _graphics.ellipse(x, y, w, h);\n  }\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by reona396\n\n### Response:\n",
    "completion": "var shapesNum = 500;\n\nvar shapes = [];\n\nfunction setup() {\n  createCanvas(windowWidth, 300);\n  colorMode(HSB, 360, 100, 100, 255);\n  background(360);\n\n  for (var i = 0; i < shapesNum; i++) {\n    shapes.push(new Shape());\n  }\n\n  rectMode(CENTER);\n  noStroke();\n}\n\nfunction draw() {\n  blendMode(BLEND);\n  background(0);\n  blendMode(ADD);\n  for (var i = 0; i < shapesNum; i++) {\n    shapes[i].display();\n  }\n}\n\nfunction Shape() {\n  this.R = random(10, 50);\n\n  this.r1 = this.R;\n  this.xyTheta = random(TWO_PI);\n  this.xyR = random(100);\n  this.x1Center = width/2;\n  this.y1Center = height/2;\n  this.x1 = this.x1Center + this.xyR * cos(this.xyTheta);\n  this.y1 = this.y1Center + this.xyR * sin(this.xyTheta);\n\n  this.r2 = 0;\n  this.x2 = 0;\n  this.y2 = this.y1;\n\n  this.scale = 1;\n  this.theta = random(360);\n  this.thetaSpeed = random(0.5, 1);\n\n  this.xSpeed = random(0.5, 1);\n\n  this.moveFlag = true;\n  this.c = color(random(360), 80, 100, 80);\n\n  this.display = function () {\n    this.scale = 1 * abs(sin(radians(this.theta)));\n    this.theta += this.thetaSpeed;\n\n    fill(this.c);\n    rect(this.x1, this.y1, this.r1 * this.scale, this.R * this.scale);\n    rect(this.x2, this.y2, this.r2 * this.scale, this.R * this.scale);\n\n    if (this.moveFlag) {\n      this.x1 += this.xSpeed;\n    } else {\n      this.r1 -= this.xSpeed;\n      this.x1 = width - this.r1/2;\n\n      this.r2 += this.xSpeed;\n      this.x2 = this.r2/2;\n    }\n\n    if (this.x1 >= width - this.R/2) {\n      this.moveFlag = false;\n    }\n\n    if (this.r2 > this.R) {\n      this.r1 = this.R;\n      this.x1 = this.R/2;\n      this.r2 = 0;\n      this.x2 = this.R/2;\n      this.moveFlag = true;\n    }\n  }\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by reona396"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Senbaku\n\n### Response:\n",
    "completion": "//2020-05-02 dcc#32 \"Mixer\" @senbaku\n//#particle train\n\nlet particles = [];\nlet pg;\n\nfunction setup() {\n\tcreateCanvas(400, 400);\n\tpg = createGraphics(400, 400);\n\tcolorMode(HSB, 360, 100, 100, 100);\n}\n\nfunction draw() {\n\tbackground(\"#ef626c\");\n\tlet xo = width / 2;\n\tlet yo = height / 2 - 50;\n\n\t\n\tpg.background(\"#f6e8ea\");\n\t//mixer-body\n\tpg.noStroke();\n\tpg.fill(\"#5b2f2c\");\n\tpg.ellipse(xo, yo + 130, 112, 50); //body-up\n\tpg.quad(xo-56,yo+130,xo+56,yo+130,xo+43,yo+50,xo-43,yo+50);\n\tpg.fill(\"#3a1c18\");\n\tpg.ellipse(xo, yo + 50, 86, 36); //body-down\n\n\tpg.erase();\n\tpg.rectMode(CENTER);\n\t//pg.rect(width/2,height/2, 100, 200);\n\tpg.ellipse(xo, yo - 80, 100, 30); //up\n\tpg.ellipse(xo, yo + 60, 80, 30); //down\n\tpg.quad(xo - 50, yo - 80, xo + 50, yo - 80, xo + 40, yo + 60, xo - 40, yo + 60);\n\tpg.noErase();\n\n\tbackgroundNoise(5000);\n\n\tfill(\"#FCBCC2\");\n\tellipse(xo, yo - 90, 150, 100);\n\tfill(\"#F27981\");\n\tellipse(xo, yo - 55, 95, 30);\n\n\t//how many particles do I want to add each frame\n\tfor (let i = 0; i < 1; i++) {\n\t\tlet p = new Particle();\n\t\tparticles.push(p);\n\t}\n\tfor (let i = particles.length - 1; i >= 0; i--) {\n\t\tparticles[i].update();\n\t\tparticles[i].show();\n\t\tif (particles[i].finished()) {\n\t\t\t//remove this particle.\n\t\t\tparticles.splice(i, 1);\n\t\t}\n\t}\n\timage(pg, 0, 0);\n\n\tfill(\"#5B2F2C\");\n\tellipse(xo, yo - 80, 105, 30); //\u84cb\n\tfill(\"#22181C\");\n\tellipse(xo, yo - 95, 15); //\u30c4\u30de\u30df\n\t\n\t//\u6587\u5b57----------------------\n\tfill(\"#5B2F2C\");\n\tnoStroke();\n\ttextSize(20);\n\ttextFont(\"helvetica\");\n\ttextAlign(CENTER);\n\ttext(\"M i x e r\", width / 2, 330);\n}\nlet t = 0.0;\nclass Particle {\n\tconstructor() {\n\t\tthis.x = 200;\n\t\tthis.y = 180;\n\t\tthis.vx = random(-1, 1);\n\t\tthis.vy = random(-5, -1);\n\t\tthis.alpha = 100;\n\t}\n\n\tfinished() {\n\t\treturn this.alpha < 0;\n\t}\n\tupdate() {\n\n\t\tthis.x += this.vx;\n\t\tthis.y += this.vy;\n\t\tthis.alpha -= 5;\n\t}\n\n\tshow() {\n\t\t//stroke(255);\n\t\tnoStroke();\n\n\t\tfor (let i = 0; i < width; i += 0.5) {\n\t\t\tlet sx = -sin(i + t) * 30;\n\t\t\tlet sy = i * 30;\n\t\t\t// let cx = sin(i+t) * 50;\n\t\t\t// let cy = i * 50 ;\n\t\t\tfill(354, 25, 99, this.alpha);\n\t\t\tellipse(this.x + sx, this.y + sy, 5 + i % 16);\n\n\t\t}\n\t\tt += 0.01;\n\t}\n\n}\nfunction backgroundNoise(n) {\n\tfor (let i = 0; i < n; i++) {\n\t  let x = random(0, width);\n\t  let y = random(0, height);\n\t  let w = random(1, 3);\n\t  let h = random(1, 3);\n\t  fill(\"#DE5861\");\n\t  noStroke();\n\t  ellipse(x, y, w, h);\n\t}\n  }",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Senbaku"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "let buttonRock;\nlet buttonPaper;\nlet buttonScissor;\nlet buttonEmpty;\n\nlet buttonClassify;\nlet offsetX = 30;\nlet offsetY = 50;\nlet patternCount = [0, 0, 0, 0];\nlet patternProbability = [, , , ];\nlet isClassify = false;\nlet rps = ['\u270a', '\u270c', '\u270b', '\u3000'];\nlet video;\nconst knnClassifier = ml5.KNNClassifier();\nlet featureExtractor;\n\nfunction setup() {\n\tcreateCanvas(640, 480);\n\tcolorMode(HSB, 360, 100, 100, 100);\n\tvideo = createCapture(VIDEO);\n\tvideo.size(width, height);\n\tvideo.hide();\n\n\tfeatureExtractor = ml5.featureExtractor('MobileNet');\n\tsetupButtons();\n}\n\nfunction setupButtons() {\n\tbuttonRock = createButton('\u270a');\n\tbuttonRock.position(offsetX, offsetY);\n\tbuttonRock.style('font-size', '20px');\n\n\tbuttonPaper = createButton('\u270c');\n\tbuttonPaper.position(offsetX, offsetY + 35);\n\tbuttonPaper.style('font-size', '20px');\n\n\tbuttonScissor = createButton('\u270b');\n\tbuttonScissor.position(offsetX, offsetY + 70);\n\tbuttonScissor.style('font-size', '20px');\n\n\tbuttonEmpty = createButton('?');\n\tbuttonEmpty.position(offsetX, offsetY + 105);\n\tbuttonEmpty.style('font-size', '20px');\n\n\tbuttonRock.mousePressed(function() {\n\t\taddExample('Rock');\n\t});\n\n\tbuttonPaper.mousePressed(function() {\n\t\taddExample('Paper');\n\t});\n\n\tbuttonScissor.mousePressed(function() {\n\t\taddExample('Scissor');\n\t});\n\n\tbuttonEmpty.mousePressed(function() {\n\t\taddExample('Empty');\n\t});\n\n\tbuttonClassify = createButton(\"2. Classify\");\n\tbuttonClassify.style('font-size', '20px');\n\tbuttonClassify.position(width - buttonClassify.width - offsetX * 2, height - buttonClassify.height - 15);\n\tbuttonClassify.mousePressed(function() {\n\t\tclassify();\n\t});\n}\n\nfunction keyPressed() {\n\tif (key == 'd' || key == 'D') {\n\t\tclearAllLabels();\n\t}\n\tif (key == '1') {\n\t\taddExample('Rock');\n\t}\n\tif (key == '2') {\n\t\taddExample('Paper');\n\t}\n\tif (key == '3') {\n\t\taddExample('Scissor');\n\t}\n\tif (key == '4') {\n\t\taddExample('Empty');\n\t}\n}\n\nfunction addExample(label) {\n\tconst features = featureExtractor.infer(video);\n\tknnClassifier.addExample(features, label);\n\tupdateCounts();\n}\n\nfunction classify() {\n\tconst numLabels = knnClassifier.getNumLabels();\n\tif (numLabels <= 0) {\n\t\tconsole.error('There is no examples in any label');\n\t\treturn;\n\t}\n\tconst features = featureExtractor.infer(video);\n\tknnClassifier.classify(features, gotResults);\n\tisClassify = true;\n}\n\nfunction draw() {\n\timage(video, 0, 0, width, height);\n\tdrawText();\n\n\tlet m = 0;\n\tlet p = 0;\n\tlet i = 0;\n\n\tfor (let n of patternProbability) {\n\t\tif (n > m) {\n\t\t\tp = i;\n\t\t\tm = n;\n\t\t}\n\t\ti++;\n\t}\n\tif (isClassify) {\n\t\ttextAlign(CENTER, CENTER);\n\t\ttextSize(250);\n\t\ttext(rps[p], width / 2, height / 2);\n\t}\n}\n\nfunction gotResults(err, result) {\n\tif (err) {\n\t\tconsole.error(err);\n\t}\n\n\tif (result.confidencesByLabel) {\n\t\tconst confidences = result.confidencesByLabel;\n\t\tpatternProbability[0] = confidences['Rock'] ? ceil(confidences['Rock'] * 100) : 0;\n\t\tpatternProbability[1] = confidences['Paper'] ? ceil(confidences['Paper'] * 100) : 0;\n\t\tpatternProbability[2] = confidences['Scissor'] ? ceil(confidences['Scissor'] * 100) : 0;\n\t\tpatternProbability[3] = confidences['Empty'] ? ceil(confidences['Empty'] * 100) : 0;\n\t}\n\n\tclassify();\n}\n\nfunction drawText() {\n\ttextSize(18);\n\ttextAlign(LEFT, CENTER);\n\tstroke(0, 0, 100);\n\tstrokeWeight(3);\n\tfill(0, 0, 20);\n\tlet str;\n\ttext(\"1. Resister Hand Pattern \u270a/\u270c/\u270b/? (key:1-4)\", offsetX, offsetY - 15);\n\tfor (let i = 0; i < patternCount.length; i++) {\n\t\tlet str = patternCount[i] + \" Images\";\n\t\tif (patternProbability[i] != undefined) {\n\t\t\tstr += \" / \" + patternProbability[i] + \"%\";\n\t\t}\n\t\ttext(str, offsetX + 50, offsetY + 20 + i * 33);\n\t}\n\n}\n\n\nfunction updateCounts() {\n\tconst counts = knnClassifier.getCountByLabel();\n\tif (counts['Rock'] != undefined) {\n\t\tpatternCount[0] = counts['Rock'];\n\t} else {\n\t\tpatternCount[0] = 0;\n\t}\n\tif (counts['Paper'] != undefined) {\n\t\tpatternCount[1] = counts['Paper'];\n\t} else {\n\t\tpatternCount[1] = 0;\n\t}\n\tif (counts['Scissor'] != undefined) {\n\t\tpatternCount[2] = counts['Scissor'];\n\t} else {\n\t\tpatternCount[2] = 0;\n\t}\n\tif (counts['Empty'] != undefined) {\n\t\tpatternCount[3] = counts['Empty'];\n\t} else {\n\t\tpatternCount[3] = 0;\n\t}\n}\n\nfunction clearLabel(label) {\n\tknnClassifier.clearLabel(label);\n\tupdateCounts();\n}\n\n// Clear all the examples in all labels\nfunction clearAllLabels() {\n\tknnClassifier.clearAllLabels();\n\tupdateCounts();\n}\n\n// Save dataset as myKNNDataset.json\nfunction saveMyKNN() {\n\tknnClassifier.save('myKNNDataset');\n}\n\n// Load dataset to the classifier\nfunction loadMyKNN() {\n\tknnClassifier.load('./myKNNDataset.json', updateCounts);\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by liuchong625, with tags veramolnar,generative,classic\n\n### Response:\n",
    "completion": "const len = 30;\nconst initX = 50;\nconst initY = 150;\nlet cols, rows;\n\nlet margin = 5;\nlet randYSpace = [];\nlet randXOffset = [];\nlet yOff = 0;\n\nclass NoiseLoop {\n    constructor(diameter, min, max) {\n        this.diameter = diameter;\n        this.min = min;\n        this.max = max;\n        this.cx = Math.random(1000);\n        this.cy = Math.random(1000);\n    }\n\n    value(a) {\n        let xoff = map(cos(a), -1, 1, this.cx, this.cx + this.diameter);\n        let yoff = map(sin(a), -1, 1, this.cy, this.cy + this.diameter);\n        let r = noise(xoff, yoff);\n        return map(r, 0, 1, this.min, this.max);\n    }\n}\n\nconst noiseY = new NoiseLoop(1, 0, 10);\nconst totalFrames = 250;\nlet percent;\n\nfunction setup() {\n    createCanvas(1000, 600);\n    background(230);\n    cols = floor((width - 2 * initX) / len);\n    rows = floor((height - (initY + initX)) / len);\n\n    for (let j = 0; j < rows; j++) {\n        randYSpace[j] = floor(random(0, margin));\n        randXOffset[j] = random(0, 10);\n    }\n}\n\nfunction draw() {\n    background(230);\n\n    noStroke();\n    fill(205, 35, 6, 200);\n\n    let currentPos = createVector();\n    let xOff = 0;\n\n    percent = float(frameCount % totalFrames) / totalFrames;\n\n    for (let j = 0; j < rows; j++) {\n        currentPos.y = randYSpace[j] + initY + j * len;\n        yOff = 0;\n        for (let i = 0; i < cols; i++) {\n            currentPos.x = initX + randXOffset[j] + i * len;\n            currentPos.y -= noiseY.value(percent * TWO_PI + xOff + yOff);\n            rect(currentPos.x, currentPos.y, len - margin, len - margin);\n            yOff += PI / 24;\n        }\n        xOff += 100;\n    }\n}\n\n\n",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by liuchong625, with tags veramolnar,generative,classic"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "let cells, cols, rows;\nlet offset, margin;\nlet w, h;\n\nlet url = \"https://coolors.co/app/29335c-007991-f4d06f-82d173-ef476f\";\nlet pallete = [];\nlet palleteMaster;\nlet bgC;\nlet graphics;\n\nfunction setup() {\n\tcreateCanvas(800, 800);\n\tcolorMode(HSB, 360, 100, 100, 100);\n\tangleMode(DEGREES);\n\tbackground(0, 0, 90);\n\tinit();\n}\n\nfunction init() {\n\tcells = int(random(3, 15));\n\tcols = cells;\n\trows = cells;\n\n\toffset = width / 10;\n\tmargin = offset / 4;\n\n\tpallete = createPallete(url);\n\tbgNum = int(random(pallete.length));\n\tbgC = pallete[bgNum];\n\tpallete.splice(bgNum, 1);\n\tbackground(bgC);\n\n\tgraphics = createGraphics(width, height);\n\tgraphics.colorMode(HSB, 360, 100, 100, 100);\n\tdrawNoiseBackground(50000, graphics);\n\n\tlet fillNum = int(random(pallete.length));\n\tlet fc = pallete[fillNum];\n\tpallete.splice(fillNum, 1);\n\tfill(fc);\n\tnoStroke();\n\tw = (width - offset * 2 - margin * (cols - 1)) / cols;\n\th = (height - offset * 2 - margin * (rows - 1)) / rows;\n\n\n\tpush();\n\ttranslate(width / 2, height / 2);\n\trotate(int(random(4)) * 90);\n\n\tfor (let j = 0; j < rows; j++) {\n\t\tfor (let i = 0; i < cols; i++) {\n\t\t\tlet x = map(i, 0, cols - 1, -width / 2 + offset, width / 2 - offset - w);\n\t\t\tlet y = map(j, 0, rows - 1, -height / 2 + offset, height / 2 - offset - h);\n\t\t\tlet r = (w + h) / 2;\n\t\t\tx += r / 2;\n\t\t\ty += r / 2;\n\t\t\tr *= 1.45;\n\t\t\tlet n = (i + j * cols);\n\t\t\tif (cells % 2 == 0 && j % 2 == 0) {\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tdrawTriangle(x, y, r, n);\n\t\t}\n\t}\n\tpop();\n}\n\nfunction drawTriangle(_x, _y, _r, _n) {\n\tlet direction = _n % 2 == 0 ? 1 : -1;\n\tlet yOffset = direction * _r / 8;\n\tlet points = [];\n\tpush();\n\ttranslate(_x, _y + yOffset);\n\trotate(30 + 180 * (_n % 2));\n\tbeginShape();\n\n\tfor (let i = 0; i < 3; i++) {\n\t\tlet angle = 360 / 3 * i;\n\t\tlet x = cos(angle) * _r / 2;\n\t\tlet y = sin(angle) * _r / 2;\n\t\tvertex(x, y);\n\t\tlet p = createVector(x, y);\n\t\tpoints.push(p);\n\t}\n\tendShape(CLOSE);\n\n\tfor (let i = 0; i < 3; i++) {\n\t\tlet p0 = points[i % 3];\n\t\tlet p1 = points[(i + 1) % 3];\n\t\tlet p2 = points[(i + 2) % 3];\n\t\tlet offset = 1 / int(random(3, 10));\n\t\tlet sep = int(random(5, 15));\n\n\t\tfor (let i = offset; i < 1 - offset; i += (1 - offset) / sep) {\n\t\t\tlet pA = p5.Vector.lerp(p1, p0, i);\n\t\t\tlet pB = p5.Vector.lerp(p2, p0, i);\n\t\t\tlet fc = int(random(pallete.length));\n\t\t\tfill(pallete[fc]);\n\t\t\tnoStroke();\n\t\t\tbeginShape();\n\t\t\tvertex(pA.x, pA.y);\n\t\t\tvertex(pB.x, pB.y);\n\t\t\tvertex(p0.x, p0.y);\n\t\t\tendShape(CLOSE);\n\t\t}\n\t}\n\tpop();\n\n}\n\n\nfunction draw() {\n\n\tinit();\n\timage(graphics, 0, 0);\n\tframeRate(1);\n\n}\n\n\nfunction createPallete(_url) {\n\tlet slash_index = _url.lastIndexOf('/');\n\tlet pallate_str = _url.slice(slash_index + 1);\n\tlet arr = pallate_str.split('-');\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tarr[i] = '#' + arr[i];\n\t}\n\treturn arr;\n}\n\nfunction drawNoiseBackground(_n, _graphics) {\n\tlet c = color(0, 0, 100, 7);\n\tfor (let i = 0; i < _n; i++) {\n\t\tlet x = random(1) * width;\n\t\tlet y = random(1) * height;\n\t\tlet w = random(1, 2);\n\t\tlet h = random(1, 2);\n\t\t_graphics.noStroke();\n\t\t_graphics.fill(c);\n\t\t_graphics.ellipse(x, y, w, h);\n\t}\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "let p,q,r=[];\n\nlet angleA;\nlet angleB;\n\nsetup=_=>{createCanvas(windowWidth,windowHeight,WEBGL);\n\tw = windowWidth;\n  p = createVector(); \n  angleMode(DEGREES);          \n  angleA = random(360);\n  angleB = random(-180, 180);\n          \n}\ndraw=_=>{\n  background(0);\n  stroke(w);\n  let nsA = 250;\n  let nsB = 350;\n  let angleA = noise(p.x/nsA,p.y/nsA,frameCount/nsA)*360;\n  let angleB = noise(p.y/nsB,p.z/nsB,frameCount/nsB)*360-180;\n  q=createVector(\n    cos(angleA) * cos(angleB),\n    sin(angleA) * cos(angleB),\n    sin(angleB),\n  ).mult(3);\n  p.add(q);\n  r.push(p.copy());\n  noFill();\n  beginShape();\n  for(let i = r.length-1; i >0; i--){\n    vertex(r[i].x,r[i].y,r[i].z);\n  }\n  endShape();\n  \n  if(r.length > 1000){\n    r.shift();\n  }\n  point(p.x,p.y,p.z);\n  \n  let v = createVector(\n    p.x + cos(angleA) * cos(angleB) * 100,\n    p.y + sin(angleA) * cos(angleB) * 100,\n    p.z + sin(angleB) * 100\n  );\n\n  camera(v.x,v.y,v.z,p.x,p.y,p.z,0,1,0);  \n  \n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Senbaku\n\n### Response:\n",
    "completion": "//2021-01/13~14\n/*\n.push()\u3068.splice();\nhttps://www.youtube.com/watch?v=EyG_2AdHlzY\n\nsplice(index,how many);\n*/\n\nlet mover = [];\nlet t = 0.0;\nlet vel = 0.02;\n\nfunction setup() {\n\tcreateCanvas(5200,3900);\n\tbackground(51);\n\tblendMode(OVERLAY)\n}\n\nfunction draw() {\n\t//150\u30ab\u30a6\u30f3\u30c8\u3054\u3068\u306bmover\u5897\u3048\u308b\n\tif (frameCount % 150 == 0) {\n\t\tmover.push(new Mover(width/2,height/2));\n\t}\n\n\tfor (let i = 0, len = mover.length; i < len; i++) {\n\t\tmover[i].show();\n\t\tmover[i].update();\n\t}\n\n\t//5\u500b\u8d85\u3048\u305f\u3089\u6d88\u3048\u308b\n\tif (mover.length > 5) {\n\t\tmover.splice(0, 1);\n\t}\n}\n\nclass Mover {\n\tconstructor(x, y) {\n\t\tthis.pos = createVector(x, y);\n\t\tthis.vel = createVector(0, 0);\n\t\tthis.acc = createVector(0, 0);\n\t\tthis.d = random(height/100,height/150);\n\t\tvar colors = \"ffa630-d7e8ba-4da1a9\".split(\"-\").map(a=>\"#\"+a);\n\t\tthis.cc = color(random(colors))\n\n\t}\n\tupdate() {\n\t\tthis.acc = p5.Vector.random2D();\n\t\tthis.acc.mult(random(2));\n\t\tthis.vel.add(this.acc);\n\t\tthis.vel.limit(3);\n\t\tthis.pos.add(this.vel);\n\t}\n\tshow() {\n\t\tpush();\n\t\ttranslate(this.pos.x, this.pos.y)\n\t\trotate(t)\n\t\tstroke(this.cc)\n\t\tstrokeWeight(0.5)\n\t\tline(0, -this.d, 0, this.d);\n\t\tpop();\n\t\tt += vel;\n\t}\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Senbaku"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "let url = \"https://coolors.co/3d5a80-98c1d9-e0fbfc-ee6c4d-293241\";\nlet palette;\nlet texture;\n\nfunction setup() {\n\tcreateCanvas(800, 800);\n\tcolorMode(HSB, 360, 100, 100, 100);\n\tangleMode(DEGREES);\n\n\ttexture = createGraphics(width, height);\n\ttexture.colorMode(HSB, 360, 100, 100, 100);\n\ttexture.stroke(0, 0, 100, 10);\n\tfor (let i = 0; i < width * height * 5 / 100; i = i + 1) {\n\t\ttexture.strokeWeight(random(3));\n\t\ttexture.point(random(width), random(height));\n\t}\n\tpalette = createPalette(url);\n}\n\nfunction draw() {\n\tbackground(0, 0, 95);\n\tdrawingContext.shadowColor = color(0, 0, 0, 16);\n\tdrawingContext.shadowBlur = width / 20;\n\tlet angle, sx, sy;\n\tnoStroke();\n\tfor (let i = 0; i < 1; i++) {\n\n\t\tangle = 30 * i;\n\t\tsx = random(45) / 2;\n\t\tsy = random(45) / 2;\n\n\t\tlet w = sqrt(sq(width) + sq(height));\n\t\tlet offset = width / 20;\n\t\tlet x, y, xStep, yStep, xMin, yMin, xMax, yMax;\n\t\tlet yStepMax, yStepMin, xStepMax, xStepMin;\n\n\t\txMin = offset;\n\t\tyMin = offset;\n\t\txMax = w - offset;\n\t\tyMax = w - offset;\n\n\n\t\tpush();\n\t\ttranslate(width / 2, height / 2);\n\t\trotate(angle);\n\t\tshearX(sx);\n\t\tshearY(sy);\n\t\ttranslate(-w / 2, -w / 2);\n\n\t\ty = yMin;\n\t\twhile (y < yMax) {\n\t\t\tyStepMin = (yMax - yMin) / random(2, 100);\n\t\t\tyStepMax = yStepMin * random(1, 2);\n\t\t\tyStep = random(yStepMin, yStepMax);\n\t\t\tif (y + yStep > yMax || yMax - (y + yStep) < yStepMin) {\n\t\t\t\tyStep = yMax - y;\n\t\t\t}\n\t\t\tx = xMin;\n\t\t\twhile (x < xMax) {\n\t\t\t\txStepMin = (xMax - xMin) / random(2, 100);\n\t\t\t\txStepMax = xStepMin * random(1, 2);\n\t\t\t\txStep = random(xStepMin, xStepMax);\n\t\t\t\tif (x + xStep > xMax || xMax - (x + xStep) < xStepMin) {\n\t\t\t\t\txStep = xMax - x;\n\t\t\t\t}\n\t\t\t\t// rect(x, y, xStep, yStep);\n\t\t\t\tfor (let j = 0; j < 4; j++) {\n\n\t\t\t\t\tpush();\n\t\t\t\t\ttranslate(x + xStep / 2, y + yStep / 2);\n\t\t\t\t\tscale(j > 2 ? -1 : 1,\n\t\t\t\t\t\tj % 2 == 0 ? -1 : 1);\n\t\t\t\t\ttranslate(-xStep / 2, -yStep / 2);\n\t\t\t\t\tlet step = int(random(2, 6));\n\t\t\t\t\tlet colors = shuffle(palette.concat());\n\t\t\t\t\tlet n = 0;\n\t\t\t\t\tlet color_limit = int(random(2, colors.length));\n\t\t\t\t\tfor (let e = 1; e > 0; e -= 1 / step) {\n\t\t\t\t\t\tpush();\n\t\t\t\t\t\tscale(e);\n\t\t\t\t\t\tstrokeWeight(1 / e);\n\t\t\t\t\t\tfill(colors[n++ % color_limit]);\n\t\t\t\t\t\ttriangle(0, 0, xStep, 0, 0, yStep);\n\t\t\t\t\t\t// arc(0, 0, xStep * 2, yStep * 2, 0, 90,PIE);\n\t\t\t\t\t\tpop();\n\t\t\t\t\t}\n\t\t\t\t\tpop();\n\t\t\t\t}\n\t\t\t\tx += xStep;\n\t\t\t}\n\t\t\ty += yStep;\n\t\t}\n\n\t\tpop();\n\t}\n\tframeRate(1/2);\n}\n\nfunction createPalette(_url) {\n\tlet slash_index = _url.lastIndexOf('/');\n\tlet pallate_str = _url.slice(slash_index + 1);\n\tlet arr = pallate_str.split('-');\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tarr[i] = color('#' + arr[i]);\n\t}\n\treturn arr;\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "let imgs;\n\nfunction setup() {\n\tconst c = createCanvas(800, 800);\n\tangleMode(DEGREES);\n\tc.drop(gotFile);\n\tinit();\n}\n\nfunction init() {\n\timgs = [];\n\tredraw();\n}\n\nfunction draw() {\n\tbackground(100);\n\tfill(255);\n\tnoStroke();\n\ttextSize(24);\n\ttextAlign(CENTER);\n\ttext('Drag square image files onto the canvas.', width / 2, height / 2);\n\tnoLoop();\n}\n\nfunction mousePressed() {\n\tif (imgs.length > 0) {\n\t\tseparateGrid(0, 0, width);\n\t}\n}\n\nfunction keyPressed() {\n\tif (key == \"s\" || key == \"S\") {\n\t\tsave();\n\t}\n\tif (key == \"r\" || key == \"R\") {\n\t\tinit();\n\t}\n}\n\nfunction gotFile(file) {\n\tif (file.type === 'image') {\n\t\tconst img = createImg(file.data, \"hogehoge\", \"\", function() {\n\t\t\timgs.push(img);\n\t\t\tseparateGrid(0, 0, width);\n\t\t}).hide();\n\t} else {\n\t\tconsole.log('Not an image file!');\n\t}\n}\n\nfunction separateGrid(x, y, d) {\n\tlet sepNum = int(random(1, 4));\n\tlet w = d / sepNum;\n\tfor (let i = x; i < x + d - 1; i += w) {\n\t\tfor (let j = y; j < y + d - 1; j += w) {\n\t\t\tif (random(100) < 90 && d > width / 15) {\n\t\t\t\tseparateGrid(i, j, w);\n\t\t\t} else {\n\t\t\t\tpush();\n\t\t\t\ttranslate(i + w / 2, j + w / 2);\n\t\t\t\trotate(int(random(4)) * 360 / 4);\n\t\t\t\timageMode(CENTER);\n\t\t\t\timage(random(imgs), 0, 0, w, w);\n\t\t\t\tpop();\n\t\t\t}\n\t\t}\n\t}\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Okazz\n\n### Response:\n",
    "completion": "let palette = [\"#ffbc42\",\"#4ecdc4\",\"#ee3b79\",\"#2D66AF\",\"#d81159\",\"#ffffff\", \"#484848\"];\nlet bg;\n\nfunction setup(){\n\tcreateCanvas(800, 800);\n\tnoLoop();\n\trectMode(CENTER);\n\t\n\tlet sep = 2;\n\tbg = createGraphics(width, height);\n\tbg.noFill();\n\tbg.stroke(25, 20);\n\tbg.strokeWeight(0.5);\n\tfor (let i = 0; i < width; i+=sep) {\n\t\tfor (let j = 0; j < height; j+=sep) {\n\t\t\tbg.rect(i, j, sep, sep);\n\t\t}\n\t}\n}\n\nfunction draw(){\n\tbackground(255);\n\t\n\tlet c = 200;\n\tfor(let i=0; i<c; i++){\n\t\tlet x = random(width);\n\t\tlet y = random(height);\n\t\tlet s = random(50, map(i, 0, c-1, 600, 150));\n\t\tlet a = random(TAU);\n\t\tlet n = 50;\n\t\tlet col = color(random(palette));\n\t\tcol.setAlpha(5);\n\t\tpush();\n\t\tnoStroke();\n\t\tfill(col);\n\t\ttranslate(x, y);\n\t\trotate(a);\n\t\tfor(let j=0; j<n; j++){\n\t\t\tlet off = map(j, 0, n-1, 0, s*0.2);\n\t\t\tellipse(random(-1, 1)*2, random(-1, 1)*2, s+off, s+off);\n\t\t}\n\t\tpop();\n\t\tstrokeWeight(0.5);\n\t\tstroke(0);\n\t\tform(x, y, s, a);\n\t}\n\timage(bg, 0, 0);\n}\n\nfunction form(x, y, s, a){\n\tlet num = int(random(3, 180));\n\tlet sep = TAU/num;\n\tlet dia = random(0.1, 0.5)*s;\n\tpush();\n\ttranslate(x, y);\n\trotate(a);\n\tfill(random(palette));\n\tfor(let i=0; i<TAU; i+=sep){\n\t\trotate(sep);\n\t\tfill(random(palette));\n\t\tarc(0, 0, s, s, 0, sep);\n\t}\n\tfill(random(palette));\n\tellipse(0, 0, dia, dia);\n\tpop();\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Okazz"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by anthony\n\n### Response:\n",
    "completion": "function setup() {\n\tsimple();\n\tbackground(100);\n\tcolorMode(HSB);\n}\n\nfunction draw() {\n\t\n//\tstroke('red');\n\tnoStroke();\n\trepeat(0, 800, 1, 0, 600, 1, horizon);\n\n}\n\nfunction horizon(x, y){\n\n\t//let h = 200*noise(x/200);\n\tlet sat = 100 * noise(x/200, y/100);\n//\tlet hue = map(noise(x/200, y/100), 0, 1, 0, 120);\n\t//let hue = \n\t\n\t\tstroke(220, sat, 100);\n//\tfill(220, sat, 100);\n//\tline(x, 400, x, 400 - h);\n//\tline(x, 200, x, 200 - h);\n\t\n\tpoint(x, y);\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by anthony"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Okazz\n\n### Response:\n",
    "completion": "let objs = [];\nlet colors = ['#DE183C', '#F2B541', '#0C79BB', '#2DACB2', '#E46424', '#ECACBE', '#000000', '#19446B'];\nlet noiseFilter;\n\nfunction setup() {\n\tcreateCanvas(900, 900);\n\trectMode(CENTER);\n\n\tlet c = 9;\n    let w = width / c;\n    for (let i = 0; i < c; i++) {\n        for (let j = 0; j < c; j++) {\n            let x = i * w + w/2;\n            let y = j * w + w/2;\n\t\t\tif((i+j) % 2 == 0){\n\t\t\t\tobjs.push(new Objct(x, y, w * random(1.0, 1.3)));\n\t\t\t}\n        }\n    }\n\n\tnoiseFilter = createImage(width, height);\n\tnoiseFilter.loadPixels();\n\tlet pix = noiseFilter.width * noiseFilter.height * 4;\n\tfor (let i = 0; i < pix; i += 4) {\n\t\tnoiseFilter.pixels[i] = random(255);\n\t\tnoiseFilter.pixels[i + 1] = random(255);\n\t\tnoiseFilter.pixels[i + 2] = random(255);\n\t\tnoiseFilter.pixels[i + 3] = 20;\n\t}\n\tnoiseFilter.updatePixels();\n}\n\nfunction draw() {\n\tpush();\n\ttranslate(width/2, height/2);\n\tscale(0.9);\n\ttranslate(-width/2, -height/2);\n\tbackground(255);\n\tfor (let i of objs) {\n\t\ti.show();\n\t\ti.move();\n\t}\n\tpop();\n\timage(noiseFilter, 0, 0);\n}\n\nfunction easeOutCirc(x) {\n\treturn sqrt(1 - Math.pow(x - 1, 2));\n}\n\nclass Objct {\n\tconstructor(x, y, d) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.d = d;\n\t\tthis.n = int(random(4, 15));\n\t\tthis.sw = d / this.n;\n\t\tthis.te = int(random(200, 400));\n\t\tthis.t = 0;\n\t\tthis.circles = [];\n\t\tthis.cols = [];\n\t\tshuffle(colors, true);\n\t\tfor (let i = 0; i < this.n; i++) {\n\t\t\tthis.cols.push(colors[i % colors.length]);\n\t\t\tthis.circles.push(new Circle(0, 0, this.d * 1.1, -((this.te / this.n) * i) + this.te, this.te, this.cols[i]));\n\t\t}\n\t\tthis.count = 0;\n\t}\n\n\tshow() {\n\t\tpush();\n\t\ttranslate(this.x, this.y);\n\t\tstrokeWeight(0);\n\t\tstroke(0);\n\t\tnoFill();\n\t\tcircle(0, 0, this.d);\n\t\tdrawingContext.clip();\n\t\tfor (let i = 0; i < this.circles.length; i++) {\n\t\t\tlet r = this.circles[i];\n\t\t\tr.show();\n\t\t\tr.move();\n\t\t}\n\t\tfor (let i = 0; i < this.circles.length; i++) {\n\t\t\tlet r = this.circles[i];\n\n\t\t\tif (r.isDead) {\n\t\t\t\tthis.count++;\n\t\t\t\tthis.circles.splice(i, 1);\n\t\t\t\tthis.circles.push(new Circle(0, 0, this.d*1.1, 0, this.te, this.cols[this.count % this.cols.length]));\n\t\t\t}\n\t\t}\n\t\tpop();\n\n\t}\n\tmove() {\n\t\tthis.t++;\n\t}\n}\n\nclass Circle {\n\tconstructor(x, y, d, t0, t1, col) {\n\t\tlet th = random(TAU);\n\t\tlet r = random(0, 0.5) * d\n\t\tthis.x0 = x + r * cos(th);\n\t\tthis.x1 = x;\n\t\tthis.y0 = y + r * sin(th)\n\t\tthis.y1 = y;\n\t\tthis.x = this.x0;\n\t\tthis.y = this.y0;\n\n\t\tthis.d = 0;\n\t\tthis.d1 = d;\n\t\tthis.t = t0;\n\t\tthis.t1 = t1;\n\t\tthis.isDead = false;\n\t\tthis.col = col;\n\n\t\t\n\t}\n\n\tshow() {\n\t\tnoStroke();\n\t\tfill(this.col);\n\t\tcircle(this.x, this.y, this.d);\n\t}\n\n\tmove() {\n\t\tif (0 < this.t && this.t < this.t1) {\n\t\t\tlet n = norm(this.t, 0, this.t1 - 1);\n\t\t\tthis.d = lerp(0, this.d1, easeOutCirc(n));\n\t\t\tthis.x = lerp(this.x0, this.x1, easeOutCirc(n));\n\t\t\tthis.y = lerp(this.y0, this.y1, easeOutCirc(n));\n\t\t}\n\t\tif (this.t > this.t1) {\n\t\t\tthis.isDead = true;\n\t\t}\n\n\t\tthis.t++;\n\t}\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Okazz"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by sayo, with tags genuary,genuary2022\n\n### Response:\n",
    "completion": "let pg;\nlet myShader;\nlet canvasSize;\n\nlet n;\nlet primitive;\nlet rotation = [0.0, 0.0, 0.0];\n\nconst vert = `\nattribute vec3 aPosition;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nvoid main() {\n\tvec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n} \n`;\n\nconst frag = `\nprecision highp float;\n\nuniform sampler2D uTexture;\nuniform vec2 uResolution;\nuniform float uTime;\n\nfloat rnd(vec2 p){\n\treturn fract(sin(dot(p ,vec2(12.9898,78.233))) * 25829.357);\n}\n\nvoid main() {\n\tvec2 pos0 = gl_FragCoord.xy / uResolution;\n\tvec2 pos = floor(gl_FragCoord.xy / 2.0) * 2.0 / uResolution;\n\tpos.x += (max(0.0, rnd(vec2(pos.y, uTime)) - 0.95) + min(0.0, rnd(vec2(pos.y, uTime)) - 0.05)) * 5e-2;\n\tfloat r = texture2D(uTexture, pos).r;\n\tfloat g = texture2D(uTexture, pos - vec2(2e-3, 0.0)).g;\n\tfloat b = texture2D(uTexture, pos + vec2(2e-3, 0.0)).b;\n\t\n\tvec3 color = vec3(r, g, b);\n\tcolor *= rnd(vec2(floor(gl_FragCoord.x / 50.0 + rnd(pos0 + uTime) * 10.0), gl_FragCoord.y / 10.0 + floor(uTime * 16.0))) > 0.3 ? 1.0 : 0.9;\n\tcolor *= smoothstep(1.0, 0.0, pow(length(pos - 0.5), 1.2));\n\tgl_FragColor = vec4(color, 1.0);\n}\n`;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL);\n\tcanvasSize = min(width, height);\n\tnoStroke();\n\tpixelDensity(1);\n\t\n\tn = int(random(3, 10));\n\tprimitive = int(random(4));\n\trotation[0] = random(-5e-4, 5e-4);\n\trotation[1] = random(-1e-3, 1e-3);\n\trotation[2] = random(-1e-3, 1e-3);\n\t\n\tmyShader = createShader(vert, frag);\n\tshader(myShader);\n\tmyShader.setUniform(\"uResolution\", [width, height]);\n\t\n\tpg = createGraphics(width, height, WEBGL);\n\tpg.noStroke();\n\tpg.directionalLight(255, 255, 255, 1, 1, -1);\n\tframeRate(30);\n}\n\nfunction draw() {\n\tbackground(0);\n\t\n\tpg.clear();\n\tpg.background(200);\n\t\n\tpg.fill(255);\n\tpg.push();\n\tpg.rotateZ(millis() * rotation[0]);\n\t\n\tconst r = canvasSize / (2.5 * (1 + sin(PI / n)));\n\tconst size = r * sin(PI / n) * 0.8;\n\tfor (let i = 0; i < n; i++) {\n\t\tpg.push();\n\t\tpg.rotateZ(TWO_PI * i / n);\n\t\tpg.translate(r, 0, 0);\n\t\tpg.rotateX(millis() * rotation[1]);\n\t\tpg.rotateY(millis() * rotation[2]);\n\t\tswitch (primitive) {\n\t\t\tcase 0:\n\t\t\t\tpg.cone(size, size * 2.0, 64, 64);\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tpg.cylinder(size * 0.5, size * 2.0, 64, 64);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tpg.box(size * 2.0, size, size);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tpg.torus(size * 0.8, size * 0.4, 64, 64);\n\t\t\t\tbreak;\n\t\t}\n\t\tpg.pop();\n\t}\t \n\t\t\n\tpg.pop();\n\t\n\tmyShader.setUniform(\"uTexture\", pg);\n\tmyShader.setUniform(\"uTime\", millis() / 1000.0);\n\trect(-width / 2, -height / 2, width, height);\n}\n\nfunction mousePressed() {\n\tn = int(random(3, 10));\n\tprimitive = int(random(4));\n\trotation[0] = random(-5e-4, 5e-4);\n\trotation[1] = random(-1e-3, 1e-3);\n\trotation[2] = random(-1e-3, 1e-3);\n\n\tmyShader.setUniform(\"uColor\", color(`hsb(${int(random(36000)) % 360}, 4%, 80%)`)._array);\n}\n\nfunction windowResized() {\n\tresizeCanvas(windowWidth, windowHeight);\n\tpg.resizeCanvas(width, height);\n\tcanvasSize = min(width, height);\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by sayo, with tags genuary,genuary2022"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "let g;\nlet step = 15;\nlet capture;\n\nfunction setup() {\n  createCanvas(800, 800);\n  angleMode(DEGREES);\n  noSmooth();\n  g = createGraphics(width, height, WEBGL);\n  g.ortho(-width/2,width/2,-height/2,height/2,-5000,5000);\n  capture = createCapture(VIDEO);\n  capture.hide();\n  \n  g.angleMode(DEGREES);\n  background(220);\n}\n\nfunction draw() {\n  // clear();\n  step = int(map(noise(frameCount/200),0,1,0,10));\n  g.clear();\n  g.push();\n  g.rotateX(frameCount / 3);\n  g.rotateY(frameCount / 4);\n  g.rotateZ(frameCount / 5);\n  g.scale(map(noise(frameCount/200),0,1,0.5,4));\n  g.shearX(sin(frameCount/100)*45);\n  g.shearY(cos(frameCount/100)*45);\n  g.texture(capture);\n  g.noStroke();\n  g.box(100);\n  // g.cylinder(50,150,30,30,false,false);\n  g.pop();\n\n  copy(0, 0, width, height, -step, -step, width + step * 2, height + step * 2);\n  push();\n  translate(width/2,height/2);\n  rotate(frameCount);\n  imageMode(CENTER);\n  image(g, 0, 0);\n  pop();\n  \n}\n",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by kusakari, with tags grid,circle\n\n### Response:\n",
    "completion": "let _aryObject = [];\nlet _tileNumT;\nlet _tileNumR;\nlet _ellipseRatio;\nlet _count;\nlet _stepR;\nlet _stepT;\n\nfunction setup() {\n  let canvasSize;\n  if (windowWidth <= windowHeight) {\n    canvasSize = windowWidth;\n  } else {\n    canvasSize = windowHeight;\n  }\n  createCanvas(canvasSize, canvasSize);\n  frameRate(30);\n  noFill();\n  colorMode(HSB, 360, 100, 100, 255);\n  strokeJoin(ROUND);\n  \n  _freqCount = 20;\n\n  _count = 0;\n  _ellipseRatio = 1;\n  _tileNumT = 4;\n  _tileNumR = 4;\n  \n  let shapeMode = 1;\n  let layerNum = 10;\n\tlet initT = int(random(_tileNumT));\n  for (k = 1; k <= layerNum; k++) {\n    let baseColor = 360 + random(720);\n    _aryObject.push(new f(\n      1, initT,\n      color((baseColor + 180) % 360, 100, 100, 255),\n      shapeMode,\n      width/2/_tileNumR/layerNum*k\n    ));\n  }\n}\n\nfunction draw() {\n  clear();\n  blendMode(DIFFERENCE);\n  background(0);\n  \n  for (let i = 0; i < _aryObject.length; i++) {\n    _aryObject[i].update();\n    _aryObject[i].drawMe();\n  }\n\n  _count ++;\n}\n\nclass f {\n  constructor(iR, iT, myColor, shapeMode, sw) {\n    this.target_iR = iR;\n    this.target_iT = iT;\n    this.myColor = myColor;\n    this.shapeMode = shapeMode; //0 rect, 1 ellipse\n\t\tthis.sw = sw *_ellipseRatio; \n    this.aryPoint = [];\n  }\n\n  setTarget() {\n    _stepR = 1;\n    _stepT = 1;\n    this.iR = this.target_iR;\n    this.iT = this.target_iT % _tileNumT;\n    \n    this.aryPoint.unshift([this.iR, this.iT]);\n\n    let dir;\n    if (this.iR <= _stepR) {\n      dir = random([\"down\", \"left\", \"right\"]);\n    } else if (this.iR >= _tileNumR-_stepR) {\n      dir = random([\"up\", \"left\", \"right\"]);\n    } else {\n      dir = random([\"up\", \"down\", \"left\", \"right\"]);\n    }\n\n    if (dir == \"up\") { this.target_iR = this.iR - _stepR; }\n    else if (dir == \"down\") { this.target_iR = this.iR + _stepR; }\n    else if (dir == \"left\") { this.target_iT = this.iT - _stepT; }\n    else if (dir == \"right\") { this.target_iT = this.iT + _stepT; }\n\n    this.dR = (this.target_iR - this.iR) / (_freqCount+1);\n    this.dT = (this.target_iT - this.iT) / (_freqCount+1);\n  }\n  \n  update() {\n    if (_count % _freqCount == 0) {\n      this.setTarget();\n    }\n\n    if (this.target_iR == this.iR) { //dir = right or left\n      this.aryPoint.unshift([this.iR, this.aryPoint[0][1] + this.dT]);\n    } else if (this.target_iT == this.iT) {\n      this.aryPoint.unshift([this.aryPoint[0][0] + this.dR, this.iT]);\n    }\n\n    while (this.aryPoint.length >= 40) {\n      this.aryPoint.pop();\n    }\n  }\n\n  drawMe() {\n    stroke(this.myColor);\n    if (this.shapeMode == 0) { \n      strokeCap(PROJECT); \n    }\n    else { \n      strokeCap(ROUND); \n    }\n    strokeWeight(this.sw);\n    \n    push();\n    translate(width/2, height/2);\n    beginShape();\n    for (let i = 0; i < this.aryPoint.length; i++) {\n      curveVertex(\n        width / 2 / _tileNumR * this.aryPoint[i][0] * cos(2*PI / _tileNumT * this.aryPoint[i][1]),\n        width / 2 / _tileNumR * this.aryPoint[i][0] * sin(2*PI / _tileNumT * this.aryPoint[i][1]));\n    }\n    endShape();\n    pop();\n  }\n}\n\nfunction mouseReleased() {\n  _count = 0;\n  _ellipseRatio = 1;\n  _tileNumT = 4;\n  _tileNumR = 4;\n  \n  let shapeMode = 1;\n  let layerNum = 10;\n  _aryObject = [];\n\tlet initT = int(random(_tileNumT));\n  for (k = 1; k <= layerNum; k++) {\n    let baseColor = 360 + random(720);\n    _aryObject.push(new f(\n      1, initT,\n      color((baseColor + 180) % 360, 100, 100, 255),\n      shapeMode,\n      width/2/_tileNumR/layerNum*k\n    ));\n  }\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by kusakari, with tags grid,circle"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Ahmad Moussa || Gorilla Sun\n\n### Response:\n",
    "completion": "function setup(){\n  w = min(windowWidth, windowHeight);\n  createCanvas(w, w);\n  strokeWeight(4);\n  pad = w/10;\n  spc = 25;\n  \n  rectMode(CENTER)\n  noFill()\n  strokeWeight(2)\n}\n\nfunction draw(){\n  background(0)\n  stroke(255)\n  for (x = pad; x < w - pad; x += spc) {\n    for (y = pad; y < w - pad; y += spc) {\n      rect(x, y, spc, spc)\n    }\n  }\n  noLoop()\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Ahmad Moussa || Gorilla Sun"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by Okazz\n\n### Response:\n",
    "completion": "let palette = [\"#ff0000\", \"#00ff00\", \"#0000ff\", \"#00ffff\", \"#ff00ff\", \"#ffff00\", \"#ffffff\", \"#000000\"];\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tnoLoop();\n\tshuffle(palette, true);\n}\n\nfunction draw() {\n\tlet bgCol = palette[palette.length - 1];\n\tlet dotCol = palette[int(random(palette.length - 1))];\n\tbackground(bgCol);\n\tnoStroke();\n\tfill(dotCol);\n\tdotsGrid();\n\trandomShapes();\n}\n\nfunction randomShapes() {\n\tnoFill();\n\tstrokeWeight(5);\n\tfor (let i = 0; i < 100; i++) {\n\t\tlet x = random(width);\n\t\tlet y = random(height);\n\t\tlet ang = int(random(8)) * PI * 0.25;\n\t\tlet s = random(10, 80);\n\t\tlet rnd = int(random(4));\n\t\tlet wCount = int(random(1, 6));\n\t\tlet col = palette[int(random(palette.length - 1))];\n\t\tpush();\n\t\ttranslate(x, y);\n\t\trotate(ang);\n\t\tstroke(col);\n\t\tif (rnd == 0) {\n\t\t\tdrawCurve(0, 0, s, wCount);\n\t\t} else if (rnd == 1) {\n\t\t\tcircle(0, 0, s);\n\t\t} else if (rnd == 2) {\n\t\t\trect(0, 0, s, s, s * 0.05);\n\t\t} else if (rnd == 3) {\n\t\t\tline(-s * 2, 0, s * 2, 0);\n\t\t}\n\t\tpop();\n\t}\n}\n\nfunction drawCurve(x_, y_, s, wCount) {\n\tpush();\n\ttranslate(x_, y_);\n\tbeginShape();\n\tlet cc = 2000;\n\tlet off = random((PI * 0.5));\n\tfor (let i = 0; i < cc; i++) {\n\t\tlet nor = norm(i, 0, cc);\n\t\tlet y = nor * s * 2;\n\t\tlet theta = (lerp(0, TAU, nor) - off) * wCount;\n\t\tlet osc = lerp(s * noise(nor), 0, nor);\n\t\tlet x = sin(theta) * osc + s / 2;\n\t\tvertex(x - s * 0.5, y - s * 0.5);\n\t}\n\tendShape();\n\tpop();\n}\n\nfunction dotsGrid() {\n\tlet c = int(random(200, 300));\n\tlet w = width / c;\n\tfor (let i = 0; i < c; i++) {\n\t\tfor (let j = 0; j < c; j++) {\n\t\t\tcircle(i * w + w / 2, j * w + w / 2, w * 0.5);\n\t\t}\n\t}\n}",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by Okazz"
  },
  {
    "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ngenerate p5js creative art code by takawo\n\n### Response:\n",
    "completion": "let palette = [\n  \"#f94144\",\n  \"#f3722c\",\n  \"#f8961e\",\n  \"#f9844a\",\n  \"#f9c74f\",\n  \"#90be6d\",\n  \"#43aa8b\",\n  \"#4d908e\",\n  \"#577590\",\n  \"#277da1\",\n];\n\nfunction setup() {\n  createCanvas(800, 800);\n  colorMode(HSB, 360, 100, 100, 100);\n  angleMode(DEGREES);\n}\n\nfunction draw() {\n  shuffle(palette, true);\n  let gradient = drawingContext.createLinearGradient(0, 0, 0, height);\n\n  // noStroke();\n\n  gradient.addColorStop(0, palette[0]);\n  gradient.addColorStop(0.33, palette[1]);\n\n  drawingContext.fillStyle = gradient;\n  rect(0, 0, width, height);\n\n  blendMode(ADD);\n  background(0, 0, 100, 30);\n  blendMode(BLEND);\n\n  let offset = width / 15;\n  let x = offset;\n  let y = offset;\n  let w = width - offset * 2;\n  let minW = w / 5;\n\n  stroke(0, 0, 15);\n  drawingContext.shadowColor = color(0, 0, 0, 15);\n  drawingContext.shadowBlur = offset / 5;\n\n  separateGrid(x, y, w, minW);\n\n  noLoop();\n}\n\nfunction separateGrid(x, y, w, minW) {\n  let step = int(random(1, 5)); //2,3,4\n  let d = w / step;\n  for (let j = 0; j < step; j++) {\n    for (let i = 0; i < step; i++) {\n      let x2 = x + i * d;\n      let y2 = y + j * d;\n      if (random() < 0.9 && d > minW) {\n        separateGrid(x2, y2, d, minW);\n      } else {\n        drawShapes(x2 + d / 2, y2 + d / 2, d);\n      }\n    }\n  }\n}\n\nfunction drawShapes(cx, cy, d) {\n  push();\n  translate(cx, cy);\n  rotate((int(random(4)) * 360) / 4);\n  // scale(random() > 0.5 ? -1 : 1, random() > 0.5 ? -1 : 1);\n  // triangle(-d/2,-d/2,-d/2,d/2,d/2,-d/2);\n  let shapeNum = int(random(4));\n  switch (shapeNum) {\n    case 0:\n      separateCircle(0, 0, d, random([2, 4]));\n      break;\n    case 1:\n      push();\n      translate(-d / 2, 0);\n      rotate(-90);\n      separateArc(0, 0, d, d, 0, 180, PIE, int(random(2, 5)));\n      pop();\n      push();\n      translate(d / 2, 0);\n      rotate(90);\n      separateArc(0, 0, d, d, 0, 180, PIE, int(random(2, 5)));\n      pop();\n      break;\n    case 2:\n      push();\n      translate(-d / 2 / 2, 0);\n      scale(random() > 0.5 ? -1 : 1, 1);\n      translate(-d / 2 / 2, 0);\n      rotate(-90);\n      separateArc(0, 0, d, d, 0, 180, PIE, int(random(2, 5)));\n      pop();\n      push();\n      translate(+d / 2 / 2, 0);\n      scale(random() > 0.5 ? -1 : 1, 1);\n      translate(-d / 2 / 2, 0);\n      rotate(-90);\n      separateArc(0, 0, d, d, 0, 180, PIE, int(random(2, 5)));\n      pop();\n      break;\n    case 3:\n      for (let i = 0; i < 4; i++) {\n        push();\n        rotate((i * 360) / 4);\n        translate(-d / 2 / 2, -d / 2 / 2);\n        rotate((int(random(4)) * 360) / 4);\n        translate(-d / 2 / 2, -d / 2 / 2);\n        setConicGradient(0, 0, 0, shuffle(palette.concat()));\n        arc(0, 0, d, d, 0, 90, PIE);\n        pop();\n      }\n      break;\n  }\n  pop();\n}\n\nfunction separateCircle(x, y, d, step) {\n  push();\n  translate(x, y);\n  circle(0, 0, d);\n  let angleStep = 360 / step;\n  for (let i = 0; i < step; i++) {\n    push();\n    rotate(i * angleStep);\n    setConicGradient(0, 0, 0, shuffle(palette.concat()));\n    arc(0, 0, d, d, 0, angleStep, PIE);\n    pop();\n  }\n  pop();\n}\n\nfunction separateArc(x, y, w, h, startAngle, endAngle, type, step) {\n  push();\n  translate(x, y);\n  let angleStep = (endAngle - startAngle) / step;\n  for (let i = 0; i < step; i++) {\n    push();\n    rotate(startAngle + i * angleStep);\n    setConicGradient(0, 0, 0, shuffle(palette.concat()));\n    arc(0, 0, w, h, 0, angleStep, type);\n    pop();\n  }\n  pop();\n}\n\nfunction setConicGradient(angle, x, y, palette) {\n  let gradient = drawingContext.createConicGradient(angle, x, y);\n  gradient.addColorStop(0, palette[0]);\n  gradient.addColorStop(1 / 4, palette[1]);\n  drawingContext.fillStyle = gradient;\n}\n",
    "_var_input": "",
    "_var_instruction": "generate p5js creative art code by takawo"
  }
]